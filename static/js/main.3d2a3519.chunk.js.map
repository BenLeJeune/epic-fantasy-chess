{"version":3,"sources":["Pieces/FIDE/Bishop.ts","Pieces/FIDE/Rook.ts","Pieces/FIDE/Queen.ts","Pieces/FIDE/King.ts","assets/Pieces/FIDE/pawn_white.svg","assets/Pieces/FIDE/pawn_black.svg","assets/Pieces/FIDE/knight_white.svg","assets/Pieces/FIDE/knight_black.svg","assets/Pieces/FIDE/bishop_white.svg","assets/Pieces/FIDE/bishop_black.svg","assets/Pieces/FIDE/rook_white.svg","assets/Pieces/FIDE/rook_black.svg","assets/Pieces/FIDE/queen_white.svg","assets/Pieces/FIDE/queen_black.svg","assets/Pieces/FIDE/king_white.svg","assets/Pieces/FIDE/king_black.svg","Pieces/COLBOUND/Waffle.ts","Pieces/COLBOUND/Bede.ts","Pieces/COLBOUND/Warbishop.ts","Pieces/COLBOUND/Cardinal.ts","Pieces/OTHER/DummyPawn.ts","assets/Pieces/COL/bede_white.svg","assets/Pieces/COL/bede_black.svg","assets/Pieces/COL/waffle_white.svg","assets/Pieces/COL/waffle_black.svg","assets/Pieces/COL/warbishop_white.svg","assets/Pieces/COL/warbishop_black.svg","assets/Pieces/COL/cardinal_white.svg","assets/Pieces/COL/cardinal_black.svg","assets/Pieces/COL/dummy_pawn_white.svg","assets/Pieces/COL/dummy_pawn_black.svg","Pieces/OMEGA/Champion.ts","Pieces/OMEGA/Wizard.ts","Pieces/OMEGA/Jester.ts","assets/Pieces/OMEGA/champion_white.svg","assets/Pieces/OMEGA/champion_black.svg","assets/Pieces/OMEGA/wizard_white.svg","assets/Pieces/OMEGA/wizard_black.svg","assets/Pieces/OMEGA/jester_white.svg","assets/Pieces/OMEGA/jester_black.svg","Classes/Piece.ts","Cards/Card.ts","Cards/Expansions.ts","helpers/DifferentColours.ts","KEYS.ts","helpers/RiderMoves.ts","Pieces/GamePiece.ts","Pieces/ValueGrids.ts","Cards/Cards.ts","components/NiceButton/NiceButton.tsx","Classes/Move.ts","helpers/MoveFilter.ts","helpers/Adjacency.ts","helpers/Checks.ts","Presets/Armies.ts","Presets/Decks.ts","components/TextCopy/TextCopy.tsx","components/ConnectionWizard/ConnectionWizard.tsx","components/TextInput/TextInput.tsx","helpers/Encoding.ts","components/NavBar/NavBar.tsx","helpers/Utils.ts","Context/ConnectionContext.ts","Classes/OngoingEffect.ts","Classes/Board.ts","Classes/CardMove.ts","Cards/FIDE/Reposition_Card.ts","Messages.ts","types.ts","helpers/BoardGenerators.ts","Cards/CRUSADERS/Deception_Card.ts","Cards/CRUSADERS/Oust_Card.ts","Pieces/FIDE/Knight.ts","Classes/Game.ts","Cards/FIDE/Expendable_Card.ts","Cards/FIDE/Advance_Card.ts","Cards/FIDE/TacticalRetreat_Card.ts","Cards/FIDE/Mount_Card.ts","Cards/CRUSADERS/Adjust_Card.ts","Cards/CRUSADERS/Inquisition_Card.ts","Cards/CRUSADERS/Hallow_Card.ts","Cards/CRUSADERS/Repent_Card.ts","Cards/FIDE/Demote_Card.ts","Cards/FIDE/Maneuver_Card.ts","Cards/FIDE/Flee_Card.ts","Cards/FIDE/Promotion_Card.ts","Cards/FIDE/BattlePlan_Card.ts","Cards/CRUSADERS/Anoint_Card.ts","Cards/CRUSADERS/Clergy_Card.ts","Cards/CRUSADERS/Convert_Card.ts","Cards/CRUSADERS/Envoy_Card.ts","helpers/CompareMoves.ts","Pieces/FIDE/Pawn.ts","App.tsx","components/MovesDisplay/MovesDisplay.tsx","components/GameOverUI/GameOverUI.tsx","components/PlayableCard/PlayableCard.tsx","components/ChessSquare/ChessSquare.tsx","components/ChessPiece/ChessPiece.tsx","components/TargetingSquare/TargetingSquare.tsx","components/InfoBar/InfoBar.tsx","helpers/Evaluation.ts","components/PiecePromotionUI/PiecePromotionUI.tsx","components/ChessBoard/ChessBoard.tsx","WebWorker/index.ts","reportWebVitals.ts","views/PlayPage/PlayPage.tsx","Routers/PlayRouter.tsx","views/ArmiesPage/ArmiesPage.tsx","views/ArmiesBuilderPage/ArmiesBuilderPage.tsx","Routers/ArmiesRouter.tsx","views/Homepage/Homepage.tsx","views/DecksPage/DecksPage.tsx","views/DecksBuilderPage/DecksBuilderPage.tsx","Routers/DecksRouter.tsx","MainRouter.tsx","index.tsx"],"names":["Bishop","materialValue","engineValue","valueGrid","bishopGrid","evaluate","p","shortName","longName","movesDescription","specialMoves","notes","categories","getLegalMoves","position","board","mode","colour","moves","push","getLegalRiderMoves","Piece","getFile","GamePiece","Rook","rookGrid","getRank","Queen","queenGrid","King","kingGrid","history","getLegalSingleMoves","originalSquare","queensRook","kingsRook","kingMoves","filter","move","moving","captured","length","Bede","None","krMoves","from","to","special","qrMoves","qbMoves","Waffle","knightGrid","Warbishop","Cardinal","Knight","DummyPawn","pawnGrid","Pawn","map","m","Math","abs","Champion","Wizard","Jester","pieceMoves","reverse","differentColours","additional","hasOwnProperty","piece","getPiece","PIECES","PIECE_OBJECTS","isWhite","isBlack","getSquareName","FILES","getStyle","flipped","gridRow","gridColumn","getImage","w_pawn","b_pawn","w_knight","b_knight","w_bishop","b_bishop","w_rook","b_rook","w_queen","b_queen","w_king","b_king","w_waffle","b_waffle","w_warbishop","b_warbishop","w_bede","b_bede","w_cardinal","b_cardinal","w_dummyPawn","b_dummyPawn","w_champion","b_champion","w_wizard","b_wizard","w_jester","b_jester","Card","cardName","description","id","expac","targets","fast","cost","unMoveType","getValidTargets","playCard","trackPiece","square","uuid","generateUUID","getUUID","getUUIDWithInfo","regenerateUUID","FIDE_EXPANSION","CRUSADER_EXPANSION","target","sameColour","comparison","ARMY_KEY","DECK_KEY","GAME_KEY","b","pos","cb","callbacks","depth","nextSquare","obstructed","iterations","ALL_CARDS","Advance_Card","Expendable_Card","TacticalRetreat_Card","Reposition_Card","Mount_Card","Demote_Card","BattlePlan_Card","Maneuver_Card","Flee_Card","Promotion_Card","Adjust_Card","Inquisition_Card","Hallow_Card","Repent_Card","Oust_Card","Envoy_Card","Anoint_Card","Deception_Card","Clergy_Card","Convert_Card","NiceButton","reactChild","onClick","text","buttonStyle","disabled","highlight","className","ActualMove","_from","_to","_moving","_captured","_specify","NONE","_special","_additional","specify","getMoveName","isCardMove","promotionTo","mPiece","pieceName","captureText","destination","specification","FILE","BOTH","RANK","this","getActualMoves","adjacentSquares","i","corners","adj","r","f","isCheck","legalMoves","wKing","indexOf","bKing","Board","filterCardMoves","g","_g","Game","getBoard","getMoves","getWhiteDeck","getBlackDeck","getCurrentOngoingEffects","forEach","e","addOngoingEffect","OngoingEffect","getSquare","getName","getDurationRemaining","getTarget","stillInCheck","card","PlayCard","UnMove","reduce","validTargets","current","filterLegalMoves","effects","game","effect","getToolTip","oustEffects","pieceObj","pieceCanMove","validMoveExists","Move","mv","isThreatened","Army","_pieces","_name","pieces","name","FIDEARMY","CRUSADERSARMY","DEV_ARMY","Deck","_cards","cards","FIDEDECK","CRUSADERSDECK","DEV_DECK","TextCopy","title","preventDefault","stopPropagation","navigator","clipboard","writeText","initiator","TextInput","onChange","type","value","ConnectionWizard","shown","popupRef","useContext","ConnectionContext","Conn","Channel","initChannel","setListener","useState","none","connInitiator","setInitiator","localOffer","setLocalOffer","remoteOffer","setRemoteOffer","handleRemoteOfferChange","event","iceCandidates","useRef","useEffect","addEventListener","candidate","console","log","iceGatheringState","connectionState","window","DEV_SEND_MSG","data","send","errHandler","offerHandler","creating","local","remote","onicecandidate","localDescription","sdp","offer","JSON","stringify","candidates","btoa","encodeURIComponent","encodeOffer","createOffer","then","setLocalDescription","ondatachannel","group","channel","groupEnd","attemptConnection","atob","split","uri","decodeURIComponent","decodedRemoteOffer","decodedIceCandidates","remoteDescription","parse","_remoteOffer","RTCSessionDescription","remoteIceCandidates","setRemoteDescription","createAnswer","answer","catch","addIceCandidate","ref","NavBar","fixed","Connecting","attemptConnect","style","clickListener","getBoundingClientRect","x","y","height","width","removeEventListener","openConnectionPopup","randomFromList","list","floor","random","RTC_CONFIG","iceServers","RTCPeerConnection","createDataChannel","onopen","onclose","React","createContext","listener","onmessage","_affecting","_duration","_toolTip","_target","affecting","initialDuration","durationRemaining","toolTip","getInitialDuration","updateSquare","_square","tickDownDuration","unTickDuration","options","fullOptions","Object","assign","ignore","pieceObject","getThreats","CardMove","_cardName","_boardBefore","_targets","boardBefore","keys","previousTargets","index","square1","square2","updateGameBoard","piece1","piece2","target1","target2","Message","msgType","payload","ReadyMessage","SetupChoice_Message","_payload","GameStartRequest_Message","GameStartResponse_Message","PieceMove_Message","CardMove_Message","generateEmptyBoard","generateFIDEBoard","generateBoardFromArmies","whiteArmy","blackArmy","_board","_history","_whiteDeck","_blackDeck","currentTurn","gameLength","whiteHand","blackHand","whiteDeck","blackDeck","whiteCurrentDeck","blackCurrentDeck","ongoingEffects","pop","undefined","rookDistance","rookSquare","undoEndOfTurnCheck","returnedCard","effectIndexesToRemove","endOfTurnCheck","checkForCardDraw","checkForUndoCardDraw","DrawCard","whiteCard","blackCard","cardMove","removalIndex","c","quantity","drawn","Number","parseInt","getCurrentTurn","getWhiteHand","getBlackHand","getCurrentPlayerHand","getChaosScore","chaosScore","getWhiteCurrentDeck","getBlackCurrentDeck","getCurrentPlayerCurrentDeck","getNonCurrentPlayerCurrentDeck","getOngoingEffects","getLastMove","dangerouslySetCurrentTurn","turn","setWhiteHand","setBlackHand","callback","_c","global","updateBoard","update","ADD_CARD_TO_HAND","targetSquare","prevSquare","adjSq","knightMoves","king","rider","final","currentCol","capture","areIdenticalMoves","first","lastMove","STALEMATE","App","useParams","rawGamesData","localStorage","getItem","thisGame","army","opponentArmy","deck","opponentDeck","opponent","opponentDecl","playerColour","worker","useLayoutEffect","_worker","Worker","Comlink","document","body","display","setTimeout","setBoard","setCurrentTurn","setMoves","winner","setWinner","gameOver","setGameOver","gameOverMsg","setGameOverMsg","Audio","play","beginBackgroundEvaluation","a","gMoves","gBoard","parsedMoves","endBackgroundEvaluation","generateRandomMove","col","moveGenerator","parsedEffects","duration","hand","parsedHand","onMessage","msgEvent","msg","whiteCaptured","setWhiteCaptured","blackCaptured","setBlackCaptured","capturePiece","prev","isGameOver","gEffects","recentMoves","slice","pawnMoves","captures","audio","allowRotation","setMoveLockout","moveLockout","setAllowRotation","unMove","cardTargetingIndex","setCardTargetingIndex","cardTargetsRemaining","setCardTargetsRemaining","cardTargets","setCardTargets","onDragEnd","endTargeting","targetsRemaining","getElementById","playedCard","sendMessage","gameUUID","v","currentTargets","canUndo","handSize","draggable","dragStartCallback","dragEndCallback","handPosition","getHandCards","message","MovesDisplay","GameOverUI","setShown","getScoreMessage","getWinnerMessage","location","reload","PlayableCard","props","cardRef","containerRef","oddHand","centreOfHandStart","ceil","centreOfHandEnd","closestPoint","currentRotation","transform","onDragStart","dataTransfer","setData","ChessSquare","rotated","moveCircle","border","labels","getLabel","ChessPiece","unTarget","onHover","onUnHover","active","onRightClick","oldPos","pieceEl","imgRef","el","verticalDiff","horizontalDiff","transition","clickHandler","button","effectAllowed","onMouseEnter","onMouseLeave","onMouseDown","onContextMenu","src","alt","toString","TargetingSquare","onDrop","isMove","isCapture","onDragOver","dropEffect","InfoBar","evaluation","materialEvaluation","t","PiecePromotionUI","above","positionFrom","positionTo","validPieces","promoting","getBodyStyle","left","max","min","top","borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius","getHead","borderRadius","getBody","ChessBoard","DEV_MODE_ENABLED","moveHandler","setTargeting","setPromotion","getPieceKey","startingPos","firstSeen","inverseMoves","found","regularMove","castle","targeting","targetingType","setTargetingType","hoveringPos","setHoveringPos","promotionFrom","pieceInfoPos","setPieceInfoPos","pieceInfoId","setPieceInfoId","showPieceInfo","infoListener","bubble","pageX","pageY","infoBubble","pieceX","pieceY","pieceHeight","pieceWidth","bubbleHeight","bubbleWidth","topMax","visualViewport","idealTop","boundedTop","leftSide","innerWidth","distMax","innerHeight","idealDist","bounded","right","deckShown","setDeckShown","showDeckOverlay","setShowDeckOverlay","getDeckQuantity","cardId","pMoves","affectedSquares","ev","getData","currentCard","currentFunction","onClickCard","onDropCard","getTargetingSquares","clickable","source","squares","hoveringSquares","legalMove","getMoveCircles","acc","cur","sort","getValidPromotionPieces","pieceFrom","pieceTo","getDeckOverlay","pieceNum","category","pieceInfoBubble","checked","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","PlayPage","armies","setArmies","decks","setDecks","games","setGames","armiesJSON","parsedArmies","values","getArmies","decksJSON","parsedDecks","getDecks","gamesJSON","parsedGames","getGames","setOpponent","setColour","setArmy","setOpponentArmy","setDeck","setOpponentDeck","getPointBuyTotal","armyPieces","next","showExistingGames","setShowExistingGames","renderExistingGame","playerArmy","opponentType","opponentReady","setOpponentReady","ready","setReady","useHistory","messageListener","_colour","_army","_deck","_opponentArmy","_opponentDeck","gameInfo","newMsg","gamesData","parsedGamesData","setItem","warn","requestLoadIntoGame","temp_gameInfo","responseLoadIntoGame","updateColor","choice","SelectionItem","item","selected","onPress","ONLINE_PLAY_TIP","toUpperCase","ARMY_TIP","d","DECK_TIP","href","loadIntoGame","onlineReady","itemToString","PlayRouter","url","useRouteMatch","path","exact","ArmiesPage","deleteArmy","armyName","prompt","newArmies","createNewArmy","key","ArmyPreview","ArmiesBuilderPage","armyID","setArmyName","setArmyPieces","changesMade","setChangesMade","alert","piecePreview","setPiecePreview","pieceDragStart","fromIndex","pieceDragEnd","clientX","clientY","newPieces","pointBuyRef","droppedInfo","indexFrom","replacementPiece","s","onMouseOver","chessSquares","getChessBoard","confirm","newName","ArmiesRouter","Homepage","popup","DecksPage","deleteDeck","deckName","deckJSON","newDecks","createNewDeck","DeckPreview","DecksBuilderPage","deckId","setDeckName","deckCards","setDeckCards","cardDragging","setCardDragging","origin","newCards","cont","DecksRouter","MainRouter","useLocation","pathname","startsWith","overflow","onconnectionstatechange","setConnectionState","setChannel","Provider","remoteChannel","newDataChannel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d2a3519.chunk.js","sourcesContent":["import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {bishopGrid} from \"../ValueGrids\";\n\nexport default class Bishop extends GamePiece {\n\n    //eval\n    public materialValue = 3;\n    public engineValue = 330;\n    public valueGrid = bishopGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Bishop.shortName;\n    public longName = Bishop.longName;\n    public static shortName = \"B\";\n    public static longName = \"Bishop\";\n\n    public movesDescription = \"Moves any number of squares diagonally.\";\n    public specialMoves = []\n    public notes = \"Is colour-bound.\";\n    public categories = [ \"Minor\", \"Bishop\", \"Colour-bound\", \"FIDE\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalRiderMoves(\n            board, position, Piece.Bishop * colour, [\n                p => Piece.getFile(p) !== 0 ? p + 7 : p, p => Piece.getFile(p) !== 0 ? p - 9 : p,\n                p => Piece.getFile(p) !== 7 ? p + 9 : p, p => Piece.getFile(p) !== 7 ? p - 7 : p,\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, tag} from \"../../types\";\nimport {getLegalRiderMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {rookGrid} from \"../ValueGrids\";\n\nexport default class Rook extends GamePiece {\n\n    //eval\n    public materialValue = 5;\n    public engineValue = 500;\n    public valueGrid = rookGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Rook.shortName;\n    public longName = Rook.longName;\n    public static shortName = \"R\";\n    public static longName = \"Rook\";\n\n    public movesDescription = \"Moves any number of squares diagonally or vertically.\";\n    public specialMoves = [\n        \"If this starts on the first or eighth file, neither pieces have moved, and this doesn't cause the king to move through check, can \\\"castle\\\" with the king.\"\n    ]\n    public notes = \"\";\n    public categories = [ \"Major\", \"Rook\", \"Castler\", \"FIDE\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalRiderMoves(\n            board, position, Piece.Rook * colour, [\n                p => Piece.getRank(p) !== 0 ? p - 8 : p, p => Piece.getFile(p) !== 0 ? p - 1 : p,\n                p => Piece.getRank(p) !== 7 ? p + 8 : p, p => Piece.getFile(p) !== 7 ? p + 1 : p,\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {queenGrid} from \"../ValueGrids\";\n\nexport default class Queen extends GamePiece {\n\n    //eval\n    public materialValue = 9;\n    public engineValue = 900;\n    public valueGrid = queenGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Queen.shortName;\n    public longName = Queen.longName;\n    public static shortName = \"Q\";\n    public static longName = \"Queen\";\n\n    public movesDescription = \"Moves any number of squares diagonally, horizontally and vertically - combining the moves of the Rook and the Bishop.\";\n    public specialMoves = []\n    public notes = \"\";\n    public categories = [ \"Major\", \"Queen\", \"FIDE\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalRiderMoves(\n            board, position, Piece.Queen * colour, [\n                p => Piece.getFile(p) !== 0 ? p + 7 : p, p => Piece.getFile(p) !== 0 ? p - 9 : p,\n                p => Piece.getFile(p) !== 7 ? p + 9 : p, p => Piece.getFile(p) !== 7 ? p - 7 : p,\n                p => Piece.getRank(p) !== 0 ? p - 8 : p, p => Piece.getFile(p) !== 0 ? p - 1 : p,\n                p => Piece.getRank(p) !== 7 ? p + 8 : p, p => Piece.getFile(p) !== 7 ? p + 1 : p,\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport {isCheck} from \"../../helpers/Checks\";\nimport Board from \"../../Classes/Board\";\nimport {kingGrid} from \"../ValueGrids\";\n\nexport default class King extends GamePiece {\n\n    //eval\n    public materialValue = 999;\n    public engineValue = 20000;\n    public valueGrid = kingGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = King.shortName;\n    public longName = King.longName;\n    public static shortName = \"K\";\n    public static longName = \"King\"\n\n    public movesDescription = \"Moves one square in any direction.\";\n    public specialMoves = [\n        \"If a Castler and this piece have not moved, and you don't pass through check to do so, you may move the king two squares towards the castler, placing the castler on the other side.\"\n    ]\n    public notes = \"Cannot move into check, and if possible must move out of check. If checkmated, you lose the game.\";\n    public categories = [ \"Major\", \"King\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number, history : ActualMove[]) => legalMove[] = ( position, board, mode, colour = 1, history ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.King * colour, [\n                p => Piece.getFile(p) !== 0 ? p + 7 : p, p => Piece.getFile(p) !== 0 ? p - 9 : p,\n                p => Piece.getFile(p) !== 7 ? p + 9 : p, p => Piece.getFile(p) !== 7 ? p - 7 : p,\n                p => Piece.getRank(p) !== 0 ? p - 8 : p, p => Piece.getFile(p) !== 0 ? p - 1 : p,\n                p => Piece.getRank(p) !== 7 ? p + 8 : p, p => Piece.getFile(p) !== 7 ? p + 1 : p,\n            ], mode\n        ) );\n\n        //We also want to allow for castling\n        const originalSquare = colour > 0 ? 4 : 60; //e1 or e8\n        const queensRook = colour > 0 ? 0 : 56; //a1 or a8\n        const kingsRook = colour > 0 ? 7 : 63; //h1 or h8\n\n        //If the king is still in his original square (AND NOT CURRENTLY IN CHECK)\n        if ( position === originalSquare ) {\n\n            //Has the king been moved at all yet?\n            let kingMoves = history.filter( move => move.moving === Piece.King * colour || move.captured === Piece.King * colour );\n\n            if ( kingMoves.length === 0 ) {\n\n                //Has the king's rook been moved at all yet?\n                if ( (board[kingsRook] === Piece.Rook * colour || board[kingsRook] === Piece.Bede * colour) && board[kingsRook -1] === Piece.None && board[kingsRook - 2] === Piece.None ) {\n\n                    let krMoves = history.filter( move => move.from === kingsRook || move.to === kingsRook );\n                    if ( krMoves.length === 0)  moves.push({\n                        from: originalSquare,\n                        to: kingsRook - 1,\n                        special: \"CASTLE\"\n                    });\n                }\n\n                //Has the queen's rook been moved at all yet?\n\n                if ( board[queensRook] === Piece.Rook * colour && board[queensRook + 1] === Piece.None && board[queensRook + 2] === Piece.None\n                    && board[queensRook + 3] === Piece.None ) {\n\n                    let qrMoves = history.filter( move => move.from === queensRook || move.to === queensRook );\n                    if ( qrMoves.length === 0)  moves.push({\n                        from: originalSquare,\n                        to: queensRook + 2,\n                        special: \"CASTLE\"\n                    });\n                }\n                //The Queen's rook has special rules for castling if the rook-piece is colourbound, such as the Bede.\n                if ( board[queensRook] === Piece.Bede * colour && board[queensRook + 1] === Piece.None && board[queensRook +2] === Piece.None\n                    && board[queensRook + 3] === Piece.None) {\n\n                    let qbMoves = history.filter( move => move.from === queensRook || move.to === queensRook );\n                    if ( qbMoves.length === 0 ) moves.push({\n                        from: originalSquare,\n                        to: queensRook + 1,\n                        special: \"CASTLE\"\n                    })\n\n                }\n\n            }\n\n\n        }\n\n\n\n        return moves;\n\n    }\n\n}","export default __webpack_public_path__ + \"static/media/pawn_white.50273cc6.svg\";","export default __webpack_public_path__ + \"static/media/pawn_black.be5d44ca.svg\";","export default __webpack_public_path__ + \"static/media/knight_white.145b8796.svg\";","export default __webpack_public_path__ + \"static/media/knight_black.d714eeb4.svg\";","export default __webpack_public_path__ + \"static/media/bishop_white.8333f40f.svg\";","export default __webpack_public_path__ + \"static/media/bishop_black.629fc057.svg\";","export default __webpack_public_path__ + \"static/media/rook_white.ba9ac487.svg\";","export default __webpack_public_path__ + \"static/media/rook_black.fd4e01f5.svg\";","export default __webpack_public_path__ + \"static/media/queen_white.7a1aecff.svg\";","export default __webpack_public_path__ + \"static/media/queen_black.cf388bf4.svg\";","export default __webpack_public_path__ + \"static/media/king_white.3f959aab.svg\";","export default __webpack_public_path__ + \"static/media/king_black.6c8cc8fa.svg\";","import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport { knightGrid } from \"../ValueGrids\";\n\nexport default class Waffle extends GamePiece {\n\n    //eval\n    public materialValue = 3;\n    public engineValue = 300;\n    public valueGrid = knightGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Waffle.shortName;\n    public longName = Waffle.longName;\n    public static shortName = \"WA\";\n    public  static longName = \"Waffle\";\n\n\n    public movesDescription = \"Can move one square horizontally/vertically, or leap two squares diagonally.\";\n    public specialMoves = []\n    public notes = \"Can leap over pieces.\";\n    public categories = [ \"Minor\", \"Knight\", \"Crusader\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Waffle * colour, [\n                //Rookwise moves\n                p => Piece.getRank(p) >= 1 ? p - 8 : p, p => Piece.getRank(p) <= 6 ? p + 8 : p,\n                p => Piece.getFile(p) >= 1 ? p - 1 : p, p => Piece.getFile(p) <= 6 ? p + 1 : p,\n                //Bishopwise moves\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) <= 5 ? p + 18 : p, //up & right\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) >= 2 ? p + 14 : p, //up & left\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) <= 5 ? p - 14 : p, //down & right\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) >= 2 ? p - 18 : p //down & left\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {rookGrid} from \"../ValueGrids\"\nimport Bishop from \"../FIDE/Bishop\";\n\nexport default class Bede extends GamePiece {\n\n    //eval\n    public materialValue = 5;\n    public engineValue = 530;\n    public valueGrid = rookGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & displaying\n    public shortName = Bede.shortName;\n    public longName = Bede.longName;\n    public static shortName = \"BD\";\n    public static longName = \"Bede\";\n\n    public movesDescription = \"Moves as a bishop, or can leap 2 squares vertically or horizontally.\";\n    public specialMoves = [\n        \"If neither pieces have moved, and this doesn't cause the king to move through check, can \\\"castle\\\" with the king.\",\n        \"As this piece is colourbound, the king can move up to three squares to keep it on its colour.\"\n    ]\n    public notes = \"\";\n    public categories = [ \"Minor\", \"Rook\", \"Crusader\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] \n    = ( position, board, mode, colour = 1 ) => {\n        \n        let moves = [] as legalMove[];\n\n        //Give it all the moves a bishop would have\n        moves.push( ...new Bishop().getLegalMoves( position, board, mode, colour ) );\n\n        //Also give the vertical leap\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Bede * colour, [\n                p => Piece.getRank(p) >= 2 ? p - 16 : p, p => Piece.getRank(p) <= 5 ? p + 16 : p,\n                p => Piece.getFile(p) >= 2 ? p - 2 : p, p => Piece.getFile(p) <= 5 ? p + 2 : p\n            ], mode\n        ) );\n\n        return moves\n   }\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {bishopGrid} from \"../ValueGrids\";\nimport Waffle from \"./Waffle\";\n\nexport default class Warbishop extends GamePiece {\n\n    //eval\n    public materialValue = 4;\n    public engineValue = 400;\n    public valueGrid = bishopGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Warbishop.shortName;\n    public longName = Warbishop.longName;\n    public static shortName = \"WB\";\n    public static longName = \"Warbishop\";\n\n    public movesDescription = \"Can leap two squares vertically or horizontally, or one or two squares diagonally.\";\n    public specialMoves = []\n    public notes = \"Is colour-bound.\";\n    public categories = [ \"Minor\", \"Bishop\", \"Colour-bound\", \"Crusader\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Warbishop * colour, [\n                //Single-move-diagonal\n                p => Piece.getRank(p) <= 6 && Piece.getFile(p) <= 6 ? p + 9 : p, //up & right\n                p => Piece.getRank(p) <= 6 && Piece.getFile(p) >= 1 ? p + 7 : p, //up & left\n                p => Piece.getRank(p) >= 1 && Piece.getFile(p) <= 6 ? p - 7 : p, //down & right\n                p => Piece.getRank(p) >= 1 && Piece.getFile(p) >= 1 ? p - 9 : p, //down & left\n                //Double-move diagonal\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) <= 5 ? p + 18 : p, //up & right\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) >= 2 ? p + 14 : p, //up & left\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) <= 5 ? p - 14 : p, //down & right\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) >= 2 ? p - 18 : p, //down & left\n                //Leaps from the bede\n                p => Piece.getRank(p) >= 2 ? p - 16 : p, p => Piece.getRank(p) <= 5 ? p + 16 : p,\n                p => Piece.getFile(p) >= 2 ? p - 2 : p, p => Piece.getFile(p) <= 5 ? p + 2 : p\n\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {queenGrid} from \"../ValueGrids\";\nimport Knight from \"../FIDE/Knight\";\nimport Bishop from \"../FIDE/Bishop\";\n\nexport default class Cardinal extends GamePiece {\n\n    //eval\n    public materialValue = 7;\n    public engineValue = 700;\n    public valueGrid = queenGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Cardinal.shortName;\n    public longName = Cardinal.longName;\n    public static shortName = \"C\";\n    public static longName = \"Cardinal\";\n\n    public movesDescription = \"Moves any number of squares diagonally, or in an L-shape - combining the moves of the Knight and the Bishop.\";\n    public specialMoves = []\n    public notes = \"\";\n    public categories = [ \"Major\", \"Queen\", \"Crusader\" ] as tag[]\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...new Knight().getLegalMoves( position, board, mode, colour ) );\n        moves.push(...new Bishop().getLegalMoves( position, board, mode, colour ))\n\n        return moves;\n\n    }\n\n}","import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, SpecialMove, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport { pawnGrid } from \"../ValueGrids\";\n\nexport default class DummyPawn extends GamePiece {\n\n    //eval\n    public materialValue = 0.5;\n    public engineValue = 25;\n    public valueGrid = pawnGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = DummyPawn.shortName;\n    public longName = DummyPawn.longName;\n    public static shortName = \"¬P\";\n    public static longName = \"Dummy Pawn\";\n\n    public movesDescription = \"Moves one square directly forward.\"\n    public specialMoves = [ ]\n    public notes = \"Cannot capture or promote\"\n    public categories = [ \"Minor\", \"Pawn\", \"Token\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number, history : ActualMove[]) => legalMove[] = ( position, board, mode, colour = 1, history ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[]\n\n        // PAWN MOVES\n        if ( mode !== \"captures\" ) {\n            if ( Piece.getRank( position ) === 1 || Piece.getRank( position ) === 6 ) moves.push(...getLegalRiderMoves(\n                board, position, Piece.Pawn * colour, [\n                    p => colour > 0 ? p + 8 : p - 8\n                ], \"moves\", 2\n            ).map( m => Math.abs( m.from - m.to ) === 16 ? { ...m, special : \"DOUBLE\" as SpecialMove } : m ))\n            else moves.push(...getLegalSingleMoves(\n                board, position, Piece.Pawn * colour, [\n                    p => colour > 0 ? p + 8 : p - 8\n                ], \"moves\"\n            ))\n        }\n\n        return moves;\n\n    }\n}\n\n\n\n","export default __webpack_public_path__ + \"static/media/bede_white.56fa5c65.svg\";","export default __webpack_public_path__ + \"static/media/bede_black.528c2b5e.svg\";","export default __webpack_public_path__ + \"static/media/waffle_white.ac9ddbc0.svg\";","export default __webpack_public_path__ + \"static/media/waffle_black.b8e5c779.svg\";","export default __webpack_public_path__ + \"static/media/warbishop_white.59df694b.svg\";","export default __webpack_public_path__ + \"static/media/warbishop_black.84a414c3.svg\";","export default __webpack_public_path__ + \"static/media/cardinal_white.abc22523.svg\";","export default __webpack_public_path__ + \"static/media/cardinal_black.b169cd4e.svg\";","export default __webpack_public_path__ + \"static/media/dummy_pawn_white.07ade20e.svg\";","export default __webpack_public_path__ + \"static/media/dummy_pawn_black.acf683a9.svg\";","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {rookGrid} from \"../ValueGrids\"\nimport Bishop from \"../FIDE/Bishop\";\n\nexport default class Champion extends GamePiece {\n\n    //eval\n    public materialValue = 4;\n    public engineValue = 400;\n    public valueGrid = rookGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & displaying\n    public shortName = Champion.shortName;\n    public longName = Champion.longName;\n    public static shortName = \"CH\";\n    public static longName = \"Champion\";\n\n    public movesDescription = \"Leaps exactly 2 squares in any direction, or makes 1 move rookwise.\";\n    public specialMoves = []\n    public notes = \"\";\n    public categories = [ \"Minor\", \"Unique\", \"Omega\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[]\n        = ( position, board, mode, colour = 1 ) => {\n\n        let moves = [] as legalMove[];\n\n\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Bede * colour, [\n                // Orthogonal Leaps\n                p => Piece.getRank(p) >= 2 ? p - 16 : p, // Down\n                p => Piece.getRank(p) <= 5 ? p + 16 : p, // Up\n                p => Piece.getFile(p) >= 2 ? p - 2 : p, // Left\n                p => Piece.getFile(p) <= 5 ? p + 2 : p, // Right\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) <= 5 ? p + 18 : p, //up & right\n                p => Piece.getRank(p) <= 5 && Piece.getFile(p) >= 2 ? p + 14 : p, //up & left\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) <= 5 ? p - 14 : p, //down & right\n                p => Piece.getRank(p) >= 2 && Piece.getFile(p) >= 2 ? p - 18 : p, //down & left\n                // Single orthogonal steps\n                p => Piece.getRank(p) >= 1 ? p - 8 : p, p => Piece.getRank(p) <= 6 ? p + 8 : p,\n                p => Piece.getFile(p) >= 1 ? p - 1 : p, p => Piece.getFile(p) <= 6 ? p + 1 : p\n            ], mode\n        ) );\n\n        return moves\n    }\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {knightGrid} from \"../ValueGrids\"\n\nexport default class Wizard extends GamePiece {\n\n    //eval\n    public materialValue = 4;\n    public engineValue = 460;\n    public valueGrid = knightGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & displaying\n    public shortName = Wizard.shortName;\n    public longName = Wizard.longName;\n    public static shortName = \"WI\";\n    public static longName = \"Wizard\";\n\n    public movesDescription = \"Leaps in an elongated knight move, three squares in one direction then one square perpendicular. Can also move one square diagonally.\";\n    public specialMoves = []\n    public notes = \"\";\n    public categories = [ \"Minor\", \"Unique\", \"Omega\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[]\n        = ( position, board, mode, colour = 1 ) => {\n\n        let moves = [] as legalMove[];\n\n\n        //Leap 2 squares in any direction\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Bede * colour, [\n                // Elongated knight moves\n                p => Piece.getFile(p) >= 3 ? p + 5 : p,p => Piece.getFile(p) <= 4 ? p - 5 : p,\n                p => Piece.getFile(p) <= 4 ? p + 11 : p, p => Piece.getFile(p) >= 3 ? p - 11 : p,\n                p => Piece.getFile(p) >= 1 ? p + 23 : p, p => Piece.getFile(p) <= 6 ? p - 23 : p,\n                p => Piece.getFile(p) <= 6 ? p + 25 : p, p => Piece.getFile(p) >= 1 ? p - 25 : p,\n                // Orthogonal Leaps\n                p => Piece.getRank(p) <= 6 && Piece.getFile(p) <= 6 ? p + 9 : p, //up & right\n                p => Piece.getRank(p) <= 6 && Piece.getFile(p) >= 1 ? p + 7 : p, //up & left\n                p => Piece.getRank(p) >= 1 && Piece.getFile(p) <= 6 ? p - 7 : p, //down & right\n                p => Piece.getRank(p) >= 1 && Piece.getFile(p) >= 1 ? p - 9 : p, //down & left\n            ], mode\n        ) );\n\n        return moves\n    }\n}","import GamePiece from \"../GamePiece\";\nimport {legalMove, Move, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport {bishopGrid} from \"../ValueGrids\"\nimport ActualMove from \"../../Classes/Move\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\n\nexport default class Jester extends GamePiece {\n\n    //eval\n    public materialValue = 3;\n    public engineValue = 350;\n    public valueGrid = bishopGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & displaying\n    public shortName = Jester.shortName;\n    public longName = Jester.longName;\n    public static shortName = \"J\";\n    public static longName = \"Jester\";\n\n    public movesDescription = \"Moves as the piece your opponent last moved.\";\n    public specialMoves = []\n    public notes = \"Ignores card-based moves. Cannot move if your opponent hasn't moved a piece yet.\";\n    public categories = [ \"Minor\", \"Unique\", \"Omega\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number, history: ActualMove[]) => legalMove[]\n        = ( position, board, mode, colour = 1, history ) => {\n\n        let moves = [] as legalMove[];\n\n\n        // We want to find the piece our opponent last moved. THIS CAN'T BE A JESTER!\n        let pieceMoves = [...history].reverse().filter( m => differentColours(m.moving, colour)).filter( m => !m.additional.hasOwnProperty(\"isCardMove\") && Math.abs(m.moving) !== Piece.Jester );\n        if (pieceMoves.length >= 1) {\n            let m = pieceMoves[0], piece = Piece.getPiece(m.moving);\n            if (piece) {\n                moves.push(...piece.getLegalMoves(position, board, mode, colour, history));\n            }\n        }\n\n        return moves\n    }\n}","export default __webpack_public_path__ + \"static/media/champion_white.a993ecde.svg\";","export default __webpack_public_path__ + \"static/media/champion_black.7801b11e.svg\";","export default __webpack_public_path__ + \"static/media/wizard_white.dd2b757b.svg\";","export default __webpack_public_path__ + \"static/media/wizard_black.5c90220e.svg\";","export default __webpack_public_path__ + \"static/media/jester_white.5a769867.svg\";","export default __webpack_public_path__ + \"static/media/jester_black.d3196538.svg\";","import Pawn from \"../Pieces/FIDE/Pawn\";\nimport Knight from \"../Pieces/FIDE/Knight\";\nimport Bishop from \"../Pieces/FIDE/Bishop\";\nimport Rook from \"../Pieces/FIDE/Rook\";\nimport Queen from \"../Pieces/FIDE/Queen\";\nimport King from \"../Pieces/FIDE/King\";\nimport GamePiece from \"../Pieces/GamePiece\";\nimport {FILES} from \"../types\";\n\n//IMPORTING PIECE IMAGES\nimport w_pawn from \"../assets/Pieces/FIDE/pawn_white.svg\";\nimport b_pawn from \"../assets/Pieces/FIDE/pawn_black.svg\";\nimport w_knight from \"../assets/Pieces/FIDE/knight_white.svg\";\nimport b_knight from \"../assets/Pieces/FIDE/knight_black.svg\";\nimport w_bishop from \"../assets/Pieces/FIDE/bishop_white.svg\";\nimport b_bishop from \"../assets/Pieces/FIDE/bishop_black.svg\";\nimport w_rook from \"../assets/Pieces/FIDE/rook_white.svg\";\nimport b_rook from \"../assets/Pieces/FIDE/rook_black.svg\";\nimport w_queen from \"../assets/Pieces/FIDE/queen_white.svg\";\nimport b_queen from \"../assets/Pieces/FIDE/queen_black.svg\";\nimport w_king from \"../assets/Pieces/FIDE/king_white.svg\";\nimport b_king from \"../assets/Pieces/FIDE/king_black.svg\";\n\n//COLOURBOUND CLOBBERERS\nimport Waffle from \"../Pieces/COLBOUND/Waffle\";\nimport Bede from \"../Pieces/COLBOUND/Bede\";\nimport Warbishop from \"../Pieces/COLBOUND/Warbishop\";\nimport Cardinal from \"../Pieces/COLBOUND/Cardinal\";\nimport DummyPawn from \"../Pieces/OTHER/DummyPawn\";\n\nimport w_bede from \"../assets/Pieces/COL/bede_white.svg\";\nimport b_bede from \"../assets/Pieces/COL/bede_black.svg\";\nimport w_waffle from \"../assets/Pieces/COL/waffle_white.svg\";\nimport b_waffle from \"../assets/Pieces/COL/waffle_black.svg\";\nimport w_warbishop from \"../assets/Pieces/COL/warbishop_white.svg\";\nimport b_warbishop from \"../assets/Pieces/COL/warbishop_black.svg\";\nimport w_cardinal from \"../assets/Pieces/COL/cardinal_white.svg\";\nimport b_cardinal from \"../assets/Pieces/COL/cardinal_black.svg\";\nimport w_dummyPawn from \"../assets/Pieces/COL/dummy_pawn_white.svg\";\nimport b_dummyPawn from \"../assets/Pieces/COL/dummy_pawn_black.svg\";\n\n// OMEGA CHESS\nimport Champion from \"../Pieces/OMEGA/Champion\";\nimport Wizard from \"../Pieces/OMEGA/Wizard\";\nimport Jester from \"../Pieces/OMEGA/Jester\";\n\nimport w_champion from \"../assets/Pieces/OMEGA/champion_white.svg\";\nimport b_champion from \"../assets/Pieces/OMEGA/champion_black.svg\";\nimport w_wizard from \"../assets/Pieces/OMEGA/wizard_white.svg\";\nimport b_wizard from \"../assets/Pieces/OMEGA/wizard_black.svg\";\nimport w_jester from \"../assets/Pieces/OMEGA/jester_white.svg\";\nimport b_jester from \"../assets/Pieces/OMEGA/jester_black.svg\";\n\n\n\nexport default class Piece {\n\n    public static PIECES = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ];\n    public static PIECE_OBJECTS = [\n        null, new Pawn(), new Knight(), new Bishop(), new Rook(), new Queen(), new King(),\n        new Waffle(), new Warbishop(), new Bede(), new Cardinal(), new DummyPawn(),\n        new Champion(), new Wizard(), new Jester()\n    ]\n\n    ///\n    /// PIECE NUMBER VALUES - negative for black!\n    ///\n    public static None = 0;\n    public static Pawn = 1;\n    public static Knight = 2;\n    public static Bishop = 3;\n    public static Rook = 4;\n    public static Queen = 5;\n    public static King = 6;\n\n    ///\n    /// COLOURBOUND CLOBBERERS VALUES\n    ///\n    public static Waffle = 7;\n    public static Warbishop = 8;\n    public static Bede = 9;\n    public static Cardinal = 10;\n    public static DummyPawn = 11; //TOKEN FOR CRUSADERS CARD\n\n    ///\n    /// OMEGA CHESS VALUES\n    ///\n    public static Champion = 12;\n    public static Wizard = 13;\n    public static Jester = 14;\n\n    public static isWhite = ( piece : number ) => piece > 0;\n    public static isBlack = ( piece : number ) => piece < 0;\n\n    public static getFile = ( position : number ) => position % 8;\n    public static getRank = ( position : number ) => ( position - ( position % 8 ) ) / 8;\n    public static getSquareName = ( position : number ) => `${ FILES[Piece.getFile(position)] }${ Piece.getRank(position) + 1 }`\n    public static getStyle = ( position : number, flipped: boolean = true ) => {\n        return {\n            gridRow: !flipped ? `${ 8 - Piece.getRank(position) }/${9 - Piece.getRank(position)}` : `${ 1 + Piece.getRank(position) }/${2 + Piece.getRank(position)}`,\n            gridColumn: !flipped ? `${ Piece.getFile(position) + 1 }/${Piece.getFile(position) + 2}` : `${ 8 - Piece.getFile(position) }/${9 - Piece.getFile(position)}`\n        }\n    }\n\n    public static getImage = ( piece : number ) => {\n        switch ( Math.abs(piece) ) {\n            case 0:\n                return \"\";\n            case Piece.Pawn:\n                return piece > 0 ? w_pawn : b_pawn;\n            case Piece.Knight:\n                return piece > 0 ? w_knight : b_knight;\n            case Piece.Bishop:\n                return piece > 0 ? w_bishop : b_bishop;\n            case Piece.Rook:\n                return piece > 0 ? w_rook : b_rook;\n            case Piece.Queen:\n                return piece > 0 ? w_queen : b_queen;\n            case Piece.King:\n                return piece > 0 ? w_king : b_king;\n            case Piece.Waffle:\n                return piece > 0 ? w_waffle : b_waffle;\n            case Piece.Warbishop:\n                return piece > 0 ? w_warbishop : b_warbishop;\n            case Piece.Bede:\n                return piece > 0 ? w_bede : b_bede;\n            case Piece.Cardinal:\n                return piece > 0 ? w_cardinal : b_cardinal;\n            case Piece.DummyPawn:\n                return piece > 0 ? w_dummyPawn : b_dummyPawn;\n            case Piece.Champion:\n                return piece > 0 ? w_champion : b_champion;\n            case Piece.Wizard:\n                return piece > 0 ? w_wizard : b_wizard;\n            case Piece.Jester:\n                return piece > 0 ? w_jester : b_jester;\n        }\n    }\n    public static getPiece : ( piece : number ) => GamePiece | null = (piece ) => Piece.PIECE_OBJECTS[ Math.abs(piece) ]\n\n}","import ActualMove from \"../Classes/Move\";\nimport Game from \"../Classes/Game\";\nimport { v4 as generateUUID } from \"uuid\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport OngoingEffect from \"../Classes/OngoingEffect\";\n\nexport default abstract class Card {\n\n    //This class will be used for storing data about cards\n    //It will never be directly instantiated, hence abstract\n\n    ///\n    /// NAMING & DISPLAYING\n    ///\n    public abstract readonly cardName: string; //e.g \"Expendable\"\n    public abstract readonly shortName: string; //e.g \"_Exp\" (Begin Card moves with a _)\n    public abstract readonly description: string; //e.g \"Summon a pawn.\"\n    public static readonly id: string;\n    public abstract readonly id: string;\n\n    public abstract readonly expac: string\n\n    ///\n    /// TARGETING & RESOLVING\n    ///\n    public abstract readonly targets: number; //the number of targets the card expects\n    public abstract readonly fast: boolean; //true/false\n    public abstract readonly cost: number; //chaos cost\n\n    ///\n    /// UNMOVING\n    ///\n    public abstract unMoveType: \"boardState\" | \"move\"; // \"boardState\" means the board state is reverted on unMove. \"move\" means the card makes a regular move.\n\n    // Returns an array of all valid target indexes\n    public abstract getValidTargets : (( board : number[], colour: number, history: ActualMove[], previousTargets?: number[], effects?: OngoingEffect[]) => number[])[]\n\n    // Resolves the playing of the card\n    public abstract playCard : ( targets: number[], game: Game ) => void;\n\n    // Tracks pieces moved by the card. Only needed for cards that move pieces in non-conventional ways (e.g swapping)\n    public trackPiece : ( square : number, targets: number[] ) => number = square => square;\n\n\n    //\n    /// TRACKING THE CARD\n    ///\n    private uuid: string = generateUUID();\n    public getUUID = () => this.uuid;\n    public getUUIDWithInfo = () => `${this.id}::${this.uuid}`\n    public regenerateUUID = () => this.uuid = generateUUID()\n\n}","\nexport const FIDE_EXPANSION = \"FIDE\";\nexport const CRUSADER_EXPANSION = \"Crusaders\"","///\n/// IS OPPOSING CAPTURE\n///\n\n//Abstracts the logic for whether or not something is a capture of an opposing piece\nconst differentColours : (piece : number, target : number ) => boolean\n    = (piece, target) => ( piece > 0 && target < 0 ) || ( piece < 0 && target > 0 );\n\n\nconst sameColour : ( piece : number, comparison : number ) => boolean\n    = (piece, comparison) => ( piece > 0 && comparison > 0 ) || ( piece < 0 && comparison < 0 )\n\nexport {\n    differentColours,\n    sameColour\n}","export const ARMY_KEY = \"myArmies\";\nexport const DECK_KEY = \"myDecks\";\nexport const GAME_KEY = \"myGames\";","///\n/// MOVES\n///\n\nimport Piece from \"../Classes/Piece\";\nimport {differentColours} from \"./DifferentColours\";\nimport {legalMove} from \"../types\";\n\nconst getLegalSingleMoves : ( board : number[], position : number, piece : number, callbacks: ((p : number) => number)[], mode : \"all\" | \"moves\" | \"captures\" ) => legalMove[]\n= ( b, pos, p, cb, m ) =>  getLegalRiderMoves( b, pos, p, cb, m, 1 )\n\nconst getLegalRiderMoves: ( board : number[], position : number, piece : number, callbacks : (( p : number ) => number)[], mode : \"all\" | \"moves\" | \"captures\", depth? : number) => legalMove[]\n    = ( board, position, piece, callbacks, mode, depth = 8 ) => {\n\n    //We take an array of callbacks to check for\n    //Start with an empty array\n    let moves = [] as legalMove[]\n\n    //For each supplied callback\n    for ( let cb of callbacks ) {\n\n        //Get the first move in the riding sequence\n        let nextSquare = cb(position);\n        let obstructed = false;\n        let iterations = 0;\n        //While the riding is unobstructed\n        while ( !obstructed && nextSquare <= 63 && nextSquare >= 0 && iterations < depth ) {\n\n            //If the square is empty\n            if ( board[nextSquare] === Piece.None ) {\n                if ( mode !== \"captures\" ) moves.push({ from : position, to : nextSquare }) //Push, unless we only want captures.\n            }\n            //If the square isn't empty\n            else {\n                //If it's an opposing piece, don't push if we're only after captures\n                if ( differentColours( piece, board[nextSquare] ) ) {\n                    if ( mode !== \"moves\" ) {\n                        moves.push({from: position, to: nextSquare})\n                    } //Push, unless we only want moves\n                    obstructed = true;\n                }\n                //If it's a friendly piece,\n                else {\n                    obstructed = true;\n                }\n            }\n            //If we haven't been obstructed yet, get the next square\n            if ( !obstructed ) {\n                if ( nextSquare === cb(nextSquare) ) obstructed = true;\n                nextSquare = cb(nextSquare);\n                iterations++;\n            }\n        }\n\n    }\n\n    return moves;\n\n}\n\nexport {\n    getLegalRiderMoves,\n    getLegalSingleMoves\n}","import {legalMove, Move, tag} from \"../types\";\nimport ActualMove from \"../Classes/Move\";\n\nexport default abstract class GamePiece {\n\n    //This class will be used for storing data about chess pieces.\n    //It will never be instantiated, but will be used\n\n    ///\n    /// EVALUATION\n    ///\n    public abstract engineValue : number; //adjusted based on engine evaluation\n    public abstract materialValue : number; //e.g 3\n    public abstract valueGrid : number[]; //A multiplier for each position\n    public abstract evaluate : ( position : number ) => number; //A function to evaluate\n\n    ///\n    /// NAMING & DISPLAYING\n    ///\n    public abstract shortName : string; //e.g \"k\"\n    public abstract longName : string; //e.g \"Pawn\"\n\n    ///\n    /// LIBRARY DESCRIPTION\n    ///\n    public abstract movesDescription : string; // e.g \"One forward.\"\n    public abstract specialMoves : string[]; // e.g \"Can move two times on first turn\n    public abstract notes : string; //Miscellaneous notes\n    public abstract categories : tag[]; //Tags assigned to this piece\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number, history : ActualMove[]) => legalMove[] =\n        ( position, board, mode, colour = 1, history ) => {\n            return board.map( ( p, square ) => {\n                if ( square !== position && p === 0) return {\n                    from : position,\n                    to : square,\n                };\n                else return null;\n            } ).filter( m => m !== null ) as legalMove[];\n\n        };\n}\n","/// THESE ARE LAID OUT AS A REGULAR CHESSBOARD\n/// THIS MEANS THAT INDEX [0] REPRESENTS SQUARE OF INDEX [63]\n/// WHEN EVALUATING WHITE PIECES, USE GRID[63 - INDEX]\n/// FOR BLACK PIECES, USE GRID[INDEX]\nexport const pawnGrid = [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    50, 50, 50, 50, 50, 50, 50, 50,\n    10, 10, 20, 30, 30, 20, 10, 10,\n    5, 5, 10, 25, 25, 10, 5, 5,\n    0, 0, 0, 20, 20, 0, 0, 0,\n    5, -5, -10, 0, 0, -10, -5, 5,\n    5, 10, 10, -20, -20, 10, 10, 5,\n    0, 0, 0, 0, 0, 0, 0, 0\n]\nexport const knightGrid = [\n    -50, -40, -30, -30, -30, -30, -40, -50,\n    -40, -20, 0, 0, 0, 0, -20, -40,\n    -30, 0, 10, 15, 15, 10, 0, -30,\n    -30, 5, 15, 20, 20, 15, 5, -30,\n    -30, 0, 15, 20, 20, 15, 0, -30,\n    -30, 5, 10, 15, 15, 10, 5, -30,\n    -40, -20, 0, 5, 5, 0, -20, -40,\n    -50, -40, -30, -30, -30, -30, -40, -50,\n]\nexport const bishopGrid = [\n    -20, -10, -10, -10, -10, -10, -10, -20,\n    -10, 0, 0, 0, 0, 0, 0, -10,\n    -10, 0, 5, 10, 10, 5, 0, -10,\n    -10, 5, 5, 10, 10, 5, 5, -10,\n    -10, 0, 10, 10, 10, 10, 0, -10,\n    -10, 10, 10, 10, 10, 10, 10, -10,\n    -10, 5, 0, 0, 0, 0, 5, -10,\n    -20, -10, -10, -10, -10, -10, -10, -20,\n]\nexport const rookGrid = [\n    0, 0, 0, 0, 0, 0, 0, 0,\n    5, 10, 10, 10, 10, 10, 10, 5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    -5, 0, 0, 0, 0, 0, 0, -5,\n    0, 0, 5, 5, 5, 5, 0, 0\n]\nexport const queenGrid = [\n    -20, -10, -10, -5, -5, -10, -10, -20,\n    -10, 0, 0, 0, 0, 0, 0, -10,\n    -10, 0, 5, 5, 5, 5, 0, -10,\n    -5, 0, 5, 5, 5, 5, 0, -5,\n    0, 0, 5, 5, 5, 5, 0, -5,\n    -10, 5, 5, 5, 5, 5, 0, -10,\n    -10, 0, 5, 0, 0, 0, 0, -10,\n    -20, -10, -10, -5, -5, -10, -10, -20\n]\nexport const kingGrid =  [\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -30, -40, -40, -50, -50, -40, -40, -30,\n    -20, -30, -30, -40, -40, -30, -30, -20,\n    -10, -20, -20, -20, -20, -20, -20, -10,\n    20, 20, 0, 0, 0, 0, 20, 20,\n    20, 30, 10, 0, 0, 10, 30, 20\n]","import Card from \"./Card\";\nimport Expendable_Card from \"./FIDE/Expendable_Card\";\nimport Advance_Card from \"./FIDE/Advance_Card\";\nimport TacticalRetreat_Card from \"./FIDE/TacticalRetreat_Card\";\nimport Reposition_Card from \"./FIDE/Reposition_Card\";\nimport Mount_Card from \"./FIDE/Mount_Card\";\nimport Demote_Card from \"./FIDE/Demote_Card\";\nimport Maneuver_Card from \"./FIDE/Maneuver_Card\";\nimport Flee_Card from \"./FIDE/Flee_Card\";\nimport Promotion_Card from \"./FIDE/Promotion_Card\";\nimport BattlePlan_Card from \"./FIDE/BattlePlan_Card\";\nimport Adjust_Card from \"./CRUSADERS/Adjust_Card\";\nimport Inquisition_Card from \"./CRUSADERS/Inquisition_Card\";\nimport Anoint_Card from \"./CRUSADERS/Anoint_Card\";\nimport Deception_Card from \"./CRUSADERS/Deception_Card\";\nimport Clergy_Card from \"./CRUSADERS/Clergy_Card\";\nimport Convert_Card from \"./CRUSADERS/Convert_Card\";\nimport Envoy_Card from \"./CRUSADERS/Envoy_Card\";\nimport Hallow_Card from \"./CRUSADERS/Hallow_Card\";\nimport Repent_Card from \"./CRUSADERS/Repent_Card\";\nimport Oust_Card from \"./CRUSADERS/Oust_Card\";\nimport Test_Card from \"./Test_Card\";\n\nconst ALL_CARDS : { [ cardId : string ] : Card } = {\n    [Advance_Card.id]: new Advance_Card(),\n    [Expendable_Card.id]: new Expendable_Card(),\n    [TacticalRetreat_Card.id]: new TacticalRetreat_Card(),\n    [Reposition_Card.id]: new Reposition_Card(),\n    [Mount_Card.id]: new Mount_Card(),\n    [Demote_Card.id]: new Demote_Card(),\n    [BattlePlan_Card.id]: new BattlePlan_Card(),\n    [Maneuver_Card.id]: new Maneuver_Card(),\n    [Flee_Card.id]: new Flee_Card(),\n    [Promotion_Card.id]: new Promotion_Card(),\n    [Adjust_Card.id]: new Adjust_Card(),\n    [Inquisition_Card.id]: new Inquisition_Card(),\n    [Hallow_Card.id]: new Hallow_Card(),\n    [Repent_Card.id]: new Repent_Card(),\n    [Oust_Card.id]: new Oust_Card(),\n    [Envoy_Card.id]: new Envoy_Card(),\n    [Anoint_Card.id]: new Anoint_Card(),\n    [Deception_Card.id]: new Deception_Card(),\n    [Clergy_Card.id]: new Clergy_Card(),\n    [Convert_Card.id]: new Convert_Card()\n};\n\nexport const TEST_HAND = [\n    new Oust_Card()\n]\n\nexport default ALL_CARDS;","import React, {ReactChild} from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"./NiceButton.css\"\n\ninterface NiceButtonProps {\n    onClick: string | ( () => void ),\n    text: string,\n    buttonStyle?: \"small\" | \"medium\" | \"large\",\n    disabled?: boolean,\n    highlight?: boolean\n}\n\nexport default function NiceButton({ onClick, text, buttonStyle = \"small\", disabled = false, highlight = false }:NiceButtonProps) {\n\n    const wrapper = (reactChild:ReactChild) => typeof onClick === \"function\" ?\n\n        <div className={`niceButtonOuter ${buttonStyle}`} onClick={() => !disabled ? onClick() : null }>\n            { reactChild }\n        </div>\n\n        :\n\n        <Link to={onClick}>\n            <div className={`niceButtonOuter ${buttonStyle}`}>\n                {reactChild}\n            </div>\n        </Link>\n\n\n\n    return wrapper( <>\n\n            <div className={`niceButtonBackground ${buttonStyle}`}/>\n\n            <div className={`niceButtonForeground ${buttonStyle} ${ disabled ? \"disabled\" : \"\" } ${highlight ? \"highlight\":\"\"}`}>\n                <p>{ text }</p>\n            </div>\n\n\n        </> )\n\n}","import {FILES, Move, SpecialMove} from \"../types\";\nimport Piece from \"./Piece\";\nimport GamePiece from \"../Pieces/GamePiece\";\nimport Pawn from \"../Pieces/FIDE/Pawn\";\nimport {AdditionalOptions} from \"./Game\";\n\nexport default class ActualMove {\n\n    public readonly from : number;\n    public readonly to : number;\n    public readonly moving : number;\n    public readonly captured : number;\n    public readonly specify : number;\n\n    public readonly special : SpecialMove | undefined\n    public readonly additional: Partial<AdditionalOptions>\n\n    public static NONE = 0;\n    public static RANK = 1;\n    public static FILE = 2;\n    public static BOTH = 3;\n\n    public getMoveName : () => string = () => {\n        //If there was no capture\n        if ( Piece.getPiece(this.moving) === null ) {\n            if (this.additional.isCardMove && this.special === \"PROMOTION\" && this.additional.promotionTo) {\n                return `${FILES[Piece.getFile(this.to)] + Piece.getRank(this.to)}+${Piece.getPiece(this.additional.promotionTo)?.shortName}`\n            }\n            return \"ERR\";\n        }\n        let mPiece = Piece.getPiece(this.moving) as GamePiece;\n\n        //Getting strings\n        let pieceName = mPiece.shortName === Pawn.shortName ? \"\" : mPiece.shortName;\n        let captureText = this.captured === Piece.None ? \"\" : \"x\";\n        let destination = Piece.getSquareName( this.to );\n        let specification = \"\";\n\n        if ( this.specify === ActualMove.FILE || this.specify === ActualMove.BOTH ) {\n            specification += FILES[Piece.getFile( this.from )];\n        }\n        if ( this.specify === ActualMove.RANK || this.specify === ActualMove.BOTH ) {\n            specification += Piece.getRank( this.from );\n        }\n\n        let promotionTo = this.additional && this.additional.promotionTo ? `=${Piece.getPiece(this.additional.promotionTo)?.shortName}` : \"\";\n\n        return `${ pieceName }${ specification }${ captureText }${ destination }${ promotionTo }`\n    }\n\n    constructor( _from : number, _to : number, _moving : number, _captured : number, _specify : number = ActualMove.NONE, _special?: SpecialMove, _additional: Partial<AdditionalOptions> = {}) {\n\n        this.from = _from;\n        this.to = _to;\n        this.moving = _moving;\n        this.captured = _captured;\n        this.specify = _specify;\n        this.special = _special;\n        this.additional = _additional;\n\n    }\n\n}","import CardMove from \"../Classes/CardMove\";\nimport ActualMove from \"../Classes/Move\";\n\nconst getActualMoves = (moves : (ActualMove | CardMove)[] ) => moves.filter(m => m instanceof ActualMove ) as ActualMove[];\n\nconst getCardMoves = (moves: ( ActualMove | CardMove )[] ) => moves.filter(m => m instanceof CardMove ) as CardMove[];\n\nexport {\n    getActualMoves,\n    getCardMoves\n}","import Piece from \"../Classes/Piece\";\n\nconst adjacentSquares = ( i: number, corners: boolean = true ) => {\n    let adj = [] as number[];\n    let r = Piece.getRank(i), f = Piece.getFile(i);\n    if (r <= 6 ) {\n        adj.push(i + 8); /// ABOVE\n        if (corners) {\n            if (f >= 1) adj.push(i+7) //ABOVE-LEFT\n            if (f <= 6) adj.push(i+9) //ABOVE-RIGHT\n        }\n    }\n    if (r >= 1 ) { ///\n        adj.push(i - 8); /// BELOW\n        if (corners) {\n            if (f >= 1) adj.push(i-9) //BELOW-LEFT\n            if (f <= 6) adj.push(i-7) //BELOW-RIGHT\n        }\n    }\n    if (f >= 1) adj.push(i-1) //LEFT\n    if (f <= 6) adj.push(i+1);\n\n    return adj\n}\n\nexport {\n    adjacentSquares\n}","///\n/// CHECKS\n///\n\nimport Piece from \"../Classes/Piece\";\nimport {legalMove, Move} from \"../types\";\nimport ActualMove from \"../Classes/Move\";\nimport Board from \"../Classes/Board\";\nimport Game from \"../Classes/Game\";\nimport OngoingEffect from \"../Classes/OngoingEffect\";\nimport {sameColour} from \"./DifferentColours\";\nimport CardMove from \"../Classes/CardMove\";\nimport ALL_CARDS from \"../Cards/Cards\";\nimport {getActualMoves} from \"./MoveFilter\";\n\n///\n/// IS THIS COLOUR'S KING IN CHECK?\nconst isCheck : ( board:number[], history:ActualMove[], colour: number, legalMoves?: legalMove[] ) => boolean = ( board, history, colour, legalMoves ) => {\n\n    //Determine the king's square\n\n    let wKing = board.indexOf( Piece.King );\n    let bKing = board.indexOf( -Piece.King );\n\n    if ( wKing === -1 || bKing === -1) return false;\n\n    let pos = colour > 0 ? wKing : bKing;\n\n    if (!legalMoves) legalMoves = Board.getLegalMoves(\n        board, history, { mode: \"captures\", colour: -colour } )\n\n    //Are there any attacks on the king?\n    return legalMoves.filter( move => move.to === pos ).length > 0;\n\n}\n\nconst filterCardMoves : ( g:Game, id:string, targets:number[], colour:number)=>boolean = ( g, id, targets, colour) => {\n\n    let _g = new Game( g.getBoard(), getActualMoves(g.getMoves()), g.getWhiteDeck(), g.getBlackDeck() )\n    g.getCurrentOngoingEffects().forEach(\n        e => _g.addOngoingEffect( new OngoingEffect( e.getSquare(), e.getName(), e.getDurationRemaining(), \"\", e.getTarget() ) )\n    )\n\n    let stillInCheck = false;\n    let card = ALL_CARDS[id];\n    if (targets.length === card.targets) {\n        //WE HAVE ENOUGH TARGETS ALREADY\n        _g.PlayCard( ALL_CARDS[id], targets );\n        stillInCheck = isCheck( _g.getBoard(), getActualMoves(_g.getMoves()), colour );\n        _g.UnMove();\n    }\n    else {\n        //SEE IF THERE ARE ANY LEGAL TARGETS FOR THE SUBSEQUENT MOVE\n        let subsequentPossibleTargets = card.getValidTargets[0]( _g.getBoard(), colour, getActualMoves(_g.getMoves()), targets, _g.getCurrentOngoingEffects() );\n        let arePossibleMoves = subsequentPossibleTargets.reduce(( validTargets, current ) => {\n            return filterCardMoves( _g, id, [ ...targets, current ], colour ) || validTargets;\n        }, false)\n        stillInCheck = !arePossibleMoves\n    }\n    return !stillInCheck\n}\n\nconst filterLegalMoves : ( moves: legalMove[], board : number[], history:ActualMove[], colour : number, effects : OngoingEffect[] ) => legalMove[]\n    = ( moves, board, history, colour, effects ) => {\n\n    let game = new Game( board , history );\n    effects.forEach( effect => game.addOngoingEffect( new OngoingEffect( effect.getSquare(), effect.getName(), effect.getDurationRemaining(), effect.getToolTip(), effect.getTarget() ) ) );\n\n    let filtered = moves.filter( move => {\n\n        //ONGOING EFFECTS\n\n        // HALLOW SPELL\n        if ( effects.filter(e => e.getName() === \"no-captures\").filter( e => e.getSquare() === move.from && board[move.to] !== Piece.None ).length > 0 ) return false //trying to capture (cannot capture)\n        if ( effects.filter( e => e.getName() === \"no-captures\" ).filter( e => e.getSquare() === move.to && board[move.to] !== Piece.None ).length > 0 ) return false //is being captured (cannot be captured)\n\n        // REPENT SPELL\n        if ( effects.filter(e => e.getName() === \"no-moves\").filter( e => e.getSquare() === move.from ).length > 0 ) return false //trying to move (cannot move)\n\n        // OUST SPELL\n        let oustEffects = effects.filter(e => e.getName() === \"must-move\").filter( e => e.getSquare() !== move.from && sameColour( colour, board[e.getSquare()] ) )\n        if ( oustEffects.length > 0 ) {\n\n            //MAKE SURE THE PIECE CAN MAKE A LEGAL MOVE!\n            let piece = board[oustEffects[0].getSquare()];\n            let pieceObj = Piece.getPiece(piece);\n            if (pieceObj) {\n                let pieceMoves = pieceObj.getLegalMoves( oustEffects[0].getSquare(), board, \"all\", colour, history );\n                //WE WANT TO PREVENT A SCENARIO WHERE THE KING IS CHECKED USING THIS CARD\n                let pieceCanMove = pieceMoves.reduce(( validMoveExists, m ) => {\n                    if (validMoveExists) return true;\n                    game.Move( m.from, m.to, m.special );\n                    let stillInCheck = isCheck( game.getBoard(), game.getMoves().filter( mv => mv instanceof ActualMove ) as ActualMove[], colour );\n                    game.UnMove();\n                    return !stillInCheck || validMoveExists\n                }, false)\n                if (pieceCanMove) return false;\n            }\n        }\n\n        //THERE ARE SOME SPECIAL RULES FOR SPECIAL MOVES\n        if ( move.special === \"CASTLE\") {\n            if ( isCheck( game.getBoard(), history, colour ) ) return false; //Cannot castle out of check\n            let kingsRook = colour > 0 ? 7 : 63;\n            let queensRook = colour > 0 ? 0 : 56;\n            if ( move.to === kingsRook - 1 && Board.isThreatened( kingsRook - 2, game.getBoard(), history, -colour )) return false;\n            if ( move.to === queensRook + 2 && Board.isThreatened( queensRook + 3, game.getBoard(), history, -colour ) ) return false;\n        }\n\n        //First, let's make the move.\n        game.Move( move.from, move.to, move.special );\n        //Now, let's see if there is a check.\n        let stillInCheck = isCheck( game.getBoard(), game.getMoves().filter( m => m instanceof ActualMove ) as ActualMove[], colour );\n        //Then, we unmake the move.\n        game.UnMove();\n        return !stillInCheck;\n    } )\n\n    return filtered\n\n}\n\nexport {\n    isCheck,\n    filterLegalMoves,\n    filterCardMoves\n}\n\n","import Piece from \"../Classes/Piece\";\nimport GamePiece from \"../Pieces/GamePiece\";\n\nexport class Army {\n\n    pieces: number[]\n\n    name: string\n\n    constructor( _pieces: number[], _name: string ) {\n        this.pieces = _pieces;\n        this.name = _name;\n    }\n\n}\n\nexport const FIDEARMY = new Army([\n    Piece.Rook,\n    Piece.Knight,\n    Piece.Bishop,\n    Piece.Queen,\n    Piece.King,\n    Piece.Bishop,\n    Piece.Knight,\n    Piece.Rook\n], \"FIDE Army\");\n\nexport const CRUSADERSARMY = new Army([\n    Piece.Bede,\n    Piece.Waffle,\n    Piece.Warbishop,\n    Piece.Cardinal,\n    Piece.King,\n    Piece.Warbishop,\n    Piece.Waffle,\n    Piece.Bede\n], \"Colourbound Crusaders\")\n\nexport const DEV_ARMY = new Army([\n    Piece.Wizard,\n    Piece.Jester,\n    Piece.Champion,\n    Piece.Queen,\n    Piece.King,\n    Piece.Champion,\n    Piece.Jester,\n    Piece.Wizard\n], \"dev-army\")","import Expendable_Card from \"../Cards/FIDE/Expendable_Card\";\nimport Advance_Card from \"../Cards/FIDE/Advance_Card\";\nimport TacticalRetreat_Card from \"../Cards/FIDE/TacticalRetreat_Card\";\nimport Reposition_Card from \"../Cards/FIDE/Reposition_Card\";\nimport Mount_Card from \"../Cards/FIDE/Mount_Card\";\nimport Demote_Card from \"../Cards/FIDE/Demote_Card\";\nimport Maneuver_Card from \"../Cards/FIDE/Maneuver_Card\";\nimport Flee_Card from \"../Cards/FIDE/Flee_Card\";\nimport Promotion_Card from \"../Cards/FIDE/Promotion_Card\";\nimport Adjust_Card from \"../Cards/CRUSADERS/Adjust_Card\";\nimport Inquisition_Card from \"../Cards/CRUSADERS/Inquisition_Card\";\nimport Hallow_Card from \"../Cards/CRUSADERS/Hallow_Card\";\nimport Repent_Card from \"../Cards/CRUSADERS/Repent_Card\";\nimport Oust_Card from \"../Cards/CRUSADERS/Oust_Card\";\nimport Envoy_Card from \"../Cards/CRUSADERS/Envoy_Card\";\nimport Anoint_Card from \"../Cards/CRUSADERS/Anoint_Card\";\nimport Deception_Card from \"../Cards/CRUSADERS/Deception_Card\";\nimport Clergy_Card from \"../Cards/CRUSADERS/Clergy_Card\";\nimport Convert_Card from \"../Cards/CRUSADERS/Convert_Card\";\nimport BattlePlan_Card from \"../Cards/FIDE/BattlePlan_Card\";\n\nexport class Deck {\n\n    cards: string[]\n\n    name: string\n\n    constructor( _cards:string[], _name:string ) {\n        this.cards = _cards;\n        this.name = _name;\n    }\n\n}\n\nexport const FIDEDECK = new Deck([\n    Advance_Card.id,\n    Advance_Card.id,\n    Expendable_Card.id,\n    Expendable_Card.id,\n    TacticalRetreat_Card.id,\n    TacticalRetreat_Card.id,\n    Reposition_Card.id,\n    Reposition_Card.id,\n    Mount_Card.id,\n    Mount_Card.id,\n    Demote_Card.id,\n    BattlePlan_Card.id,\n    Maneuver_Card.id,\n    Flee_Card.id,\n    Promotion_Card.id\n], \"FIDE Deck\");\n\nexport const CRUSADERSDECK = new Deck([\n    Adjust_Card.id,\n    Adjust_Card.id,\n    Inquisition_Card.id,\n    Inquisition_Card.id,\n    Hallow_Card.id,\n    Hallow_Card.id,\n    Repent_Card.id,\n    Repent_Card.id,\n    Oust_Card.id,\n    Oust_Card.id,\n    Envoy_Card.id,\n    Anoint_Card.id,\n    Deception_Card.id,\n    Clergy_Card.id,\n    Convert_Card.id\n], \"Colourbound Crusaders Deck\");\n\nexport const DEV_DECK = new Deck([\n    Reposition_Card.id,\n    Reposition_Card.id,\n    Deception_Card.id,\n    Deception_Card.id,\n], \"FIDE Deck\");","import React from 'react';\nimport \"./TextCopy.css\";\n\ntype Props = {\n    text: string\n}\n\nexport default function TextCopy({text}:Props) {\n\n    const onClick = (e:React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        navigator.clipboard.writeText(text);\n    }\n\n    return <div title=\"Click to Copy\" className=\"textCopy\" onClick={e => onClick(e)}>\n        <div className=\"scrollContainer\">\n            {text}\n        </div>\n        <div className=\"icon\">\n            <span className=\"material-symbols-outlined\">\n                content_copy\n            </span>\n            <div className=\"background\"/>\n        </div>\n    </div>\n\n}","import React, {\n    ChangeEvent,\n    ChangeEventHandler,\n    Ref,\n    useContext,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState\n} from 'react';\nimport \"./ConnectionWizzard.css\";\nimport ConnectionContext from \"../../Context/ConnectionContext\";\nimport NiceButton from \"../NiceButton/NiceButton\";\nimport {decodeOffer, encodeOffer} from \"../../helpers/Encoding\";\nimport TextCopy from \"../TextCopy/TextCopy\";\nimport TextInput from \"../TextInput/TextInput\";\n\ntype WizardProps = {\n    shown: boolean,\n    popupRef: Ref<HTMLDivElement> | undefined\n}\n\nenum initiator  { none = 0, local = 1, remote = 2 };\n\nexport default function ConnectionWizard({ shown, popupRef }: WizardProps) {\n\n    const { Conn, Channel, setListener, initChannel} = useContext(ConnectionContext);\n\n    // whether or not the current user is the initiator.\n    const [ connInitiator, setInitiator ] = useState<initiator>(initiator.none);\n\n    const [ localOffer, setLocalOffer ] = useState<string>();\n\n    const [ remoteOffer, setRemoteOffer ] = useState<string>(\"\");\n    const handleRemoteOfferChange = ( event: ChangeEvent<HTMLInputElement>) => {\n        setRemoteOffer(event.target.value);\n    }\n\n    // The currently received ice offers\n    const iceCandidates = useRef<RTCIceCandidate[]>([]);\n\n    useEffect(() => {\n        //Adding necessary ICE listeners!\n        Conn.addEventListener('icecandidate', event => {\n            if (event.candidate) {\n                console.log(\"Found ICE candidate \\n\", event.candidate);\n                iceCandidates.current.push(event.candidate)\n            }\n        })\n\n        Conn.addEventListener('icegatheringstatechange', e => {\n            console.log(\"ice gathering state change: \\n\", Conn.iceGatheringState)\n        });\n\n        Conn.addEventListener('connectionstatechange', e => {\n            console.log(\"Connection state change: \", Conn.connectionState)\n        });\n\n        (window as any).DEV_SEND_MSG = (data : String) => {\n            // @ts-ignore\n            Channel.send(data)\n            console.log('sent message ', data)\n        }\n\n    }, [Channel, Conn])\n\n    const errHandler = (e:Error) => console.log(e);\n\n    const offerHandler = ( creating : boolean ) => {\n        setInitiator( creating ? initiator.local : initiator.remote )\n        // CREATE THE ACTUAL OFFER\n        Conn.onicecandidate = e => {\n            if ( !e.candidate ) {\n                console.log('iceGatheringState complete\\n', Conn.localDescription?.sdp);\n                let offer =  JSON.stringify(Conn.localDescription);\n                let candidates = JSON.stringify(iceCandidates.current);\n                console.log(\"Candidates: \\n\", candidates);\n                setLocalOffer( encodeOffer(offer, candidates) );\n            }\n            else console.log(e.candidate.candidate);\n        }\n\n        // If we're initiating the connection, generate the offer\n        if (creating) {\n            initChannel() // Create a data channel before generating the offer\n            Conn.createOffer().then(description => {\n                console.log('createOffer ok');\n                Conn.setLocalDescription(description).then(() => {\n                    //initChannel()\n                    //We actually generate the offer when the ice candidates are connected\n                })\n            })\n        }\n\n        Conn.ondatachannel = e => {\n            console.group(`Received Channel: ${e.channel.id}`)\n            console.log(`Currently channel ${Channel?.id}: \\n`, Channel)\n            initChannel(e.channel)\n            console.groupEnd()\n\n        }\n    }\n\n    const attemptConnection = () => {\n        // Want to generate an answer\n        let [decodedRemoteOffer, decodedIceCandidates] = decodeOffer(remoteOffer);\n        let remoteDescription = JSON.parse(decodedRemoteOffer);\n        let _remoteOffer = new RTCSessionDescription(remoteDescription);\n        let remoteIceCandidates = JSON.parse(decodedIceCandidates)\n        console.log('Received offer from remote: \\n', _remoteOffer);\n        console.log(\"Received ice candidates: \\n\", decodedIceCandidates)\n\n        //Received the offer - now set the remote description, and generate an answer\n        Conn.setRemoteDescription(_remoteOffer).then(() => {\n            console.log(\"Set the remote description\")\n            if (_remoteOffer.type === \"offer\") {\n                Conn.createAnswer().then( answer => {\n                    console.log('createAnswer ok \\n', answer);\n                    Conn.setLocalDescription(answer).then(() => {})\n                } ).catch(errHandler)\n            }\n        }).catch(errHandler)\n        //Now, we want to set the connection ice candidates\n        console.log(remoteIceCandidates)\n        try {\n            (remoteIceCandidates as RTCIceCandidate[]).forEach(candidate => {\n                    Conn.addIceCandidate(candidate).then(() => {console.log(\"Adding ice candidate: \\n\", candidate)} )\n                }\n            )\n        }\n        catch (e) { console.log(\"Failed to assign ice candidates \\n\", e) }\n\n    }\n\n\n    return <div className={ shown ? \"shown\" : \"hidden\" } id=\"ConnectingPopup\">\n        <div id=\"PopupBackground\"/>\n            <div id=\"ConnectionPopupBubble\" ref={popupRef}>\n                <h1>{Conn.connectionState}</h1>\n                <div className=\"section\">\n                     <p>In order to play online, you have to connect directly to another server. This can be done by creating an offer.</p>\n                      <p>Either player can create the first offer.</p>\n                    <div className=\"row\">\n                        <NiceButton disabled={connInitiator !== initiator.none} highlight={connInitiator === initiator.local}\n                                    onClick={() => offerHandler(true)} text=\"Create an Offer\"/>\n                        <NiceButton disabled={connInitiator !== initiator.none} highlight={connInitiator === initiator.remote}\n                                    onClick={() => offerHandler(false)} text=\"Recieve an Offer\"/>\n                    </div>\n                </div>\n                {/*  THE FOLLOWING SECTION IS SHOWN WHEN A LOCAL OFFER IS MADE FIRST  */}\n                {\n                    connInitiator !== initiator.local ? null :\n                    <div className=\"section\">\n                        <label>Your Offer</label>\n                        <TextCopy text={localOffer||\"ERROR - view browser console\"}/>\n                        <p>\n                            Copy this string, and send it to your opponent. Ask them to send theirs back, and enter it into the field below!\n                        </p>\n                        <label>Remote Offer</label>\n                        <TextInput text={remoteOffer} onChange={e => handleRemoteOfferChange(e)}/>\n                        <NiceButton disabled={ remoteOffer === \"\" } onClick={ () => attemptConnection() } text=\"Connect!\"/>\n                    </div>\n                }\n                {/*  SHOWN IN AN ALTERNATE ORDER IF OFFER MADE THE OTHER WAY AROUND  */}\n                {\n                    connInitiator !== initiator.remote ? null :\n                        <div className=\"section\">\n                            <label>Remote Offer</label>\n                            <TextInput text={remoteOffer} onChange={e => handleRemoteOfferChange(e)}/>\n                            <p>\n                                Enter the description you've been given, then send your opponent yours!\n                            </p>\n                            <label>Your Offer</label>\n                            <TextCopy text={localOffer||\"ERROR - view browser console\"}/>\n                            <NiceButton disabled={ remoteOffer === \"\" } onClick={ () => attemptConnection() } text=\"Generate Answer\"/>\n                        </div>\n                }\n            </div>\n        </div>\n\n}","import React from 'react';\nimport \"./TextInput.css\";\n\ntype Props = {\n    text: string,\n    onChange: ( e : React.ChangeEvent<HTMLInputElement> ) => void\n}\n\nexport default function TextInput({text, onChange}:Props) {\n\n    return <div className=\"textInput\">\n        <div className=\"scrollContainer\">\n            <input type=\"text\" value={text} onChange={e => onChange(e)}/>\n        </div>\n    </div>\n\n}","const encodeOffer = ( offer : string, iceCandidates : string ) => {\n    return btoa( encodeURIComponent( offer ) + '|' + encodeURIComponent(iceCandidates) );\n}\n\nconst decodeOffer = ( encryptedOfferAndCandidates : string ) => {\n    let uriComponents = atob(encryptedOfferAndCandidates).split('|')\n    return uriComponents.map(uri => decodeURIComponent(uri));\n}\n\nexport {\n    encodeOffer,\n    decodeOffer\n}","import React, {useContext, useRef, useState} from \"react\";\nimport NiceButton from \"../NiceButton/NiceButton\";\nimport \"./NavBar.css\";\nimport ConnectionContext from \"../../Context/ConnectionContext\";\nimport ConnectionWizard from \"../ConnectionWizard/ConnectionWizard\";\n\ninterface props {\n    fixed?: boolean\n}\n\nexport default function NavBar({fixed = true}: props) {\n\n    const {Conn} = useContext(ConnectionContext);\n    const connectionState = () => {\n        switch (Conn.connectionState) {\n            case \"new\":\n            case \"closed\":\n                return \"not connected\";\n                break;\n            default:\n                return Conn.connectionState;\n        }\n    };\n\n    const popupRef = useRef<HTMLDivElement>(null);\n    // Returns true while the \"Connecting\" popup is open.\n    const [Connecting, attemptConnect] = useState(false);\n\n    const openConnectionPopup = ( e:React.MouseEvent<HTMLDivElement, MouseEvent> ) => {\n        // Prevents the listener from being fired immediately\n        e.preventDefault();\n        e.stopPropagation();\n        attemptConnect(true); // Show Popup\n        //Define click listener function to close the popup\n        function clickListener( e: MouseEvent ) {\n            if (popupRef.current) {\n                let { x, y, height, width } = popupRef.current?.getBoundingClientRect()\n                if ( x < e.x && e.x < x + width && y < e.y  && e.y < y + height ) return; //Within the popup\n                attemptConnect(false); //Close the popup\n                window.removeEventListener(\"click\", clickListener); //Remove this event listener\n            }\n        }\n        //Add the listener so the popup closes whenever anything other than the bubble is being clicked on.\n        window.addEventListener(\"click\", clickListener);\n    }\n\n    return <> <div id=\"NavBar\" style={ fixed ? {} : { position: \"absolute\" } }>\n        <h3 className=\"navBarHeader\">Epic Fantasy Chess</h3>\n        <NiceButton onClick=\"/\" text=\"HOME\" buttonStyle=\"small\"/>\n        <NiceButton onClick=\"/play\" text=\"PLAY\" buttonStyle=\"small\"/>\n        <NiceButton onClick=\"/armies\" text=\"ARMIES\" buttonStyle=\"small\"/>\n        <NiceButton onClick=\"/decks\" text=\"DECKS\" buttonStyle=\"small\"/>\n        <div id=\"ConnectionManager\" onClick={ e => openConnectionPopup(e)}>\n            {connectionState()}\n        </div>\n    </div>\n\n        <ConnectionWizard shown={Connecting} popupRef={popupRef} />\n\n    </>\n\n}","const randomFromList = <T>( list : T[] ) => list[Math.floor((Math.random()*list.length))]\n\nconst arraysAreEqual = <T>( a : T[], b : T[] ) => {\n    return a.map(( el, index ) => el === b[index]).reduce(( acc, next ) => acc && next, true);\n}\n\n\nexport {\n    randomFromList,\n    arraysAreEqual\n}","import React from \"react\";\n\nconst RTC_CONFIG = { iceServers: [{\"urls\":\"stun:stun.l.google.com:19302\"}] };\n\ntype ConnectContext = {\n    Conn: RTCPeerConnection,\n    Channel : RTCDataChannel|null,\n    initChannel: (channel?: RTCDataChannel) => void,\n    setListener : ( listener: (e:MessageEvent) => void ) => void\n}\n\n\nconst Conn = new RTCPeerConnection(RTC_CONFIG);\nlet Channel : RTCDataChannel | null  = Conn.createDataChannel('dataChannel');\nChannel.onopen = () => {\n    console.log('data channel opened!')\n}\nChannel.onclose = () => {\n    console.log('data channel closed!');\n}\nconst initChannel = () => {}\nconst setListener = ( listener: (e:MessageEvent) => void ) => {\n    if (Channel) Channel.onmessage = listener;\n    else console.log(\"Tried to attach listener but no data channel exists.\")\n}\n\nconst ConnectionContext = React.createContext<ConnectContext>({\n        Conn,\n        Channel,\n        initChannel,\n        setListener\n    }\n)\n\nexport default ConnectionContext;\n\nexport {\n    RTC_CONFIG\n}","\n\nexport default class OngoingEffect {\n\n    private affecting : number\n    private name: string\n    private initialDuration: number\n    private durationRemaining: number\n    private toolTip: string\n    private target: \"square\" | \"piece\"\n\n    public constructor(_affecting: number, _name: string, _duration: number, _toolTip: string, _target: \"square\" | \"piece\" = \"piece\") {\n        this.affecting = _affecting;\n        this.name = _name;\n        this.initialDuration = _duration;\n        this.durationRemaining = _duration;\n        this.toolTip = _toolTip;\n        this.target = _target;\n    }\n\n    public getSquare = () => this.affecting;\n    public getName = () => this.name;\n    public getInitialDuration = () => this.initialDuration;\n    public getDurationRemaining = () => this.durationRemaining;\n    public getToolTip = () => this.toolTip;\n    public getTarget = () => this.target;\n\n    public updateSquare = ( _square: number ) => this.affecting = _square;\n\n    public tickDownDuration = () => this.durationRemaining--;\n    public unTickDuration = () => this.durationRemaining++;\n\n}","import {legalMove, Move} from \"../types\";\nimport Piece from \"./Piece\";\nimport ActualMove from \"./Move\";\n\nexport default class Board {\n\n    static getLegalMoves : ( board : number[], history : ActualMove[], options : Partial<LegalMoveOptions> ) => legalMove[] = ( board, history, options = {} ) => {\n\n        let fullOptions = Object.assign({\n            mode: \"all\", colour: 0, ignore: []\n        }, options) as LegalMoveOptions;\n\n        let moves = [] as legalMove[]\n\n        board.map( (piece, position) => [ piece, position ] )\n            .filter( piece => ( piece[0] > 0 && fullOptions.colour > 0 ) || ( piece[0] < 0 && fullOptions.colour < 0 ) )\n            .filter( ([ piece, position ]) => fullOptions.ignore.indexOf( position ) === -1 )\n            .forEach(( [ piece, position ] ) => {\n                if ( piece === Piece.None ) return;\n                let pieceObject = Piece.getPiece( piece );\n                if ( pieceObject === null ) return;\n                let pieceMoves = pieceObject.getLegalMoves( position, board, fullOptions.mode, fullOptions.colour, history );\n                moves.push( ...pieceMoves );\n        });\n\n        //Pushes each of the moves\n        return moves;\n\n    }\n\n    static isThreatened : ( position : number, board : number[], history : ActualMove[], colour : number ) => boolean = ( position, board, history, colour ) => {\n\n        //This will be used to determine if a given square is threatened.\n        return Board.getThreats( position, board, history, colour ).length > 0;\n\n    }\n\n    static getThreats : ( position : number, board : number[], history : ActualMove[], colour? : number ) => legalMove[] = ( position, board, history, colour = -board[position] ) => {\n        return Board.getLegalMoves(\n            board, history, { mode: \"all\", colour }\n        ).filter( move => move.to === position );\n    }\n\n}\n\ntype LegalMoveOptions = {\n    mode: \"all\" | \"captures\" |  \"moves\",\n    colour: number,\n    ignore: number[]\n}\n\n","import ALL_CARDS from \"../Cards/Cards\";\n\nexport default class CardMove {\n\n    public readonly cardName : string;\n\n    public readonly boardBefore : number[];\n\n    public readonly targets: number[];\n\n    public getMoveName : () => string = () => ALL_CARDS[ this.cardName ].shortName\n\n    constructor( _cardName : string, _boardBefore : number[], _targets: number[] ) {\n        this.cardName = _cardName;\n        this.boardBefore = _boardBefore;\n        this.targets = _targets;\n        if ( Object.keys(ALL_CARDS).indexOf(_cardName) === -1 ) {\n            console.log(\"Warning - creating a CardMove using a non-existant card!\")\n        }\n    }\n\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Reposition_Card extends Card {\n\n    public readonly cardName = \"Reposition\";\n    public readonly description = \"Swap 2 adjacent friendly pieces\";\n\n    public readonly targets = 2; //Choose two pieces\n    public readonly fast = false;\n    public readonly cost = 8;\n\n    public readonly shortName = \"_Rpos\";\n    public static readonly id = \"reposition\";\n    public readonly id = Reposition_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        if (!previousTargets || previousTargets.length === 0) board.forEach(( piece, index ) => { /// FIRST PIECE\n            if (piece !== Piece.None && sameColour(piece, colour)) {\n                /// MUST BE ADJACENT TO A FRIENDLY PIECE\n                if (adjacentSquares(index).filter( adj => sameColour(piece, board[adj]) ).length > 0) validTargets.push(index);\n            }\n        });\n        else board.forEach((piece, index) => {\n            if (piece !== Piece.None && sameColour(piece, colour)) {\n                if (adjacentSquares(previousTargets ? previousTargets[0] : index).indexOf(index) !== -1) validTargets.push(index);\n            }\n        })\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        let [ square1, square2 ] = targets;\n        game.updateGameBoard(board => {\n            let piece1 = board[square1], piece2 = board[square2];\n            board[square1] = piece2;\n            board[square2] = piece1;\n        })\n    }\n\n    public trackPiece = ( square: number, targets: number[] ) => {\n        if (targets.length === this.targets) {\n            let [target1, target2] = targets;\n            // If the square was either one of the squares we targeted, then we do this!\n            if (square === target1) return target2;\n            else if (square === target2) return target1;\n        }\n\n        return square;\n    }\n}","///\n/// The General Message Class\n///\nimport {GameInfo} from \"./types\";\nimport {promotionMove} from \"./WebWorker/IncludePromotions\";\nimport {cardMove} from \"./WebWorker/MiniMax\";\n\nexport default abstract class Message {\n    public abstract msgType: MessageType\n    public abstract payload: any\n}\n\nexport class ReadyMessage extends Message {\n    public msgType =  \"ready\" as MessageType\n    public payload = {}\n}\n\nexport class SetupChoice_Message extends Message {\n    public msgType = \"setup_choice\" as MessageType\n    public payload : {\n        choice: \"army\" | \"deck\" | \"colour\",\n        data : SetupChoiceData\n    }\n    constructor(_payload: {\n        choice: \"army\" | \"deck\" | \"colour\",\n        data : SetupChoiceData\n    }) {\n        super()\n        this.payload = _payload\n    }\n}\n\nexport class GameStartRequest_Message extends Message {\n    public msgType = \"game_start_request\" as MessageType\n    public payload: {\n        army: {\n            name: string,\n            pieces: number[]\n        },\n        deck: {\n            name: string,\n            cards: string[]\n        }\n    }\n    constructor(_payload: { army: { name: string, pieces: number[] }, deck: { name: string, cards: string[] } }) {\n        super();\n        this.payload = _payload;\n    }\n}\n\nexport class GameStartResponse_Message extends Message {\n    public msgType = \"game_start_response\" as MessageType;\n    public payload: GameInfo\n    constructor(_payload: GameInfo) {\n        super();\n        this.payload = _payload;\n    }\n}\n\nexport class PieceMove_Message extends Message {\n    public msgType = \"piece_move\" as MessageType\n    public payload: promotionMove\n    constructor(_payload: promotionMove) {\n        super();\n        this.payload = _payload;\n    }\n}\n\nexport class CardMove_Message extends Message {\n    public msgType = \"card_move\" as MessageType\n    public payload: cardMove\n    constructor(_payload: cardMove) {\n        super();\n        this.payload = _payload;\n    }\n}\n\nexport type MessageType = \"ready\" | \"move\" | \"card\" | \"setup_choice\" | \"game_start_request\"\n    | \"piece_move\" | \"card_move\"\n\ntype SetupChoiceData = \"WHITE\" | \"BLACK\" | \"RANDOM\" | {\n    name: string,\n    pieces: number[]\n} | {\n    name: string,\n    cards: string[]\n}","export type Colour = \"white\" | \"black\"\n\nexport type PieceCategory = \"pawn\" | \"knight\" | \"bishop\" | \"rook\" | \"queen\" | \"king\"\n\nexport type SquareFile = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\"\n\nexport interface Move {\n    from : number,\n    to : number,\n    piece : number\n}\n\nexport const FILES = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\" ]\n\n\nexport interface legalMove {\n    to : number,\n    from : number,\n    special? : SpecialMove\n}\n\nexport type SpecialMove =  \"EP\" | \"PROMOTION\" | \"CASTLE\" | \"DOUBLE\"\n\nexport type tag = \"Major\" | \"Minor\" | \"Castler\" | \"Colour-bound\" | \"Knight\" | \"Bishop\" | \"Rook\" | \"Queen\" | \"King\" | \"Pawn\" | \"FIDE\" | \"Crusader\" | \"Token\"\n\nexport interface GameInfo {\n    uuid: string,\n    opponent: \"LOCAL\" | \"COMP\" | \"ONLINE\",\n    army: string,\n    opponentArmy: string,\n    deck: string,\n    opponentDeck: string,\n    colour: 1 | -1\n}\n","///\n/// BOARD GENERATION FUNCTIONS\n///\n\n//An Empty Board\nimport Piece from \"../Classes/Piece\";\nimport {Army} from \"../Presets/Armies\";\n\nconst generateTestBoard : () => number[] = () => {\n\n    let board = generateEmptyBoard();\n\n    // board[1] = -Piece.King\n    // board[10] = -Piece.Pawn\n    // board[17] = -Piece.Pawn\n    // board[41] = Piece.Pawn\n    // board[47] = Piece.Pawn\n    // board[48] = Piece.Pawn\n    // board[51] = -Piece.Knight\n    // board[56] = Piece.King\n    // board[61] = Piece.Bede\n    // board[30] = -Piece.Waffle\n    // board[13] = -Piece.Warbishop\n    // board[10] = Piece.Cardinal\n\n    board[36] = Piece.Cardinal\n\n    return board;\n}\n\nconst generateEmptyBoard : () => number[] = () => {\n    let board = [];\n    for ( let i = 0; i <= 63; i++ ) {\n        board.push(0); //Fills the board with 0s\n    }\n    return board;\n}\n\n//The Standard FIDE Board\nconst generateFIDEBoard : () => number[] = () => {\n    let board = generateEmptyBoard();\n\n    //Add the pawns\n    for (let i = 8; i <= 15; i++) {\n        board[i] = Piece.Pawn;\n        board[63 - i] = -Piece.Pawn;\n    }\n\n    //Rooks\n    board[0] = Piece.Rook;\n    board[7] = Piece.Rook;\n    board[56] = -Piece.Rook;\n    board[63] = -Piece.Rook;\n\n    //Knights\n    board[1] = Piece.Knight;\n    board[6] = Piece.Knight;\n    board[57] = -Piece.Knight;\n    board[62] = -Piece.Knight;\n\n    //Bishops\n    board[2] = Piece.Bishop;\n    board[5] = Piece.Bishop;\n    board[58] = -Piece.Bishop;\n    board[61] = -Piece.Bishop;\n\n    //Queens\n    board[3] = Piece.Queen;\n    board[59] = -Piece.Queen;\n\n    //Kings\n    board[4] = Piece.King;\n    board[60] = -Piece.King;\n\n    return board;\n\n}\n\n// GENERATE BOARD FROM TWO ARMIES\nconst generateBoardFromArmies: ( wArmy: Army, bArmy: Army ) => number[] = ( whiteArmy, blackArmy ) => {\n    let board = generateEmptyBoard();\n    whiteArmy.pieces.map( //White army\n        ( piece, index ) => board[index] = piece\n    )\n    blackArmy.pieces.map( //Black army\n        ( piece, index ) => board[56 + index] = piece * -1\n    )\n    //Add the pawns\n    for (let i = 8; i <= 15; i++) {\n        board[i] = Piece.Pawn;\n        board[63 - i] = -Piece.Pawn;\n    }\n    return board;\n}\n\nexport {\n    generateEmptyBoard,\n    generateFIDEBoard,\n    generateTestBoard,\n    generateBoardFromArmies\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Deception_Card extends Card {\n\n    public readonly cardName = \"Deception\";\n    public readonly description = \"Swap any 2 friendly pieces\";\n\n    public readonly targets = 2; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 12;\n\n    public readonly shortName = \"_Dcep\";\n    public static readonly id = \"deception\";\n    public readonly id = Deception_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => { /// FIRST PIECE\n            if (piece !== Piece.None && sameColour(piece, colour)) {\n                validTargets.push(index);\n            }\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        let [ square1, square2 ] = targets;\n        game.updateGameBoard(board => {\n            let piece1 = board[square1], piece2 = board[square2];\n            board[square1] = piece2;\n            board[square2] = piece1;\n        })\n    }\n\n    public trackPiece = ( square: number, targets: number[] ) => {\n        if (targets.length === this.targets) {\n            let [target1, target2] = targets;\n            // If the square was either one of the squares we targeted, then we do this!\n            if (square === target1) return target2;\n            else if (square === target2) return target1;\n        }\n\n        return square;\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport OngoingEffect from \"../../Classes/OngoingEffect\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Oust_Card extends Card {\n\n    public readonly cardName = \"Oust\";\n    public readonly description = \"Choose a non-king enemy piece. Your opponent must move it next turn (if possible).\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = true;\n    public readonly cost = 3;\n\n    public readonly shortName = \"_Oust\";\n    public static readonly id = \"oust\";\n    public readonly id = Oust_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece !== Piece.None && piece !== (-colour * Piece.King) && !sameColour(piece, colour)) validTargets.push(index)\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        const description = \"This piece is being ousted. It must be moved on its next turn (if possible).\"\n        targets.forEach( target => {\n            game.addOngoingEffect( new OngoingEffect( target, \"must-move\", 1, description )  )\n        } )\n    }\n}","import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport { knightGrid } from \"../ValueGrids\";\n\nexport default class Knight extends GamePiece {\n\n    //eval\n    public materialValue = 3;\n    public engineValue = 320;\n    public valueGrid = knightGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Knight.shortName;\n    public longName = Knight.longName;\n    public static shortName = \"N\";\n    public  static longName = \"Knight\";\n\n\n    public movesDescription = \"Two squares in one direction, then one perpendicular, forming an L-shape.\";\n    public specialMoves = []\n    public notes = \"Can leap over pieces.\";\n    public categories = [ \"Minor\", \"Knight\", \"FIDE\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number) => legalMove[] = ( position, board, mode, colour = 1 ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[];\n        moves.push( ...getLegalSingleMoves(\n            board, position, Piece.Knight * colour, [\n                p => Piece.getFile(p) >= 2 ? p + 6 : p, p => Piece.getFile(p) >= 2 ? p - 10 : p,\n                p => Piece.getFile(p) <= 5 ? p + 10 : p, p => Piece.getFile(p) <= 5 ? p - 6 : p,\n                p => Piece.getFile(p) >= 1 ? p + 15 : p, p => Piece.getFile(p) <= 6 ? p - 15 : p,\n                p => Piece.getFile(p) <= 6 ? p + 17 : p, p => Piece.getFile(p) >= 1 ? p - 17 : p,\n            ], mode\n        ) )\n\n        return moves;\n\n    }\n\n}","import {Move, SpecialMove} from \"../types\";\nimport {generateFIDEBoard} from \"../helpers/BoardGenerators\";\nimport ActualMove from \"./Move\";\nimport CardMove from \"./CardMove\";\nimport Piece from \"./Piece\";\nimport Pawn from \"../Pieces/FIDE/Pawn\";\nimport Rook from \"../Pieces/FIDE/Rook\";\nimport Card from \"../Cards/Card\";\nimport ALL_CARDS, {TEST_HAND} from \"../Cards/Cards\";\nimport Expendable_Card from \"../Cards/FIDE/Expendable_Card\";\nimport {Deck, FIDEDECK} from \"../Presets/Decks\";\nimport {randomFromList} from \"../helpers/Utils\";\nimport OngoingEffect from \"./OngoingEffect\";\nimport {getActualMoves} from \"../helpers/MoveFilter\";\nimport GamePiece from \"../Pieces/GamePiece\";\n\nexport default class Game {\n\n    private readonly board : number[]\n\n    private currentTurn : number; //1 for white, -1 for black\n\n    private moves : ( ActualMove | CardMove )[]\n    private gameLength : number;\n\n    ///\n    /// PLAYER DECKS & HANDS\n    ///\n    private whiteHand : Card[];\n    private blackHand : Card[];\n    private readonly whiteDeck : Deck;\n    private readonly blackDeck : Deck;\n    private whiteCurrentDeck : Card[];\n    private blackCurrentDeck : Card[];\n\n    ///\n    /// ONGOING EFFECTS\n    ///\n    private ongoingEffects : OngoingEffect[]\n\n\n    public UnMove = () => {\n\n        //Let's roll back the most recent move!\n        let move = this.moves.pop();\n\n        //\n        /// IS THE MOVE IS A NORMAL MOVE, DO THE FOLLOWING\n        ///\n        if ( move instanceof ActualMove ) {\n            this.moves = [ ...this.moves ]\n            if ( move === undefined ) return;\n\n            let colour = move.moving > 0 ? 1 : -1;\n\n            //Let's replace any piece that was captured\n            if ( move.special !== \"EP\" ) {\n                this.board[move.to] = move.captured;\n                //Update piece indexes\n            }\n            this.board[ move.from ] = move.moving;\n            //Update piece indexes\n\n            //Any effects affecting the piece move with it\n            this.getCurrentOngoingEffects()\n                .filter(effect => effect.getSquare() === (move as ActualMove).to && effect.getTarget() === \"piece\")\n                .forEach(effect => effect.updateSquare((move as ActualMove).from))\n\n            switch ( move.special ) {\n                case \"EP\":\n                    this.board[ move.to ] = Piece.None;\n                    this.board[ move.to - 8 * colour ] = move.captured;\n                    break;\n                case \"PROMOTION\":\n                    //We should be able to attach the piece we want to promote to\n                    break;\n                case \"CASTLE\":\n                    //CASTLING RULES\n                    //We've already moved the king. Now, we want to move the rook.\n\n                    //If we were castling Queenside\n                    if ( move.from > move.to ) {\n                        let rookDistance = 0;\n                        if ( Math.abs(this.board[move.to + 1]) === Piece.Rook) {\n                            //CASTLING WITH A SIMPLE ROOK\n                            rookDistance = 2; //Rook is 2 after where the king moves to\n                        }\n                        else if ( Math.abs(this.board[move.to + 1]) === Piece.Bede) {\n                            rookDistance = 1; //Bede is only 1 after where the king moves to\n                        }\n                        let rookSquare = move.to - rookDistance;\n                        this.board[rookSquare] = this.board[ move.to + 1 ];\n                        this.board[ move.to + 1 ] = Piece.None;\n                        //Update pieceIndexes\n                    }\n                    //If we were castling Kingside\n                    if ( move.from < move.to ) {\n                        let rookSquare = move.to + 1;\n                        this.board[rookSquare] = this.board[ move.to - 1 ];\n                        this.board[ move.to - 1 ] = Piece.None;\n                    }\n\n                    break;\n                case undefined:\n                default:\n                    break;\n            }\n            if ( !move.additional.isCardMove ) {\n                this.undoEndOfTurnCheck();\n            }\n            else {\n                //IF WE JUST UN-MADE A CARD MOVE\n                //Repeat\n                this.UnMove();\n            }\n\n        }\n\n        ///\n        /// IF THE MOVE IS A CARD MOVE, DO THIS INSTEAD!\n        ///\n\n        if ( move instanceof CardMove ) {\n            //We want to roll back to what the board was before the card move\n            this.board.forEach((piece, position) => {\n                //If the piece has changed, then we update it\n                if ( piece !== (move as CardMove).boardBefore[position] ) {\n                    this.board[position] = (move as CardMove).boardBefore[position];\n                }\n                // If the piece didn't change, don't update it\n            })\n\n            //WE WANT TO RETURN THE CARD TO THE PLAYER'S HAND\n            let returnedCard = Object.assign({}, ALL_CARDS[move.cardName]);\n            returnedCard.regenerateUUID()\n            if ( this.currentTurn < 0 ) {\n                //Undoing a white card move (opposite because currentTurn not yet changed\n                this.whiteHand.push( returnedCard )\n            }\n            else {\n                this.blackHand.push( returnedCard )\n            }\n\n            //If the card we just un-did wasn't fast, then we change back the turn.\n            let card = ALL_CARDS[ move.cardName ];\n\n            //REMOVE ANY EFFECTS THAT HAVE JUST BEEN ADDED\n            let effectIndexesToRemove = [] as number[];\n            this.ongoingEffects.forEach((e, i) => {\n                if (e.getDurationRemaining() === e.getInitialDuration()) effectIndexesToRemove.push(i)\n            } )\n            this.ongoingEffects = this.ongoingEffects.filter((e, i) => effectIndexesToRemove.indexOf(i) === -1);\n\n            if ( card && !card.fast ) {\n                this.undoEndOfTurnCheck();\n            }\n        }\n\n    };\n\n    ///\n    /// MAKING A NORMAL CHESS MOVE\n    ///\n    public Move = ( from : number, to : number, special? : SpecialMove, additional: Partial<AdditionalOptions> = {}) => {\n        //Let's add the move function\n        //Keeping it simple for now, let's just make the move. Forcefully.\n\n        //Let's see if there is anything special we need to do\n        let colour = this.board[from] > 0 ? 1 : -1;\n        let specify = ActualMove.NONE;\n        let moving = this.board[from];\n        let captured = to === from ? Piece.None : this.board[to]; //Not capturing if moving to own square\n\n        if ( Math.abs( this.board[from] ) === Piece.Pawn && this.board[to] !== 0) {\n            specify = ActualMove.FILE\n        }\n\n        //WE ALSO WANT TO HANDLE SPECIAL MOVES\n        switch ( special ) {\n            case \"EP\":\n                captured = this.board[ to - 8 * colour ];\n                this.board[ to - 8 * colour ] = Piece.None;\n                //Remove from piece indexes\n                break;\n            case \"PROMOTION\":\n                //We should have the piece attached\n                if ( additional.hasOwnProperty(\"promotionTo\") && additional.promotionTo !== undefined ) {\n                    let { promotionTo } = additional;\n                    //Now, we just replace the piece with the one we want to promote to!\n                    this.board[ from ] = promotionTo;\n                }\n                break;\n            case \"CASTLE\":\n                //CASTLING RULES\n                //We've already moved the king. Now, we want to move the rook.\n\n                //If we're castling Queenside\n                if ( from > to ) {\n                    let rookSquare = to;\n                    if ( Math.abs(this.board[ to - 2 ]) === Piece.Rook && this.board[ to - 1 ] === Piece.None ) {\n                        //CASTLING WITH A SIMPLE ROOK\n                        rookSquare -= 2; //Rook is 2 after where the king moves to\n                    }\n                    else if ( Math.abs(this.board[to - 1]) === Piece.Bede) {\n                        rookSquare -= 1; //Bede is only 1 after where the king moves to\n                    }\n                    this.board[ to + 1 ] = this.board[rookSquare];\n                    this.board[rookSquare] = Piece.None;\n                    //Update piece indexes\n                }\n                //If we're castling Kingside\n                if ( from < to ) {\n                    let rookSquare = to + 1;\n                    this.board[ to - 1 ] = this.board[rookSquare];\n                    this.board[rookSquare] = Piece.None;\n                    //Update piece indexes\n                }\n\n                break;\n            case undefined:\n            default:\n                break;\n        }\n\n        this.moves.push( new ActualMove( from, to, moving, captured, specify, special, additional) );\n\n        //Let's move the piece on To to From.\n        this.board[to] = this.board[from];\n        if (to !== from) this.board[from] = Piece.None;\n\n        //Any effects affecting the piece move with it\n        this.getCurrentOngoingEffects().filter(effect => effect.getSquare() === from && effect.getTarget() === \"piece\")\n            .forEach(effect => {\n                effect.updateSquare(to);\n            })\n\n        if ( !additional.isCardMove ) {\n            this.endOfTurnCheck();\n        }\n\n    }\n\n    private endOfTurnCheck = () => {\n        if (this.currentTurn < 0) {\n            this.gameLength++ //If made a black move, incrementing game length (turn number)\n        }\n        this.currentTurn = -this.currentTurn;\n        this.checkForCardDraw();\n        this.ongoingEffects.forEach( e => e.tickDownDuration() )\n    }\n\n    private undoEndOfTurnCheck = () => {\n        if (this.currentTurn > 0) {\n            this.gameLength--; //If un-making a white move, reduce the game length counter\n        }\n        this.currentTurn = -this.currentTurn;\n        this.checkForUndoCardDraw()\n        this.ongoingEffects.forEach((e, i) => {\n            e.unTickDuration();\n        } )\n\n    }\n\n    private checkForCardDraw = () => {\n        if (this.gameLength % 3 === 0 && this.currentTurn > 0) {\n            if ( this.whiteCurrentDeck.length > 0 ) this.DrawCard(1);\n            if ( this.blackCurrentDeck.length > 0 ) this.DrawCard(-1);\n        }\n    }\n    private checkForUndoCardDraw = () => {\n        if ((this.gameLength+1) % 3 === 0 && this.currentTurn < 0 && this.whiteHand.length > 0 && this.blackHand.length > 0) {\n            let whiteCard = this.whiteHand.pop() as Card;\n            let blackCard = this.blackHand.pop() as Card;\n            this.whiteCurrentDeck.push(whiteCard);\n            this.blackCurrentDeck.push(blackCard);\n        }\n    }\n\n    ///\n    /// PLAYING A CARD\n    ///\n    public PlayCard = ( card: Card, targets: number[] ) => {\n\n        if ( !card ) {\n            console.log(\"Tried to play a card that does not exist!\");\n            return;\n        }\n\n        if (targets.length !== card.targets) {\n            console.log(\"Tried to play a card with the improper amount of targets\");\n            return;\n        }\n\n        //\n        // CARD FUNCTIONALITY WORKS VIA CALLBACKS, SO WE USE THE CALLBACK!\n        //\n\n        // Save the board state\n        let boardBefore = [ ...this.board ];\n\n        //Now we create the card move\n        let cardMove = new CardMove( card.id, boardBefore, targets );\n        this.moves.push( cardMove );\n\n        card.playCard( targets, this );\n\n        ///\n        /// NOW, WE REMOVE THE CARD FROM THE PLAYER'S HAND\n        ///\n\n        if (this.currentTurn > 0) {\n            let removalIndex = this.whiteHand.map(c => c.getUUID()).indexOf(card.getUUID());\n            this.whiteHand = this.whiteHand.filter((c, i) => i !== removalIndex);\n        }\n        else {\n            let removalIndex = this.blackHand.map(c => c.getUUID()).indexOf(card.getUUID());\n            this.blackHand = this.blackHand.filter((c, i) => i !== removalIndex);\n        }\n\n\n        //Now, we change the current turn - IF the card was fast.\n        if ( !card.fast ) {\n            this.endOfTurnCheck();\n        }\n\n    }\n\n    ///\n    /// DRAWING CARDS\n    ///\n    public DrawCard = ( colour: number, quantity: number = 1 ) => {\n        if ( colour > 0 ) {\n            //Drawn for white\n            for (let i = 0; i < quantity; i++) {\n                let drawn = Number.parseInt(randomFromList( Object.keys(this.whiteCurrentDeck) ));\n                this.whiteHand.push( this.whiteCurrentDeck[drawn] );\n                this.whiteCurrentDeck = this.whiteCurrentDeck.filter((c, i) => i !== drawn);\n            }\n        }\n        else {\n            //Drawn for black\n            for (let i = 0; i < quantity; i++) {\n                let drawn = Number.parseInt(randomFromList( Object.keys(this.blackCurrentDeck) ));\n                this.blackHand.push( this.blackCurrentDeck[drawn] );\n                this.blackCurrentDeck = this.blackCurrentDeck.filter((c, i) => i !== drawn);\n            }\n        }\n    }\n\n\n    constructor( _board : number[] = generateFIDEBoard(), _history : ActualMove[] = [], _whiteDeck: Deck = FIDEDECK, _blackDeck: Deck = FIDEDECK  ) {\n        this.board = [..._board]\n        this.moves = _history;\n        this.currentTurn = 1;\n        this.gameLength = 1;\n\n\n        this.whiteHand = [];\n        this.blackHand = [];\n        this.whiteDeck = _whiteDeck;\n        this.blackDeck = _blackDeck;\n        this.whiteCurrentDeck = this.whiteDeck.cards.map(c => {\n            let _c = Object.assign({}, ALL_CARDS[c]);\n            _c.regenerateUUID();\n            return _c;\n        });\n        this.blackCurrentDeck = this.blackDeck.cards.map(c => {\n            let _c = Object.assign({}, ALL_CARDS[c]);\n            _c.regenerateUUID();\n            return _c;\n        });\n\n        //DRAWING THE INITIAL CARDS\n        this.DrawCard(1, 2); //Draw 2 cards for white\n        this.DrawCard(-1, 3); //Draw 3 cards for black\n\n        // this.whiteHand = TEST_HAND;\n        // this.blackHand = TEST_HAND;\n\n\n        this.whiteHand = this.whiteHand.map(c => {\n            let _c = Object.assign({}, c);\n            _c.regenerateUUID();\n            return _c;\n        });\n        this.blackHand = this.blackHand.map(c => {\n            let _c = Object.assign({}, c);\n            _c.regenerateUUID();\n            return _c;\n        });\n\n        //ONGOING EFFECTS\n        this.ongoingEffects = [];\n\n        // FOR DEVELOPMENT PURPOSES\n        if (global.window) {\n            (global.window as any).updateBoard = (update: (board: number[]) => number[]) => update(this.board).map((p, i) => this.board[i] = p);\n            (global.window as any).ADD_CARD_TO_HAND = ( id: string ) => {\n                if (ALL_CARDS[id]) {\n                    if (this.currentTurn > 0) this.whiteHand.push( ALL_CARDS[id] )\n                    else this.blackHand.push( ALL_CARDS[id] );\n                }\n            }\n        }\n\n\n    }\n\n    public getBoard = () => this.board;\n    public getMoves = () => this.moves;\n    public getCurrentTurn = () => this.currentTurn;\n\n    public getWhiteHand = () => this.whiteHand;\n    public getBlackHand = () => this.blackHand;\n    public getCurrentPlayerHand = () => this.currentTurn > 0 ? this.whiteHand : this.blackHand;\n\n    public getChaosScore = () => getActualMoves(this.moves)\n        .reduce(( chaosScore, m ) => Piece.getPiece(m.captured) ? chaosScore + (Piece.getPiece(m.captured) as GamePiece).materialValue : chaosScore, 0)\n\n    public getWhiteCurrentDeck = () => this.whiteCurrentDeck;\n    public getBlackCurrentDeck = () => this.blackCurrentDeck;\n    public getWhiteDeck = () => this.whiteDeck;\n    public getBlackDeck = () => this.blackDeck;\n    public getCurrentPlayerCurrentDeck = () => this.currentTurn > 0 ? this.whiteCurrentDeck : this.blackCurrentDeck;\n    public getNonCurrentPlayerCurrentDeck = () => this.currentTurn > 0 ? this.blackCurrentDeck : this.whiteCurrentDeck;\n\n    public getOngoingEffects = () => this.ongoingEffects;\n    public getCurrentOngoingEffects = () => this.ongoingEffects.filter(e => e.getDurationRemaining() >= 0);\n    public addOngoingEffect = ( effect: OngoingEffect ) => this.ongoingEffects.push(effect);\n\n    public getLastMove = () => this.moves.length > 0 ? this.moves[ this.moves.length - 1 ] : undefined;\n\n    public dangerouslySetCurrentTurn = ( turn: number ) => this.currentTurn = turn;\n\n    // These are to be used when playing online - each client acts as a source of authority on its own hand and deck.\n    public setWhiteHand = ( cb:(wh:Card[])=>Card[] ) => this.whiteHand = cb(this.whiteHand);\n    public setBlackHand = ( cb:(bh:Card[])=>Card[] ) => this.blackHand = cb(this.blackHand);\n\n    ///\n    /// FOR PLAYING CARDS\n    /// We want to be able to directly access the game board, so we'll do this\n    ///\n\n    public updateGameBoard : ( callback : ( board: number[] ) => void ) => void = ( callback : (board:number[]) => void ) => callback( this.board );\n\n}\n\nexport interface AdditionalOptions {\n    promotionTo : number,\n    isCardMove: boolean\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Expendable_Card extends Card {\n\n    public readonly cardName = \"Expendable\";\n    public readonly description = \"Summon a pawn adjacent to a friendly piece.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 4;\n\n    public readonly shortName = \"_Expd\";\n    public static readonly id = \"expendable\";\n    public readonly id = Expendable_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.None) {\n                if (adjacentSquares(index).filter( adj => sameColour(colour, board[adj]) ).length > 0) validTargets.push(index);\n            }\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        // game.updateGameBoard( board => {\n        //     //board[targetSquare] = Piece.Pawn * game.getCurrentTurn() > 0 ? 1 : -1\n        //     targets.forEach(target => {\n        //         board[target] = Piece.Pawn * game.getCurrentTurn() > 0 ? 1 : -1\n        //     })\n        // });\n        targets.forEach( targetSquare => {\n            game.Move(targetSquare, targetSquare, \"PROMOTION\", {isCardMove: true, promotionTo: Piece.Pawn * game.getCurrentTurn()})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Advance_Card extends Card {\n\n    public readonly cardName = \"Advance\";\n    public readonly description = \"Move 2 pawns forward one.\";\n\n    public readonly targets = 2; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 0;\n\n    public readonly shortName = \"_Advn\";\n    public static readonly id = \"advance\";\n    public readonly id = Advance_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.Pawn * colour && Piece.getRank(index) !== ( colour > 0 ? 7 : 0 )\n                && board[index + (8*colour)] === Piece.None) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            game.Move(target, target + (8 * game.getCurrentTurn()), undefined, {isCardMove: true})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class TacticalRetreat_Card extends Card {\n\n    public readonly cardName = \"Tactical Retreat\";\n    public readonly description = \"Move a piece back 2 squares.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = true;\n    public readonly cost = 5;\n\n    public readonly shortName = \"_Tcrt \";\n    public static readonly id = \"tactical-retreat\";\n    public readonly id = TacticalRetreat_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if ( sameColour( piece, colour )\n                && ( (colour > 0 && Piece.getRank(index) >= 2) || (colour < 0 && Piece.getRank(index) <=5) )\n                && board[index - (8*colour)] === Piece.None\n                && board[index - (16*colour)] === Piece.None ) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            game.Move(target, target - (16 * game.getCurrentTurn()), undefined, {isCardMove: true})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Mount_Card extends Card {\n\n    public readonly cardName = \"Mount\";\n    public readonly description = \"A friendly pawn promotes into a knight.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 10;\n\n    public readonly shortName = \"_Moun\";\n    public static readonly id = \"mount\";\n    public readonly id = Mount_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.Pawn * colour) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            game.Move(target, target, \"PROMOTION\", {isCardMove: true, promotionTo: Piece.Knight * game.getCurrentTurn()})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Adjust_Card extends Card {\n\n    public readonly cardName = \"Adjust\";\n    public readonly description = \"A piece makes one move rookwise\";\n\n    public readonly targets = 2;\n    public readonly fast = false;\n    public readonly cost = 0;\n\n    public readonly shortName = \"_Adjs\";\n    public static readonly id = \"adjust\";\n    public readonly id = Adjust_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        if (previousTargets && previousTargets[0]) { //Making the follow up move\n            let prevSquare = previousTargets[0];\n            adjacentSquares(prevSquare, false).forEach(square => {\n                if (board[square] === Piece.None) validTargets.push(square);\n            })\n        }\n        else { //IF THE FIRST ONE\n            board.forEach(( piece, index ) => {\n                if ( sameColour( piece, colour ) ) {\n                    if ( adjacentSquares(index, false).filter(adjSq => board[adjSq] === Piece.None).length > 0 ) validTargets.push(index);\n                }\n            });\n        }\n        return validTargets;\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        let [ from, to ] = targets;\n        game.Move( from, to, undefined, {isCardMove: true} )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Inquisition_Card extends Card {\n\n    public readonly cardName = \"Inquisition\";\n    public readonly description = \"A pawn moves forward 2\";\n\n    public readonly targets = 1;\n    public readonly fast = false;\n    public readonly cost = 0;\n\n    public readonly shortName = \"_Inqu\";\n    public static readonly id = \"inquisition\";\n    public readonly id = Inquisition_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if ( piece === Piece.Pawn * colour && board[index + ( 16 * colour )] === Piece.None ) validTargets.push(index);\n        })\n        return validTargets;\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        let [ target ] = targets;\n        let colour = game.getCurrentTurn();\n        game.Move( target, target + (16 * colour), \"DOUBLE\", {isCardMove: true} )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport OngoingEffect from \"../../Classes/OngoingEffect\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Hallow_Card extends Card {\n\n    public readonly cardName = \"Hallow\";\n    public readonly description = \"A non-king piece cannot capture or be captured for 1 turn.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = true;\n    public readonly cost = 2;\n\n    public readonly shortName = \"_Hlow\";\n    public static readonly id = \"hallow\";\n    public readonly id = Hallow_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece !== Piece.None && Math.abs(piece) !== Piece.King ) validTargets.push(index)\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        const description = \"This piece has been hallowed, and cannot capture or be captured.\"\n        targets.forEach( target => {\n            game.addOngoingEffect( new OngoingEffect( target, \"no-captures\", 1, description )  )\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport OngoingEffect from \"../../Classes/OngoingEffect\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Repent_Card extends Card {\n\n    public readonly cardName = \"Repent\";\n    public readonly description = \"Choose a non-king enemy piece. Your opponent cannot move it next turn.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = true;\n    public readonly cost = 2;\n\n    public readonly shortName = \"_Rpnt\";\n    public static readonly id = \"repent\";\n    public readonly id = Repent_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece !== Piece.None && piece !== (-colour * Piece.King) && !sameColour(piece, colour)) validTargets.push(index)\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        const description = \"This piece is repenting. It cannot be moved normally (Can still be moved by cards).\"\n        targets.forEach( target => {\n            game.addOngoingEffect( new OngoingEffect( target, \"no-moves\", 1, description )  )\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Demote_Card extends Card {\n\n    public readonly cardName = \"Demote\";\n    public readonly description = \"An opposing minor piece demotes to a pawn.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 12;\n\n    public readonly shortName = \"_Dmot\";\n    public static readonly id = \"demote\";\n    public readonly id = Demote_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (Piece.getPiece(piece)?.categories.indexOf(\"Minor\") !== -1\n                && Piece.getPiece(piece)?.categories.indexOf(\"Pawn\") === -1\n                && differentColours(colour, piece)) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            game.Move(target, target, \"PROMOTION\", {isCardMove: true, promotionTo: -Piece.Pawn * game.getCurrentTurn()})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport Bishop from \"../../Pieces/FIDE/Bishop\";\nimport Knight from \"../../Pieces/FIDE/Knight\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Maneuver_Card extends Card {\n\n    public readonly cardName = \"Maneuver\";\n    public readonly description = \"A bishop makes a knight move.\";\n\n    public readonly targets = 2; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 15;\n\n    public readonly shortName = \"_Mnvr\";\n    public static readonly id = \"maneuver\";\n    public readonly id = Maneuver_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        if (!previousTargets || previousTargets.length === 0) board.forEach(( piece, index ) => {\n            if ( sameColour(piece, colour)\n                && Piece.getPiece(piece)?.categories.indexOf(\"Bishop\") !== -1 ) validTargets.push(index);\n        });\n        else {\n            let knightMoves = new Knight().getLegalMoves( previousTargets[0], board, \"moves\", colour );\n            board.forEach((piece, index) => {\n                if (knightMoves.filter(move => move.to === index).length > 0) validTargets.push(index);\n            })\n        }\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        let [ target, destination ] = targets;\n        game.Move( target, destination, undefined, { isCardMove: true } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport Bishop from \"../../Pieces/FIDE/Bishop\";\nimport Knight from \"../../Pieces/FIDE/Knight\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Flee_Card extends Card {\n\n    public readonly cardName = \"Flee\";\n    public readonly description = \"Your king moves to a square adjacent to a friendly piece.\";\n\n    public readonly targets = 2; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 25;\n\n    public readonly shortName = \"_Flee\";\n    public static readonly id = \"flee\";\n    public readonly id = Flee_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        if (!previousTargets || previousTargets.length === 0) board.forEach(( piece, index ) => {\n            if ( sameColour(piece, colour)\n                && Piece.getPiece(piece)?.categories.indexOf(\"King\") !== -1 ) validTargets.push(index);\n        });\n        else {\n            board.forEach(( piece, index ) => {\n                if (piece === Piece.None) {\n                    if (adjacentSquares(index).filter( adj => sameColour(colour, board[adj]) && Math.abs(board[adj]) !== Piece.King ).length > 0) validTargets.push(index);\n                }\n            });\n        }\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        let [ king, destination ] = targets;\n        game.Move( king, destination, undefined, { isCardMove: true } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {getLegalRiderMoves} from \"../../helpers/RiderMoves\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class Promotion_Card extends Card {\n\n    public readonly cardName = \"Promotion\";\n    public readonly description = \"A friendly pawn advances as far up its file as possible. If it reaches the back rank, it becomes a Rook.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 30;\n\n    public readonly shortName = \"_Prmo\";\n    public static readonly id = \"promotion\";\n    public readonly id = Promotion_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.Pawn * colour && board[ index + ( 8 * colour ) ] === Piece.None ) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            const rider = getLegalRiderMoves( game.getBoard(), target, game.getBoard()[target], [\n                p => p + ( 8 * game.getCurrentTurn() )\n            ], \"moves\" );\n            if (rider.length >= 1) { // If at least 1 rider move is generated (otherwise get an error in final.to\n                let final = rider[rider.length - 1];\n                if ( (Piece.getRank(final.to) === 7 && game.getCurrentTurn() > 0)\n                    || (Piece.getRank(final.to) === 0 && game.getCurrentTurn() < 0) ) {\n                    game.Move(target, final.to, \"PROMOTION\", {isCardMove: true, promotionTo: Piece.Rook * game.getCurrentTurn()})\n                }\n                else game.Move(target, final.to, undefined, {isCardMove: true})\n            }\n            else {\n                console.log(\"RIDER RETURNED 0 RIDER MOVES\");\n            }\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {FIDE_EXPANSION} from \"../Expansions\";\n\nexport default class BattlePlan_Card extends Card {\n\n    public readonly cardName = \"Battle Plan\";\n    public readonly description = \"Draw 3 cards\";\n\n    public readonly targets = 1; //Drag literally anywhere to play it.\n    public readonly fast = false;\n    public readonly cost = 12;\n\n    public readonly shortName = \"_BPln\";\n    public static readonly id = \"battleplan\";\n    public readonly id = BattlePlan_Card.id;\n    public readonly expac = FIDE_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach((piece, index) => validTargets.push(index));\n        return validTargets;\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        let currentCol = game.getCurrentTurn();\n        game.DrawCard(currentCol, 3)\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Anoint_Card extends Card {\n\n    public readonly cardName = \"Anoint\";\n    public readonly description = \"A friendly pawn promotes into a bishop.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 11;\n\n    public readonly shortName = \"_Anoi\";\n    public static readonly id = \"anonit\";\n    public readonly id = Anoint_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.Pawn * colour) validTargets.push(index);\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        targets.forEach( target => {\n            game.Move(target, target, \"PROMOTION\", {isCardMove: true, promotionTo: Piece.Bishop * game.getCurrentTurn()})\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Clergy_Card extends Card {\n\n    public readonly cardName = \"Clergy\";\n    public readonly description = \"Summon 2 pawns next to each other\";\n\n    public readonly targets = 2; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 15;\n\n    public readonly shortName = \"_Clrg\";\n    public static readonly id = \"clergy\";\n    public readonly id = Clergy_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        if (!previousTargets || previousTargets.length === 0) board.forEach(( piece, index ) => { /// FIRST PIECE\n            if (piece === Piece.None) {\n                /// MUST BE ADJACENT TO A FRIENDLY PIECE\n                if (adjacentSquares(index).filter( adj => sameColour(colour, board[adj]) ).length > 0) validTargets.push(index);\n            }\n        });\n        else board.forEach((piece, index) => {//Second Piece\n            if (piece === Piece.None) {\n                if (adjacentSquares(previousTargets ? previousTargets[0] : index).indexOf(index) !== -1) validTargets.push(index);\n            }\n        })\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        game.updateGameBoard( board => {\n            //board[targetSquare] = Piece.Pawn * game.getCurrentTurn() > 0 ? 1 : -1\n            targets.forEach(target => {\n                //board[target] = Piece.Pawn * game.getCurrentTurn() > 0 ? 1 : -1\n                game.Move(target, target, \"PROMOTION\", {isCardMove: true, promotionTo: Piece.Pawn * game.getCurrentTurn()})\n            })\n        });\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {differentColours, sameColour} from \"../../helpers/DifferentColours\";\nimport {filterLegalMoves} from \"../../helpers/Checks\";\nimport GamePiece from \"../../Pieces/GamePiece\";\nimport OngoingEffect from \"../../Classes/OngoingEffect\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Convert_Card extends Card {\n\n    public readonly cardName = \"Convert\";\n    public readonly description = \"Choose an enemy piece you can capture. You take control of it instead.\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = false;\n    public readonly cost = 18;\n\n    public readonly shortName = \"_Convt\";\n    public static readonly id = \"convert\";\n    public readonly id = Convert_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[], effects?:OngoingEffect[] ) => {\n        let validTargets : number[] = [];\n        board.forEach((piece, index) => {\n            if (sameColour(piece, colour)) {\n                if (Piece.getPiece(piece)) {\n                    filterLegalMoves(\n                        (Piece.getPiece(piece) as GamePiece).getLegalMoves(index, board, \"captures\", colour, history),\n                        board, history, colour, effects || ([] as OngoingEffect[])\n                    ).forEach((capture) => {\n                        validTargets.push(capture.to)\n                    })\n                }\n            }\n        })\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        // let targetSquare = targets[0]; //Only have one target\n        game.updateGameBoard( board => {\n            targets.forEach(target => {\n                board[target] = -board[target];\n            })\n        } )\n    }\n}","import Card from \"../Card\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport Game from \"../../Classes/Game\";\nimport {sameColour} from \"../../helpers/DifferentColours\";\nimport {adjacentSquares} from \"../../helpers/Adjacency\";\nimport {CRUSADER_EXPANSION} from \"../Expansions\";\n\nexport default class Envoy_Card extends Card {\n\n    public readonly cardName = \"Envoy\";\n    public readonly description = \"Summon a dummy pawn that cannot capture or promote adjacent to a friendly piece\";\n\n    public readonly targets = 1; //Simply choose a square\n    public readonly fast = true;\n    public readonly cost = 5;\n\n    public readonly shortName = \"_Envy\";\n    public static readonly id = \"envoy\";\n    public readonly id = Envoy_Card.id;\n    public readonly expac = CRUSADER_EXPANSION;\n\n    public readonly unMoveType = \"boardState\" as \"boardState\";\n\n    public getValidTargets = [( board: number[], colour:number, history:ActualMove[], previousTargets?:number[] ) => {\n        let validTargets : number[] = [];\n        board.forEach(( piece, index ) => {\n            if (piece === Piece.None) {\n                if (adjacentSquares(index).filter( adj => sameColour(colour, board[adj]) ).length > 0) validTargets.push(index);\n            }\n        });\n        return validTargets.filter(target => !previousTargets || previousTargets.length === 0 || previousTargets.indexOf(target) === -1);\n    }]\n\n    public playCard = ( targets: number[], game: Game ) => {\n        game.updateGameBoard( board => {\n            targets.forEach(target => {\n                board[target] = Piece.DummyPawn * (game.getCurrentTurn() > 0 ? 1 : -1)\n            })\n        });\n    }\n}","///\n/// COMPARING MOVES\n///\n\nimport CardMove from \"../Classes/CardMove\";\nimport ActualMove from \"../Classes/Move\";\n\nconst areIdenticalMoves = (...moves: (ActualMove|CardMove)[] ) => {\n    let first = moves[0]\n    for ( let move of moves ) {\n        //See if it's the same move\n        if (move instanceof ActualMove && first instanceof ActualMove){\n            if ( move.to !== first.to || move.from !== first.from || move.moving !== first.moving ||\n                move.captured !== first.captured || move.special !== first.special ) return false;\n        }\n        else if ( move instanceof CardMove && first instanceof CardMove ) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport {\n    areIdenticalMoves\n}"," import GamePiece from \"../GamePiece\";\nimport {Move, legalMove, SpecialMove, tag} from \"../../types\";\nimport {getLegalRiderMoves, getLegalSingleMoves} from \"../../helpers/RiderMoves\";\nimport Piece from \"../../Classes/Piece\";\nimport ActualMove from \"../../Classes/Move\";\nimport { pawnGrid } from \"../ValueGrids\";\n\nexport default class Pawn extends GamePiece {\n\n    //eval\n    public materialValue = 1;\n    public engineValue = 100;\n    public valueGrid = pawnGrid;\n    public evaluate = ( p : number ) => this.engineValue;\n\n    //naming & display\n    public shortName = Pawn.shortName;\n    public longName = Pawn.longName;\n    public static shortName = \"P\";\n    public static longName = \"Pawn\";\n\n    public movesDescription = \"Moves one square directly forward, and captures one square diagonally forward.\"\n    public specialMoves = [\n        \"Can move two squares at once if on your second rank.\",\n        \"If an opposing pawn moves two squares at once, can capture that pawn by \\\"capturing\\\" the square it skipped over.\"\n    ]\n    public notes = \"Upon reaching the final rank, pawns can promote into another piece in the game.\"\n    public categories = [ \"Minor\", \"Pawn\" ] as tag[];\n\n    public getLegalMoves : ( position : number,  board : number[], mode : \"all\" | \"moves\" | \"captures\", colour : number, history : ActualMove[]) => legalMove[] = ( position, board, mode, colour = 1, history ) => {\n        //Let's use this as a test for the legal rider moves\n\n        let moves = [] as legalMove[]\n\n        // PAWN MOVES\n        if ( mode !== \"captures\" ) {\n            if ( Piece.getRank( position ) === 1 || Piece.getRank( position ) === 6 ) moves.push(...getLegalRiderMoves(\n                board, position, Piece.Pawn * colour, [\n                    p => colour > 0 ? p + 8 : p - 8\n                ], \"moves\", 2\n            ).map( m => Math.abs( m.from - m.to ) === 16 ? { ...m, special : \"DOUBLE\" as SpecialMove } : m ))\n            else moves.push(...getLegalSingleMoves(\n                board, position, Piece.Pawn * colour, [\n                    p => colour > 0 ? p + 8 : p - 8\n                ], \"moves\"\n            ))\n        }\n\n        // PAWN CAPTURES\n        if ( mode !== \"moves\" ) {\n            moves.push(...getLegalSingleMoves(\n                board, position, Piece.Pawn * colour, colour > 0 ? [\n                    p => Piece.getFile(position) !== 0 ? p + 7 : p, //Capturing for White\n                    p => Piece.getFile(position) !== 7 ? p + 9 : p,\n                ] : [\n                    p => Piece.getFile(position) !== 0 ? p - 9 : p, //Capturing for White\n                    p => Piece.getFile(position) !== 7 ? p - 7 : p,\n                ], \"captures\"\n            ))\n\n            //IF THE LAST MOVE WAS A PAWN DOUBLE MOVE\n            if ( history.length > 0 && history[ history.length - 1 ].special === \"DOUBLE\" ) {\n                let lastMove = history[history.length - 1];\n                if ( lastMove.to === position + 1 && Piece.getFile(position) !== 7 ) moves.push({\n                    from: position, to: colour > 0 ? position + 9 : position - 7, special: \"EP\"\n                });\n                else if ( lastMove.to === position - 1 && Piece.getFile(position) !== 0 ) moves.push({\n                    from: position, to:  colour > 0 ? position + 7 : position - 9, special: \"EP\"\n                });\n\n            }\n\n        }\n\n        return moves;\n\n    }\n}\n\n\n\n","import React, {useContext, useEffect, useLayoutEffect, useRef, useState} from 'react';\nimport ChessBoard from \"./components/ChessBoard/ChessBoard\";\nimport Game, {AdditionalOptions} from \"./Classes/Game\";\nimport MovesDisplay from \"./components/MovesDisplay/MovesDisplay\";\nimport ActualMove from \"./Classes/Move\";\nimport {GameInfo, SpecialMove} from \"./types\";\nimport {filterLegalMoves, isCheck} from \"./helpers/Checks\";\nimport {generateBoardFromArmies} from \"./helpers/BoardGenerators\";\nimport Board from \"./Classes/Board\";\nimport GameOverUI from \"./components/GameOverUI/GameOverUI\";\nimport \"./App.css\"\nimport {areIdenticalMoves} from \"./helpers/CompareMoves\";\nimport Piece from \"./Classes/Piece\";\n\n//Opponent Web Worker\nimport * as Comlink from 'comlink';\n\nimport {useParams} from \"react-router-dom\";\nimport {GAME_KEY} from \"./KEYS\";\nimport {Army, DEV_ARMY, FIDEARMY} from \"./Presets/Armies\";\nimport PlayableCard from \"./components/PlayableCard/PlayableCard\";\nimport CardMove from './Classes/CardMove';\nimport {getActualMoves} from './helpers/MoveFilter';\nimport Card from \"./Cards/Card\";\nimport {Deck, DEV_DECK, FIDEDECK} from \"./Presets/Decks\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport {sameColour} from \"./helpers/DifferentColours\";\nimport ConnectionContext from \"./Context/ConnectionContext\";\nimport Message, {CardMove_Message, PieceMove_Message} from \"./Messages\";\nimport ALL_CARDS from \"./Cards/Cards\";\n\n\nconst CHECKMATE = \"via Checkmate\",\n    STALEMATE = \"via Stalemate\",\n    REPETITION = \"via Move Repetition\",\n    FIFTYMOVE = \"via the Fifty-move rule\";\n\n//The main component\nfunction App() {\n\n  ///\n  /// GAME START DATA\n  ///\n  const { uuid } = useParams<{ uuid : string }>();\n  const [{ colour : playerColour, opponent, army, opponentArmy, deck, opponentDeck } ] = useState(() => {\n    const rawGamesData = localStorage.getItem(GAME_KEY) || \"{}\";\n    const parsedGamesData = JSON.parse(rawGamesData) as { [uuid : string]: GameInfo };\n    const thisGame = parsedGamesData[uuid];\n    try {\n      thisGame.army = JSON.parse(thisGame.army);\n      thisGame.opponentArmy = JSON.parse(thisGame.opponentArmy);\n      thisGame.deck = JSON.parse(thisGame.deck);\n      thisGame.opponentDeck = JSON.parse(thisGame.opponentDeck);\n    }\n    catch (e) {\n      console.log(e)\n    }\n    return thisGame as GameInfo & { army : Army, opponentArmy : Army, deck: Deck, opponentDeck: Deck } || {\n      colour: 1,\n      opponent: uuid === \"fiesta\" ? \"COMP\" : \"LOCAL\",\n      army: uuid === \"dev-playground\" ? DEV_ARMY : FIDEARMY,\n      opponentArmy: uuid === \"dev-playground\" ? DEV_ARMY : FIDEARMY,\n      deck: \"dev-playground\" ? DEV_DECK : FIDEDECK,\n      opponentDecl: \"dev-playground\" ? DEV_DECK : FIDEDECK\n    }\n  })\n\n  ///\n  /// USED FOR DEVELOPMENT PURPOSES\n  ///\n  // const [ opponent ] = useState(false); //THIS DISABLES THE AI AND LETS YOU MOVE BOTH COLOUR PIECES\n\n\n  ///  THE REFERENCE FOR THE GAME\n  const game = useRef( playerColour > 0 ? new Game(generateBoardFromArmies(army, opponentArmy), undefined, deck, opponentDeck) :\n                        new Game(generateBoardFromArmies(opponentArmy, army), undefined, opponentDeck, deck));\n\n  /// THE OPPONENT\n  const worker = useRef<any>()\n\n  // Webworker setup\n  useLayoutEffect(() => {\n    // If we're against a computer opponent, creates the webworker\n    if ( opponent === \"COMP\" ) {\n      // Creates the WebWorker\n      const _worker = new Worker('./WebWorker', { name: 'opponent-webworker', type: 'module' });\n      worker.current = Comlink.wrap<import('./WebWorker').opponentWebWorker>(_worker);\n\n      console.log(\"Creating worker!\");\n    }\n    else {\n      console.log(\"Not against a computer opponent\")\n    }\n    //We also want to do this. Don't ask why, otherwise shit breaks.\n    document.body.style.display = \"none\";\n    setTimeout(() => {\n      document.body.style.display = \"unset\";\n    }, 0)\n  }, [])\n\n  //The Game\n  const [ board, setBoard ] = useState<number[]>( game.current.getBoard() );\n  const [ currentTurn, setCurrentTurn ] = useState<number>( game.current.getCurrentTurn() );\n  const [ moves, setMoves ] = useState<(ActualMove|CardMove)[]>( game.current.getMoves() );\n\n  //Ending the game\n  const [ winner, setWinner ] = useState<number>(0); //1 for white win, -1 for black win, 0 for draw\n  const [ gameOver, setGameOver ] = useState<boolean>(false);\n  const [ gameOverMsg, setGameOverMsg ] = useState<string>(STALEMATE);\n\n  // Plays an audio effect when the game ends\n  useEffect(() => {\n    if (gameOver) {\n      ///PLAYS AUDIO\n      let audio = new Audio( \"/assets/Sounds/8bit-game-over.mp3\" );\n      audio.play().then();\n    }\n  }, [gameOver])\n\n  ///\n  /// OPPONENT AI\n  ///\n  const beginBackgroundEvaluation = async () => {\n\n    if (uuid === \"fiesta\") return;\n    const { beginBackgroundEvaluation } = worker.current;\n\n    let gMoves = game.current.getMoves();\n    let gBoard = game.current.getBoard();\n\n    let parsedMoves = getActualMoves(gMoves).map(\n        ({ from, to, moving, captured, special, specify }) => {\n          return {\n            from, to, moving, captured, special, specify\n          } })\n\n    beginBackgroundEvaluation( [...gBoard], parsedMoves, opponentArmy.pieces, { colour: -1 } )\n\n  }\n\n  const endBackgroundEvaluation = async () => {\n\n    const { endBackgroundEvaluation } = worker.current;\n\n    endBackgroundEvaluation()\n\n  }\n\n  const generateRandomMove = async ( col:number = -playerColour ) => {\n    // const { MoveGenerator } = wrap<import(\"./WebWorker/worker\").OpponentWebWorker>(worker.current)\n    const { moveGenerator } = worker.current;\n\n    let gMoves = game.current.getMoves();\n    let gBoard = game.current.getBoard();\n\n    let parsedMoves = getActualMoves(gMoves).map(\n        ({ from, to, moving, captured, special, specify }) => {\n          return {\n              from, to, moving, captured, special, specify\n        } });\n\n    let parsedEffects = game.current.getCurrentOngoingEffects().map(effect => {\n      return {\n        square: effect.getSquare(), name: effect.getName(), target: effect.getTarget(), duration: effect.getDurationRemaining()\n      }\n    })\n\n    let hand = playerColour > 0 ? game.current.getBlackHand() : game.current.getWhiteHand();\n    let parsedHand = hand.map(card => card.id)\n\n    return await moveGenerator( [...gBoard], parsedMoves, opponentArmy.pieces, col, parsedEffects, parsedHand, { colour: col })\n  }\n\n\n  ///\n  /// ONLINE OPPONENT\n  ///\n\n  const {Channel, Conn} = useContext(ConnectionContext);\n\n  useEffect(() => {\n    if (opponent === \"ONLINE\" && Channel) {\n      Channel.addEventListener(\"message\", onMessage)\n      return () => {\n          Channel.removeEventListener(\"message\", onMessage);\n      }\n    }\n  }, [Channel, Conn])\n\n  const onMessage = (msgEvent:MessageEvent) => {\n    let msg = JSON.parse(msgEvent.data) as Message;\n    switch (msg.msgType) {\n      case \"piece_move\":\n        console.log(\"Made a piece move!\\n\", msg.payload);\n        let {from, to, special} = (msg as PieceMove_Message).payload.move;\n        try {\n          move(from, to, special, msg.payload.additional )\n        }\n        catch (e) {\n          console.log(e);\n        }\n        break;\n      case \"card_move\":\n        console.log(\"Made a card move!\\n\", msg.payload);\n        let {id, targets} = (msg as CardMove_Message).payload;\n        try {\n          // We want to play the card, but not send a message! (Since the opponent played the card once, we don't want to tell them we just played it)\n          playCard(id, targets, false);\n        }\n        catch (e) {\n          console.log(e);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n\n  ///\n  /// GAME STATE - CAPTURES, MOVES, GAME OVER\n  ///\n  const [ whiteCaptured, setWhiteCaptured ] = useState<number[]>([]);\n  const [ blackCaptured, setBlackCaptured ] = useState<number[]>([]);\n  const capturePiece = ( p : number ) => {\n    if ( p > 0 ) setBlackCaptured( prev => [...prev, p] ); //If a white piece was captured, add to black's captures\n    else if ( p < 0 ) setWhiteCaptured( prev => [...prev, p] ); //If black piece, add to white's captures\n  }\n\n  const isGameOver : ( col: number ) => void = ( col )  => {\n\n    let gMoves = game.current.getMoves();\n    let gBoard = game.current.getBoard();\n    let gEffects = game.current.getCurrentOngoingEffects();\n\n    ///CHECK FOR THREEFOLD REPETITION\n    if ( gMoves.length >= 12 ) {\n      let recentMoves = gMoves.slice( gMoves.length - 12, gMoves.length );\n      if ( areIdenticalMoves( recentMoves[0], recentMoves[4], recentMoves[8] ) ) {\n        if ( areIdenticalMoves( recentMoves[1], recentMoves[5], recentMoves[9] ) ) {\n          if (areIdenticalMoves( recentMoves[2], recentMoves[6], recentMoves[10] )) {\n            if (areIdenticalMoves(recentMoves[3], recentMoves[7], recentMoves[11])) {\n              //Threefold repetition baby lets go\n              setGameOver(true);\n              setWinner(0);\n              setGameOverMsg(REPETITION);\n            }\n          }\n        }\n      }\n    }\n\n    /// CHECK FOR FIFTY-MOVE RULE\n    if ( gMoves.length >= 100 ) {\n      let recentMoves = gMoves.slice( gMoves.length - 100, gMoves.length );\n      let pawnMoves = getActualMoves(recentMoves).filter(m => Math.abs( m.moving ) === Piece.Pawn );\n      let captures = getActualMoves(recentMoves).filter(m => m.captured !== 0 );\n      if ( pawnMoves.length === 0 && captures.length === 0 ) {\n        setGameOver(true);\n        setWinner(0);\n        setGameOverMsg(FIFTYMOVE)\n      }\n    }\n\n    let moves = Board.getLegalMoves( gBoard, getActualMoves(gMoves), { colour: -col } );\n    let legalMoves = filterLegalMoves( moves, gBoard, getActualMoves(gMoves), -col, gEffects )\n    if ( legalMoves.length === 0 ) {\n      ///THERE ARE NO LEGAL MOVES!\n      //The game is now over\n      setGameOver(true);\n      if ( isCheck( gBoard, getActualMoves(gMoves), -col ) ) {\n        //Is in check - checkmate! Set a winner!\n        setWinner( col > 0 ? 1 : -1 )\n        setGameOverMsg( CHECKMATE );\n      }\n      else {\n        //Not in check - it is a stalemate!\n        setWinner(0);\n        setGameOverMsg( STALEMATE ); //The game is now over\n      }\n    }\n\n  }\n\n  const move = ( from : number, to : number, special?: SpecialMove, additional:  Partial<AdditionalOptions> = {} ) => {\n    //When we make our move, stop performing background calculations\n\n    let col = game.current.getBoard()[from] > 0 ? 1 : -1; // The colour of the piece that was just moved\n    if ( col === playerColour ) endBackgroundEvaluation();\n\n    ///PLAYS AUDIO\n    let audio = new Audio( \"/assets/Sounds/wooden-piece-move.mp3\" );\n    audio.play();\n\n\n    let captured = special === \"EP\" ? game.current.getBoard()[to - (8 * col )] : game.current.getBoard()[to];\n\n    if (captured !== Piece.None) {\n      console.log(`CAPTURING A ${ captured }`)\n      capturePiece(captured);\n    }\n\n    game.current.Move( from, to, special, additional );\n\n\n    /// CHECK TO SEE IF THE GAME IS OVER\n    isGameOver( col );\n\n    setMoves( [...game.current.getMoves()] );\n    setBoard( [...game.current.getBoard()] );\n\n    // If we're playing online and WE just made a move, send it to the opponent\n    if ( opponent === \"ONLINE\" && col === playerColour && Channel ) {\n      let data = {\n        move: { from, to, special },\n        additional\n      };\n      let msg = new PieceMove_Message(data);\n      Channel.send(JSON.stringify(msg));\n    }\n\n\n    //Set the timer for the next turn to begin\n    //If we aren't rotating, then there is no reason for there to be any delay\n    if ( !allowRotation ) {\n      setCurrentTurn( game.current.getCurrentTurn() )\n    }\n    else {\n      //We're rotating.\n      setMoveLockout(true);\n      setTimeout(() => {\n        //After a delay, change the turn, and allow moves once again.\n        setCurrentTurn(game.current.getCurrentTurn())\n        setMoveLockout(false);\n      }, 500);\n    }\n\n\n    //IF NOT, THE OPPONENT PLAYS A MOVE\n    setTimeout(() => {\n      if ( !gameOver\n          && ( game.current.getCurrentTurn() === -playerColour || uuid === \"fiesta\")\n          && opponent === \"COMP\" ) {\n        generateRandomMove( game.current.getCurrentTurn() )\n            .then(\n                ( m ) => {\n                  if (!gameOver && m) try {\n                    if (m.move) {\n                      move(m.move.from, m.move.to, m.move.special, m.additional)\n                    }\n                    else if ( m.id && m.targets ) {\n                      playCard( m.id, m.targets )\n                    }\n                    beginBackgroundEvaluation()\n                    //When we make this move, begin performing background calculations\n                  }\n                  catch (e) {\n                    console.log(e);\n                    console.log(m)\n                  }\n                }\n            )\n      }\n\n    }, 0)\n  };\n\n  ///\n  /// MOVE LOCKOUT WITH ROTATION\n  /// + For smooth rotation between turns, moves must be temporarily locked out\n  ///\n  const [ moveLockout, setMoveLockout ] = useState<boolean>(false);\n  const [ allowRotation, setAllowRotation ] = useState<boolean>(true);\n\n  ///\n  /// OPPONENT MAKING THE FIRST MOVE\n  ///\n  useEffect(() => {\n    if ( opponent === \"COMP\" && playerColour === -1 ) {\n      //We're playing as black against a computer - computer must make the first move!\n      console.log(\"Generating opening move\");\n      generateRandomMove()\n        .then(\n          m => {\n            if (m) try {\n              move( m.move.from, m.move.to, m.move.special, m.additional );\n              beginBackgroundEvaluation().then(() => {});\n            }\n            catch (e) {\n              console.log(e);\n              console.log(m);\n            }\n          }\n        )\n    }\n\n  }, [])\n\n  const unMove = () => {\n    let lastMove = game.current.getLastMove();\n    if ( !lastMove ) return;\n    game.current.UnMove();\n    setBoard( [...game.current.getBoard()] );\n    setMoves( [...game.current.getMoves()] );\n    setCurrentTurn( game.current.getCurrentTurn() );\n    if ( lastMove instanceof ActualMove ) {\n      if ( whiteCaptured.length > 0 && lastMove.captured === whiteCaptured[whiteCaptured.length - 1] ) {\n        //If white captured a piece, un-capture it!\n        setWhiteCaptured( prev => prev.slice(0, prev.length - 1)  );\n      }\n      else if ( blackCaptured.length > 0 && lastMove.captured === blackCaptured[blackCaptured.length - 1] ) {\n        //If black captured a piece, un-capture it!\n        setBlackCaptured( prev => prev.slice(0, prev.length - 1)  );\n      }\n    }\n  }\n\n  ///\n  /// CARD TARGETING\n  ///\n  const [ cardTargetingIndex, setCardTargetingIndex ] = useState<number|null>(null);\n  const [ cardTargetsRemaining, setCardTargetsRemaining ] = useState<number>(0);\n  const [ cardTargets, setCardTargets ] = useState<number[]>([] as number[]);\n\n  const dragStartCallback = ( index : number ) => {\n    setCardTargetingIndex( index );\n    setCardTargets([]);\n    console.log(`Card drag started on ${ index }, card ${ game.current.getCurrentPlayerHand()[index].cardName }`);\n\n    //make the user's hand lower\n    let hand = document.getElementById(\"PlayerHand\");\n    if (hand) hand.className = \"forceLower\";\n  };\n\n  const onDragEnd = () => {\n    console.log(`Drag ended, ${ cardTargetsRemaining } remaining`);\n    endTargeting();\n  }\n\n  const appendCardTarget = ( card: string, target: number ) => {\n    let targetsRemaining = cardTargetsRemaining, targets = cardTargets;\n    if ( cardTargetsRemaining <= 0 && cardTargetingIndex !== null ) targetsRemaining = game.current.getCurrentPlayerHand()[cardTargetingIndex].targets; //Initialises if not set\n    //We want to decrement the number of targets left\n    targetsRemaining--;\n    console.log(`APPEND CARD TARGET - ${ targetsRemaining } remaining of ${ game.current.getCurrentPlayerHand()[cardTargetingIndex || 0].targets }`)\n    //Push this target to the array of targets\n    targets.push(target);\n    setCardTargetsRemaining(targetsRemaining);\n    setCardTargets(targets);\n    if ( targetsRemaining === 0 ) {\n      playCard(card, targets);\n      endTargeting(targetsRemaining);\n    }\n  }\n\n  const endTargeting = ( targetsRemaining = cardTargetsRemaining ) => {\n    console.log(`Ending targeting with ${ targetsRemaining } remaining`)\n    if (targetsRemaining === 0) setCardTargetingIndex(null);\n    //make the user's hand lower\n    let hand = document.getElementById(\"PlayerHand\");\n    if (hand) hand.className = \"\";\n  }\n\n  const playCard = ( card: string, targets: number [], sendMessage:boolean = true) => {\n\n    //Gets the card from the hand\n    let playedCard;\n    if (cardTargetingIndex) {\n      playedCard = currentTurn > 0 ? game.current.getWhiteHand()[cardTargetingIndex||0] : game.current.getBlackHand()[cardTargetingIndex||0];\n    }\n    else {\n      playedCard = game.current.getCurrentPlayerHand()[ game.current.getCurrentPlayerHand().map( c => c.id ).indexOf(card) ]\n    }\n\n    if (opponent === \"ONLINE\" && !sendMessage) {\n      playedCard = ALL_CARDS[card]; // We don't know what the opponent's hand is in this case, so get it from the IDs\n      //Remove a card from the opponent's hand. Doesn't matter which, only used for tracking hand size.\n      if (currentTurn > 0) game.current.setWhiteHand( hand => {\n          return hand.filter((card, i) => i !== 0); //Removes the first card.\n        })\n\n      else game.current.setBlackHand( hand => {\n          return hand.filter((card, i) => i !== 0); //Removes the first card.\n        })\n    }\n\n    //Play the card\n    let cardPlayerCol = currentTurn;\n    game.current.PlayCard( playedCard, targets );\n    let col = game.current.getCurrentTurn();\n\n\n    /// CHECK TO SEE IF THE GAME IS OVER\n    isGameOver( col );\n    isGameOver( -col );\n\n    setMoves(game.current.getMoves());\n    setBoard(game.current.getBoard());\n\n    // If we're playing online and WE just played a card, send it to the opponent!\n    console.log(opponent, col, playerColour, Channel);\n    if ( opponent === \"ONLINE\" && Channel &&  sendMessage ) {\n        let data = {\n         id: card,\n         targets\n        };\n        console.log(\"Sending a card message!\")\n        let msg = new CardMove_Message(data);\n        Channel.send(JSON.stringify(msg))\n    }\n\n    console.log(game.current.getCurrentTurn(), currentTurn)\n    setTimeout(() => {\n      console.log(game.current.getCurrentTurn(), currentTurn)\n    }, 1000)\n    //Handles turn switching\n    if (!playedCard.fast) {\n      //Set the timer for the next turn to begin\n      //If we aren't rotating, then there is no reason for there to be any delay\n      if ( !allowRotation ) {\n        setCurrentTurn( game.current.getCurrentTurn() )\n      }\n      else {\n        //We're rotating.\n        setMoveLockout(true);\n        setTimeout(() => {\n          //After a delay, change the turn, and allow moves once again.\n          setCurrentTurn(game.current.getCurrentTurn())\n          setMoveLockout(false);\n        }, 500);\n      }\n    }\n    setTimeout(() => {\n      if ( !gameOver\n          && ( game.current.getCurrentTurn() === -playerColour || uuid === \"fiesta\")\n          && opponent === \"COMP\" ) {\n        generateRandomMove( game.current.getCurrentTurn() )\n            .then(\n                ( m ) => {\n                  if (!gameOver && m) try {\n                    if (m.move) {\n                      move(m.move.from, m.move.to, m.move.special, m.additional)\n                    }\n                    else if ( m.id && m.targets ) {\n                      playCard( m.id, m.targets )\n                    }\n                    beginBackgroundEvaluation()\n                    //When we make this move, begin performing background calculations\n                  }\n                  catch (e) {\n                    console.log(e);\n                    console.log(m)\n                  }\n                }\n            )\n      }\n\n    }, 0)\n  }\n\n  ///\n  /// CHAOS VALUE\n  ///\n  const getChaosValue = () => blackCaptured.reduce((prev, current) => prev + (Piece.getPiece(current)?.materialValue || 0), 0) +\n      whiteCaptured.reduce((prev, current) => prev + (Piece.getPiece(current)?.materialValue || 0), 0);\n\n  ///\n  /// HAND DISPLAY\n  ///\n  const getHandCards = () => {\n    const hand = opponent === \"LOCAL\" ? ( currentTurn > 0 ? game.current.getWhiteHand() : game.current.getBlackHand()  ) : (playerColour > 0 ? game.current.getWhiteHand() : game.current.getBlackHand())\n    const handSize = hand.length ;\n    const cardMapping = ( card : Card, i : number ) =>\n        <PlayableCard draggable={!moveLockout && (getChaosValue() >= card.cost || uuid === \"dev-playground\") && !isCheck( board, getActualMoves(moves), currentTurn ) && ( opponent === \"LOCAL\" || sameColour(playerColour, currentTurn) )} card={card}\n                      dragStartCallback={() => dragStartCallback(i)}\n                      dragEndCallback={onDragEnd} handPosition={i + 1} handSize={handSize}/>\n    return hand.map(cardMapping)\n  }\n\n\n\n  return <div className=\"app paddedTop\">\n\n\n    <div className=\"boardLeftColumn\">\n    </div>\n    <div className={`chessBoardColumn ${ gameOver ? \"gameOver\" : \"playing\" }`}>\n      <ChessBoard board={ board } currentTurn={ currentTurn } move={ move } unMove={ unMove } moves={moves}\n                  whiteCaptured={ whiteCaptured } blackCaptured={ blackCaptured } capturePiece={ capturePiece }\n                  whiteArmy={ playerColour > 0 ? army.pieces : opponentArmy.pieces } blackArmy={ playerColour < 0 ? army.pieces : opponentArmy.pieces }\n                  playerColour={ playerColour } cardTargetingIndex={cardTargetingIndex} game={game.current}\n                  opponent={opponent} gameUUID={ uuid }\n                  allowRotation={allowRotation} setAllowRotation={ v => setAllowRotation(v) } moveLockout={moveLockout}\n                  playCard={appendCardTarget} cardTargetsRemaining={cardTargetsRemaining} currentTargets={cardTargets}\n      />\n    </div>\n    <div className=\"boardRightColumn\">\n      <p className=\"playerToMove\">{ game.current.getCurrentTurn() > 0 ? \"White\" : \"Black\" } to move</p>\n      <MovesDisplay moves={ moves } unMove={ unMove } canUndo={ opponent === \"LOCAL\" }/>\n    </div>\n    <div id=\"PlayerHand\">\n      <div id=\"PlayerHandInner\">\n        {\n          getHandCards()\n        }\n      </div>\n    </div>\n\n\n    <NavBar/>\n\n\n    { gameOver ?  <GameOverUI message={gameOverMsg} winner={winner}/> : null}\n\n  </div>\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport CardMove from '../../Classes/CardMove';\nimport ActualMove from \"../../Classes/Move\";\nimport \"./MovesDisplay.css\";\n\ninterface props {\n    moves : (ActualMove | CardMove)[],\n    unMove : () => void,\n    canUndo: boolean\n}\n\nexport default function MovesDisplay({ moves, unMove, canUndo } : props ) {\n\n    return <>\n        <div id=\"BoardMovesDisplay\">\n            {\n                moves.map(\n                    ( move, i ) => <p className=\"move\" key={ move instanceof ActualMove ?  `${move.from}${move.to}${i}` : `${move.cardName}${i}`}>\n                        <span>{ move.getMoveName() }</span>\n                    </p>\n\n                )\n            }\n            {\n                !canUndo ? null :\n                    <button className=\"unMakeMove\" onClick={unMove}>\n                        UnMove!\n                    </button>\n            }\n        </div>\n    </>\n\n}","import React, {useEffect, useState} from 'react';\nimport \"./GameOverUI.css\";\n\ninterface Props {\n    winner : number,\n    message : string\n}\n\nexport default function GameOverUI( { winner, message } : Props ) {\n\n    const [ shown, setShown ] = useState(false)\n\n    useEffect(() => {\n        setTimeout(() => setShown(true), 500)\n    })\n\n    const getScoreMessage = () => {\n        switch (winner) {\n            case 1:\n                return \"1-0\"\n            case -1:\n                return \"0-1\"\n            case 0:\n            default:\n                return \"0.5-0.5\"\n        }\n    }\n\n    const getWinnerMessage = () => {\n        switch (winner) {\n            case 1:\n                return \"White wins\"\n            case -1:\n                return \"Black wins\"\n            case 0:\n            default:\n                return \"Draw\"\n        }\n    }\n\n    const onPlayAgain = () => {\n        window.location.reload()\n    }\n\n    return <div id=\"GameOverUI\" className={ `${winner < 0 ? \"black\" : \"white\"} ${ shown ? \"shown\" : \"hidden\" }` } >\n        <div id=\"GameOverHeader\">\n            <h2 className=\"scoreMessage\">{ getScoreMessage() }</h2>\n            <p className=\"winnerMessage\">{ getWinnerMessage() }</p>\n        </div>\n        <div id=\"GameOverBody\">\n            <p>{ message }</p>\n        </div>\n\n        <button onClick={ onPlayAgain } >Play Again?</button>\n    </div>\n\n}","import React, {useLayoutEffect, useRef, useState} from \"react\";\nimport \"./PlayableCard.css\";\nimport Card from \"../../Cards/Card\";\n\ninterface props {\n    card: Card,\n    handPosition: number,\n    handSize: number,\n    dragStartCallback: () => void,\n    dragEndCallback: () => void,\n    draggable: boolean\n}\n\n\nexport default function PlayableCard(props: props) {\n\n    const cardRef = useRef<HTMLDivElement>(null);\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const onDragStart = ( e : React.DragEvent ) => {\n        //Fired when the dragging starts\n        if ( e.dataTransfer ) {\n            props.dragStartCallback();\n            e.dataTransfer.setData( \"text/plain\", props.card.id )\n        }\n    }\n\n    const onDragEnd = () => {\n        props.dragEndCallback();\n    }\n\n    useLayoutEffect(() => {\n        if (containerRef.current) {\n            ///\n            /// Handles position while idle in hand\n            ///\n            let minRotation = -30, maxRotation = 30, oddHand = props.handSize % 2 !== 0\n            let centreOfHandStart = Math.ceil( props.handSize / 2 );\n            let centreOfHandEnd = oddHand ? centreOfHandStart : centreOfHandStart + 1;\n            let closestPoint = props.handPosition <= centreOfHandStart ? centreOfHandStart : centreOfHandEnd;\n            let currentRotation = 5 * ( props.handPosition - closestPoint );\n            if (currentRotation === 0 && !oddHand) currentRotation += props.handPosition === centreOfHandStart ? -2.5 : 2.5\n\n            containerRef.current.style.transform = `rotateZ(${currentRotation}deg) translateY(${Math.abs((currentRotation * 5)) - 20}px)`;\n        }\n    }, [props.handPosition, props.handSize])\n\n    return <div ref={containerRef}\n                draggable={props.draggable}\n                onDragStart={ e => onDragStart(e) }\n                onDragEnd={ () => onDragEnd() }\n                className={`playableCardContainer ${props.draggable ? \"drag\" : \"noDrag\"}`}>\n        <div ref={cardRef} className=\"playableCard\">\n            <div className=\"cardChaosScore\">\n                <div className=\"score\">{ props.card.cost }</div>\n                <div className=\"speed\">{ props.card.fast ? \"Fast\" : \"\" }</div>\n            </div>\n            <div className=\"cardTitle\">\n                { props.card.cardName }\n            </div>\n            <div className=\"cardDescription\">\n                { props.card.description }\n            </div>\n            <div className=\"cardExpac\">\n                {props.card.expac}\n            </div>\n        </div>\n    </div>\n\n}","import \"./ChessSquare.css\";\nimport React from 'react';\nimport {FILES} from \"../../types\";\nimport Piece from \"../../Classes/Piece\";\n\ninterface props {\n    position: number,\n    highlight : boolean,\n    rotated : boolean,\n    moveCircle: boolean\n    border?: boolean\n}\n\nexport default function ChessSquare( { position, highlight, rotated, moveCircle = false, border = false } : props ) {\n\n    const getCol = () => {\n        if ( ( 7 * Piece.getRank(position) + Piece.getFile(position) ) % 2 === 1 ) return \"light\";\n        else return \"dark\"\n    }\n\n    const getLabel = () => {\n        const labels = [];\n        if ( Piece.getRank(position) === 0 ) { //We show the file if on the first rank\n            labels.push( <span className=\"sqLabel bottom\" key=\"file\">{ FILES[ Piece.getFile(position) ] }</span> )\n        }\n        if ( Piece.getFile(position) === 0 ) { //And we show the rank if on the first file\n            labels.push( <span className=\"sqLabel left\" key=\"rank\">{ Piece.getRank(position) + 1 }</span> )\n        }\n\n        return labels;\n    }\n\n    return <div style={Piece.getStyle( position, rotated )}\n                className={`chessSquare ${ getCol() } ${ moveCircle ? \"moveCircle\" : \"\" } ${ border ? \"border\" : \"\" }`}\n                id={ `square-${ Piece.getSquareName(position) }` }\n                key={ `square-${ Piece.getSquareName(position) }` }>\n        {\n            getLabel()\n        }\n        {\n            highlight ? <div className=\"highlight\"/> : null\n        }\n    </div>\n\n}","import React, {useEffect, useLayoutEffect, useRef} from 'react';\nimport \"./ChessPiece.css\";\nimport Piece from \"../../Classes/Piece\";\n\ninterface props {\n    position : number,\n    piece : number,\n    target: ( source: TargetingType ) => void,\n    unTarget: ( source : TargetingType ) => void,\n    onHover: () => void,\n    onUnHover: () => void,\n    onRightClick: ( id : string ) => void,\n    active : boolean,\n    id : string,\n    draggable : boolean,\n    clickable: boolean,\n    rotated: boolean\n}\n\ntype TargetingType = \"piece-click\" | \"piece-drag\" | \"card-drag\" | \"card-click\";\n\n\nexport default function ChessPiece({position, piece, target, unTarget, onHover, onUnHover, active, id, draggable, rotated, onRightClick}:props) {\n\n    let oldPos = useRef<number>(position);\n\n    let pieceEl = useRef<HTMLDivElement>(null);\n    let imgRef = useRef<HTMLImageElement>(null);\n\n    useLayoutEffect(() => {\n        if (pieceEl.current) {\n            let el = pieceEl.current\n\n            ///We want to get the difference in ranks and files\n            let verticalDiff = Piece.getFile(position) - Piece.getFile(oldPos.current);\n            let horizontalDiff = Piece.getRank( position ) - Piece.getRank( oldPos.current );\n\n            if (rotated) { //Rotated if the board is rotated\n                verticalDiff = -verticalDiff;\n                horizontalDiff = -horizontalDiff;\n            }\n\n            el.style.transition = `none`;\n            el.style.transform = `translate(${ -verticalDiff * 100 }%, ${ horizontalDiff * 100 }%)`;\n            setTimeout(() => {\n                el.style.transition = `transform 0.25s ease`;\n                el.style.transform = `translate(0, 0)`\n            }, 0);\n        }\n\n        oldPos.current = position;\n\n    }, [ position ])\n\n    useLayoutEffect(() => {\n        if (imgRef.current) {\n            if (!active) imgRef.current.style.transform = \"\"\n        }\n    }, [active])\n\n    const onDragStart: ( e : React.DragEvent ) => void = e => {\n        //This is fired when the dragging starts\n        if (imgRef.current) imgRef.current.style.transform = \"\";\n        if ( e.dataTransfer ) {\n            target(\"piece-drag\");\n            e.dataTransfer.setData(\"text/plain\", JSON.stringify( [ piece, position ] ));\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n    }\n\n    const clickHandler = ( e: React.MouseEvent<HTMLDivElement, MouseEvent> ) => {\n        if ( e.button === 2 ) {\n            e.preventDefault();\n            onRightClick(id);\n        }\n        if ( e.button === 0 && (draggable) ) {\n            //Left click\n            target(\"piece-click\");\n            if (imgRef.current) imgRef.current.style.transform = \"translateY(.25rem) scale(0.95)\";\n        }\n    }\n\n    return <div className={`piece ${ active ? \"active\" : \"\" } ${ piece > 0 ? \"white\" : \"black\" }`}\n                ref={ pieceEl }\n                id={ id }\n                key={ id }\n                style={ Piece.getStyle(position, rotated) }\n                draggable={ draggable }\n                onDragStart={ draggable ? onDragStart : () => false }\n                onDragEnd={ () => unTarget(\"piece-drag\") }\n                onMouseEnter={onHover}\n                onMouseLeave={onUnHover}\n                onMouseDown={ e => clickHandler(e)}\n                onContextMenu={ e => clickHandler(e) }\n    >\n        <img ref={imgRef} src={ Piece.getImage( piece ) } alt={ piece.toString() } className=\"pieceImg\"/>\n    </div>\n\n}","import React, {MouseEventHandler} from 'react';\nimport \"./TargetingSqaure.css\"\nimport Piece from \"../../Classes/Piece\";\nimport Game from \"../../Classes/Game\";\n\ninterface props {\n    position : number,\n    onDrop : ( e : React.DragEvent ) => void,\n    isMove : boolean,\n    isCapture : boolean,\n    onClick: () => void,\n    rotated: boolean\n}\n\nexport default function TargetingSquare( { position, onDrop, isMove, onClick, isCapture, rotated } : props ) {\n\n\n    const clickHandler = ( e:React.MouseEvent<HTMLDivElement, MouseEvent> ) => {\n        e.stopPropagation(); //Stops the click from bubbling\n        onClick();\n    }\n\n    return <div\n        style={ Piece.getStyle( position, rotated ) }\n        className={`targetingSquare ${ isMove ? \"move\" : \"\" } ${ isCapture ? \"capture\" : \"\" }`}\n        id={`target_${ Piece.getSquareName( position ) }`}\n        onDrop={ onDrop }\n        onMouseDown={ clickHandler }\n        onDragOver={ e => {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        } }\n    />\n\n}\n\nexport {}","import React from 'react';\nimport \"./InfoBar.css\"\nimport Piece from \"../../Classes/Piece\";\n\ninterface props {\n    captures: number[],\n    evaluation: number\n}\n\nexport default function InfoBar( { captures, evaluation } : props ) {\n\n    return <div className=\"infoBar\">\n        <p className=\"materialEval\">\n            { evaluation !== 0 ?  \"(\" + (evaluation >= 0 ? \"+\" : \"\") +  evaluation + \")\" : \"\" }\n        </p>\n        {\n            captures.map(\n                ( piece, index ) => <div key={ (Piece.getPiece(piece)?.longName || \"Piece\") + `${index}` } className=\"capturedPiece\">\n                    <img title={`${ Piece.getPiece(piece)?.longName } (${ Piece.getPiece(piece)?.materialValue })`} src={Piece.getImage(piece)} alt={Piece.getPiece(piece)?.shortName || \"unknown piece\"}/>\n                </div>\n            )\n        }\n    </div>\n\n}\n\nexport {}","///\n/// EVALUATIONS\n///\n\nimport Piece from \"../Classes/Piece\";\nimport GamePiece from \"../Pieces/GamePiece\";\nimport {filterLegalMoves, isCheck} from \"./Checks\";\nimport ActualMove from \"../Classes/Move\";\nimport {legalMove} from \"../types\";\nimport Board from \"../Classes/Board\";\nimport {arraysAreEqual} from \"./Utils\";\nimport OngoingEffect from \"../Classes/OngoingEffect\";\n\nconst materialEvaluation = (board : number[] ) => {\n    return board.filter(p => p !== Piece.None).reduce((t, piece) => {\n        if (Piece.getPiece(piece) === null) return t;\n        else if (piece > 0) return t + (Piece.getPiece(piece) as GamePiece).materialValue; //Positive for white\n        else if (piece < 0) return t - (Piece.getPiece(piece) as GamePiece).materialValue; //Negative for black\n        else return t;\n    }, 0);\n}\n\nconst positionalEngineEvaluation = ( board : number[], history: ActualMove[], _pieces?: (GamePiece|null)[], effects?: OngoingEffect[] ) => {\n\n\n    let startTime = performance.now();\n\n    if ( isCheck( board, history, 1, undefined  )){\n        let wMoves =  filterLegalMoves( Board.getLegalMoves( board, history, { colour: 1 } ), board, history, 1, effects || [] );\n        //If white is checkmated, return negative infinity.\n        if ( wMoves.length === 0 ) return Number.NEGATIVE_INFINITY\n    }\n    else if ( isCheck( board, history, -1, undefined )) {\n        let bMoves = filterLegalMoves( Board.getLegalMoves( board, history, { colour: -1 } ), board, history, -1, effects || [] );\n        //If black mated, return infinity\n        if ( bMoves.length === 0 ) return Number.POSITIVE_INFINITY\n    }\n\n    let val = 0;\n\n    let i = 0, len = board.length;\n    let pieces = _pieces || Piece.PIECE_OBJECTS;\n    while ( i < len ) {\n        let index = i;\n        const p = pieces[ Math.abs(board[index]) ];\n        if (p) {\n            let value = p.engineValue\n            if ( board[index] > 0 ) {\n                val += value + p.valueGrid[63 - index]\n            }\n            else val -= ( value + p.valueGrid[index] );\n        }\n        i++\n    }\n\n\n    let endTime = performance.now();\n\n    let elapsed = endTime - startTime;\n    if (elapsed > 5) {\n        console.log(`Took ${ elapsed } ms to evaluate after ${ history[history.length - 1].getMoveName() }`);\n    }\n\n    return val\n}\n\n\nexport {\n    materialEvaluation,\n    positionalEngineEvaluation\n}","import React from 'react';\nimport Piece from \"../../Classes/Piece\";\nimport \"./PiecePromotionUI.css\";\n\ninterface Props {\n    above : boolean,\n    positionFrom : number,\n    positionTo : number,\n    validPieces : number[],\n    promoting : number,\n    callback: ( pieceFrom: number, pieceTo: number, positionFrom: number, positionTo : number ) => void,\n    rotated: boolean\n}\n\n\nexport default function PiecePromotionUI( { above, positionFrom,  positionTo, validPieces, promoting, callback, rotated } : Props ) {\n\n    const getHeadStyle = () => {\n        return !rotated ?\n                { //This is the normal positioning\n                    left: `${ Piece.getFile( positionTo ) * 12.5 }%`,\n                    top: `${ ( 7 - Piece.getRank( positionTo ) ) * 12.5 }%`,\n                    borderRadius: above ? \"1rem 1rem 0 0\" : \"0 0 1rem 1rem\"\n                }\n                :\n                { //This is the positioning when rotated\n                    left: `${ ( 7 - Piece.getFile( positionTo ) ) * 12.5 }%`,\n                    top: `${ Piece.getRank( positionTo ) * 12.5 }%`,\n                    borderRadius: above ? \"0 0 1rem 1rem\" : \"1rem 1rem 0 0\"\n                }\n    }\n\n    const getBodyStyle = () => {\n        let left = Math.max(Math.min(Piece.getFile( positionTo ) - (validPieces.length / 2) , 8 - ( validPieces.length ) ), 0)\n\n        return Object.assign({\n            width: `${ validPieces.length * 12.5 }%`,\n        }, !rotated ?\n            {\n                left:`${ ( left * 12.5) }%`,\n                top: `${ ( 7 - Piece.getRank( positionTo ) + (above ? 1 : -1) ) * 12.5 }%`,\n                borderTopRightRadius: ( !above || left + validPieces.length !== Piece.getFile( positionTo ) + 1) ? \"1rem\" : \"0\",\n                borderTopLeftRadius: ( !above || 0 !== Piece.getFile( positionTo ) ) ? \"1rem\" : \"0\",\n                borderBottomRightRadius: ( above || left + validPieces.length !== Piece.getFile( positionTo ) + 1) ? \"1rem\" : \"0\",\n                borderBottomLeftRadius: ( above || 0 !== Piece.getFile( positionTo ) ) ? \"1rem\" : \"0\",\n\n            } :\n            {\n                left:  `${ ( (8 - left - validPieces.length) * 12.5) }%`,\n                top: `${ ( Piece.getRank( positionTo ) + (above ? -1 : 1) ) * 12.5 }%`,\n                borderBottomLeftRadius: ( !above || left + validPieces.length !== Piece.getFile( positionTo ) + 1) ? \"1rem\" : \"0\",\n                borderBottomRightRadius: ( !above || 0 !== Piece.getFile( positionTo ) ) ? \"1rem\" : \"0\",\n                borderTopLeftRadius: ( above || left + validPieces.length !== Piece.getFile( positionTo ) + 1) ? \"1rem\" : \"0\",\n                borderTopRightRadius: ( above || 0 !== Piece.getFile( positionTo ) ) ? \"1rem\" : \"0\",\n            }\n        )\n    }\n\n    const getHead = () => <div id=\"PiecePromotionHead\" style={ getHeadStyle() }>\n        <img src={ Piece.getImage( promoting ) } alt=\"\"/>\n    </div>\n\n    const getBody = () => <div id=\"PiecePromotionBody\" style={ getBodyStyle() }>\n        {\n            validPieces.map(\n                piece => <div className=\"promotionPiece\"\n                              style={{ width: `${100 / validPieces.length}%` }}\n                              onMouseDown={ () => callback( promoting, piece, positionFrom, positionTo ) }\n                >\n                    <img src={ Piece.getImage( piece ) } alt=\"\"/>\n                </div>\n            )\n        }\n    </div>\n\n    return !rotated ?\n        above ?\n        <> { getHead() } { getBody() }</> :\n        <> { getBody() } { getHead() } </>\n        :\n        above ?\n        <> { getBody() } { getHead() }</> :\n        <> { getHead() } { getBody() } </>\n\n\n}","import React, {CSSProperties, useEffect, useLayoutEffect, useRef, useState} from 'react';\nimport ChessSquare from \"../ChessSquare/ChessSquare\";\nimport \"./ChessBoard.css\"\nimport ChessPiece from \"../ChessPiece/ChessPiece\";\nimport Piece from \"../../Classes/Piece\";\nimport Game from \"../../Classes/Game\";\nimport TargetingSquare from \"../TargetingSquare/TargetingSquare\";\nimport GamePiece from \"../../Pieces/GamePiece\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport {materialEvaluation} from \"../../helpers/Evaluation\";\nimport ActualMove from \"../../Classes/Move\";\nimport {SpecialMove} from \"../../types\";\nimport {filterCardMoves, filterLegalMoves} from \"../../helpers/Checks\";\nimport PiecePromotionUI from \"../PiecePromotionUI/PiecePromotionUI\";\nimport { generateEmptyBoard } from '../../helpers/BoardGenerators';\nimport Expendable_Card from \"../../Cards/FIDE/Expendable_Card\";\nimport CardMove from '../../Classes/CardMove';\nimport {getActualMoves} from \"../../helpers/MoveFilter\";\nimport Card from \"../../Cards/Card\";\nimport ALL_CARDS from \"../../Cards/Cards\";\nimport InformationBubble from \"../InformationBubble/InformationBubble\";\nimport {Deck} from \"../../Presets/Decks\";\n\ninterface Props {\n    board : number[], //The game board\n    currentTurn : number, //The current player's turn, +1 or -1\n    game: Game,\n    move : ( from : number, to : number, special? : SpecialMove, additional? : object ) => void, //Move callback\n    unMove : () => void, //UnMove callback\n    moves : (ActualMove | CardMove)[], //Move history\n    whiteCaptured : number[], //Pieces white has captured\n    blackCaptured : number[], //Pieces black has captured\n    capturePiece : ( p:number ) => void, //Capture piece callback\n    whiteArmy: number[], //White's starting army\n    blackArmy: number[], //Black's starting army\n    playerColour : number, //\"Player 1\"'s player colour\n    opponent: \"COMP\" | \"LOCAL\" | \"ONLINE\",\n    gameUUID: string, //game UUID\n    moveLockout: boolean, //Whether or not moves are currently locked out - for ensuring smooth transitions between turns\n    allowRotation: boolean,\n    setAllowRotation: ( allowRotation: boolean ) => void, //Call this whenever rotation is changed here, so app.tsx can know about it\n    cardTargetingIndex: number | null, //The function to get card targets\n    playCard: ( card: string, target: number ) => void,\n    cardTargetsRemaining: number,\n    currentTargets: number[]\n}\n\nexport default function ChessBoard({ board, currentTurn, game, move, unMove, moves, whiteCaptured, blackCaptured, capturePiece,\n       whiteArmy, blackArmy, playerColour, opponent, gameUUID, moveLockout, allowRotation, setAllowRotation,\n       cardTargetingIndex, playCard, cardTargetsRemaining, currentTargets } : Props) {\n\n    ///\n    /// BOARD ROTATING\n    ///\n    const rotated = ( (playerColour === -1 && opponent !== \"LOCAL\") || ( currentTurn === -1 && opponent === \"LOCAL\" ) ) && gameUUID !== \"dev-playground\" && allowRotation;\n\n    const [DEV_MODE_ENABLED] = useState(gameUUID === \"dev-playground\");\n\n    ///\n    /// MOVING & CAPTURING\n    ///\n\n    //THIS HANDLES MOVING\n    const onDrop = ( ev : React.DragEvent, destination : number, special?: SpecialMove ) => {\n        let [ piece, position ] = JSON.parse( ev.dataTransfer.getData(\"text/plain\") ) as [number, number];\n        moveHandler( piece, position, destination, special );\n    }\n\n    const moveHandler = ( piece:number, position: number, destination: number, special?: SpecialMove ) => {\n        if ( Math.abs(piece) === Piece.Pawn && Piece.getRank( destination ) === ( piece > 0 ? 7 : 0 ) ) {\n            setPromotion([ position, destination ]);\n            let captured = special === \"EP\" ? board[destination - 8] : board[destination];\n            if ( captured !== Piece.None ) capturePiece( captured );\n            return;\n        }\n\n        let captured = special === \"EP\" ? board[destination - 8] : board[destination];\n\n        move( position, destination, special );\n        setTargeting([0, 0]);\n    }\n\n    const onDropCard = ( ev : React.DragEvent, target : number ) => {\n        if (ev.dataTransfer) {\n            let cardId = ev.dataTransfer.getData(\"text/plain\");\n            playCard( cardId, target );\n        }\n    }\n\n    //Click playing card\n    const onClickCard = ( target: number ) => {\n        if (cardTargetingIndex !== null) {\n            let card = game.getCurrentPlayerHand()[cardTargetingIndex];\n            playCard(card.id, target);\n        }\n    }\n\n    ///\n    /// PROMOTING\n    ///\n    const onPromotion = ( pieceFrom : number, pieceTo : number, positionFrom : number, positionTo : number ) => {\n\n        move( positionFrom, positionTo, \"PROMOTION\", { promotionTo: pieceTo }  );\n        setPromotion([ -1, -1 ])\n\n    }\n\n\n    ///\n    /// GENERATING UI ELEMENTS\n    ///\n\n    const getSquares = () => board.map( (piece, pos) => {\n        let pMoves = moves.filter(m => m instanceof ActualMove) as ActualMove[];\n        let ongoingEffects = game.getCurrentOngoingEffects();\n        let affectedSquares = ongoingEffects.reduce((prev, e) => prev.indexOf(e.getSquare()) === -1 ? [...prev, e.getSquare()] : prev,[] as number[])\n        return <ChessSquare position={pos} rotated={rotated} moveCircle={false} border={ affectedSquares.indexOf(pos) !== -1 }\n                            highlight={ pMoves.length >= 1 && ( pos === pMoves[pMoves.length - 1].to || pos === pMoves[pMoves.length - 1].from )  } />\n    })\n\n    const getPieceKey = ( piece : number, pos : number ) => {\n        //We will return simply the piece and its position\n        //UNLESS it has been moved\n        //WE LOOK THROUGH THE MOVES TO FIND IT'S LAST MOVE\n        let startingPos = pos;\n        let firstSeen = 1\n        if ( moves.length > 0 ) {\n            let inverseMoves = [...moves].reverse();\n            //GO THROUGH EACH MOVE, AND TRACK THE POSITION OF THIS PIECE\n            let found = false; // This is set to true if we've found when the piece was 'created' (e.g if it was created via promotion or by a card)\n            startingPos = inverseMoves.reduce( ( p, m, i ) => {\n                if (found) return p;\n                firstSeen = inverseMoves.length - i\n                // p is the current position of the piece\n                if ( m instanceof ActualMove ) {\n                    // If there was a promotion move to the last known location, then this was where the piece was created!\n                    if (m.to === p && m.special === \"PROMOTION\" && m.additional.promotionTo === piece) found = true\n                    // If there's nothing funny going on, we track the piece to its previous move\n                    return (m.to === p && m.moving === piece) && !found ? m.from : p\n                }\n                else  {\n                    // If the move was a card move, then we use the TrackPiece function.\n                    // By default, this returns the position.\n                    return ALL_CARDS[m.cardName].trackPiece(p, m.targets);\n                }\n            } , pos );\n\n\n            if ( Math.abs( piece ) === Piece.Rook || Math.abs( piece ) === Piece.Bede ) { //If a rook, we also want to retain it for castling\n                startingPos = inverseMoves.reduce(\n                    ( p, m, i ) => {\n                        if (m instanceof ActualMove) {\n                            let regularMove = ( m.to === p && m.moving === piece );\n                            let castle = ( m.special === \"CASTLE\" && ( m.to === p + 1 || m.to === p - 1 ) );\n                            if ( regularMove ) return m.from\n                            else if (castle && Math.abs(piece) === Piece.Bede) return m.to === p + 1 ? m.to + 1 : m.to - 1;\n                            else if ( castle ) return m.to === p + 1 ? m.to + 1 : m.to - 2;\n                            else return p\n                        }\n                        else return p\n                    }, pos\n                );\n            }\n\n        }\n\n        return `${ startingPos }-${ piece }-${ firstSeen }`\n    }\n\n    const getPieces = () => board.map( ( piece, pos ) => piece === 0 ? null :\n        <ChessPiece position={ pos }\n                    key={ getPieceKey( piece, pos ) }\n                    piece={ piece }\n                    id={ getPieceKey( piece, pos ) }\n                    draggable={ (((currentTurn > 0 && piece > 0 && (playerColour > 0 || opponent === \"LOCAL\")) || ( currentTurn < 0 && piece < 0 && (playerColour < 0 || opponent === \"LOCAL\") )) && !moveLockout) || DEV_MODE_ENABLED }\n                    clickable={ (((currentTurn > 0 && piece > 0 && (playerColour > 0 || opponent === \"LOCAL\")) || ( currentTurn < 0 && piece < 0 && (playerColour < 0 || opponent === \"LOCAL\") )) && !moveLockout) || DEV_MODE_ENABLED }\n                    target={ source => target([ piece, pos ], source)  }\n                    unTarget={ source => target([ 0, -1 ], source) }\n                    onHover={ () => setHoveringPos(pos) }\n                    onUnHover={ () => setHoveringPos(-1) }\n                    onRightClick={ id => showPieceInfo( pos, id ) }\n                    active={ targeting[1] === pos || targeting[1] === -1 }\n                    rotated={rotated} /> )\n\n    const getTargetingSquares = () => {\n        if ( cardTargetingIndex === null ) return Piece.getPiece(targeting[0]) ?\n            filterLegalMoves(\n                (Piece.getPiece(targeting[0]) as GamePiece).getLegalMoves(targeting[1], board, \"all\", targeting[0] > 0 ? 1 : -1, (moves.filter(m => m instanceof ActualMove) as ActualMove[])),\n                board, (moves.filter(m => m instanceof ActualMove) as ActualMove[]), targeting[0] > 0 ? 1 : -1, game.getCurrentOngoingEffects()\n            )\n                .map(move =>\n                    <TargetingSquare\n                        position={move.to}\n                        isCapture={board[move.to] !== Piece.None || move.special === \"EP\"}\n                        isMove={board[move.to] === Piece.None}\n                        onClick={ () => moveHandler( targeting[0], move.from, move.to, move.special ) }\n                        onDrop={ev => onDrop(ev, move.to, move.special)}\n                        rotated={rotated}\n                    />\n                )\n            : null;\n        else {\n            let currentCard = game.getCurrentPlayerHand()[cardTargetingIndex];\n            let index = cardTargetsRemaining === 0 ? 0 : currentCard.targets - cardTargetsRemaining;\n            let currentFunction = currentCard.getValidTargets[ index ];\n            currentFunction = currentFunction as typeof currentFunction || currentCard.getValidTargets[0];\n            return currentFunction as unknown ?  currentFunction( board, currentTurn, getActualMoves(moves), currentTargets, game.getCurrentOngoingEffects() )\n                .filter( square => filterCardMoves( game, currentCard.id, [ ...currentTargets, square ], currentTurn ) )\n                    .map( target =>\n                        <TargetingSquare\n                            position={target}\n                            isCapture={false}\n                            isMove={true}\n                            onClick={ () => onClickCard( target ) }\n                            onDrop={ ev => onDropCard(ev, target) }\n                            rotated={rotated}\n                        />\n                    ) : null\n        }\n    }\n\n    const getMoveCircles = () => {\n        let squares: JSX.Element[] = [];\n        let hoveringSquares = hoveringPos === -1 ? [] as JSX.Element[] : Piece.getPiece(board[hoveringPos])?.getLegalMoves(\n            hoveringPos, generateEmptyBoard(), \"all\", board[hoveringPos] > 0 ? 1 : -1, (moves.filter(m => m instanceof ActualMove) as ActualMove[])\n        ).filter(move => move.to !== move.from).map(\n            legalMove => <ChessSquare position={legalMove.to} rotated={rotated} moveCircle={true} highlight={false}/>\n        );\n        if (hoveringSquares) squares.push(...hoveringSquares);\n        if (hoveringPos !== targeting[1] && Piece.getPiece(targeting[0])) squares.push(\n            ...filterLegalMoves(\n                (Piece.getPiece(targeting[0]) as GamePiece).getLegalMoves(targeting[1], board, \"all\", targeting[0] > 0 ? 1 : -1, (moves.filter(m => m instanceof ActualMove) as ActualMove[])),\n                board, (moves.filter(m => m instanceof ActualMove) as ActualMove[]), targeting[0] > 0 ? 1 : -1, game.getCurrentOngoingEffects()\n            ).map(\n                legalMove => <ChessSquare position={legalMove.to} rotated={rotated} moveCircle={true} highlight={false}/>\n            )\n        )\n        return squares;\n    }\n\n\n    ///\n    /// TARGETING\n    ///\n    // [ piece, position from ]\n    const [ targeting, setTargeting ] = useState<[ number, number ]>([ 0, -1 ]);\n    type TargetingType = \"piece-click\" | \"piece-drag\" | \"card-drag\" | \"card-click\";\n    const [ targetingType, setTargetingType ] = useState<TargetingType>(\"piece-click\");\n\n    const target = ( target: [number, number], type: TargetingType ) => {\n        setTargeting(target);\n        setTargetingType(type);\n    }\n\n    useLayoutEffect(() => {\n        if (cardTargetingIndex !== null) setTargetingType(\"card-drag\")\n    }, [cardTargetingIndex])\n\n    // The position that is currently being hovered\n    const [ hoveringPos, setHoveringPos ] = useState<number>(-1);\n\n\n    ///\n    /// PROMOTING\n    ///\n    // Will be -1 when not shown\n    const [ [ promotionFrom, promotionTo ], setPromotion ] = useState<[ number, number ]>([ -1, -1 ]);\n\n    const getValidPromotionPieces = ( colour: -1 | 1 ) => {\n        let pieces = colour > 0 ? whiteArmy : blackArmy;\n        console.log(colour)\n        //We want to remove duplicates\n        let filtered = pieces.filter(p => Math.abs(p) !== Piece.King)\n            .reduce(( acc, cur ) => acc.indexOf( cur ) === -1 ? [ ...acc, cur ] : acc, [] as number[]);\n        //Also remove the king\n        return filtered.filter(p => Math.abs(p) !== Piece.King).sort( (a, b) => a - b ).map( piece => colour > 0 ? piece : -piece )\n    }\n\n    ///\n    /// PIECE INFO BUBBLE\n    ///\n\n    const [ pieceInfoPos, setPieceInfoPos ] = useState<number>(-1);\n    const [ pieceInfoId, setPieceInfoId ] = useState<string>(\"\");\n\n    const showPieceInfo = ( pos: number, id: string ) => {\n        setPieceInfoPos(pos);\n        setPieceInfoId(id)\n        window.addEventListener(\"click\", infoListener);\n        window.addEventListener(\"dragstart\", infoListener)\n    }\n\n    const infoListener = ( e : MouseEvent | DragEvent ) => {\n        let bubble = document.getElementById(\"PieceInfoBubble\");\n        if ( bubble ) { //There was a click, and the bubble exists!\n            let { x, y, width, height } = bubble.getBoundingClientRect(); //Where is the bubble?\n            //Check to see if the click was outside of the rect\n            if ( e.pageX < x || e.pageX > x + width || e.pageY < y || e.pageY > y + height ) {\n                ///The click was outside the bubble!\n                setPieceInfoPos(-1);\n                window.removeEventListener(\"click\", infoListener);\n            }\n        }\n    }\n\n    const pieceInfoBubble = () => {\n\n        if ( pieceInfoPos === -1 ) return null;\n        let pieceNum = board[pieceInfoPos]\n        let piece = Piece.getPiece(pieceNum)\n        if (!piece) return null;\n\n        const bubbleStyle = {\n            position: \"absolute\"\n        } as CSSProperties\n\n        return <>\n\n            <div id=\"PieceInfoBubble\" style={ bubbleStyle }>\n\n                <div onContextMenu={e => e.preventDefault()} onMouseDown={() => setPieceInfoPos(-1)} className=\"exit\">\n                    ✖\n                </div>\n\n                <h3 id=\"PieceInfoPieceTitle\">{ piece.longName }</h3>\n                <div className=\"imgRow\">\n                    <img src={ Piece.getImage(pieceNum) } />\n                </div>\n                <div className=\"pieceDescBlock moves\">\n                    { piece.movesDescription }\n                </div>\n                <div className=\"pieceDescBlock moves\">\n                    { piece.specialMoves.map((category, i) => <div className=\"move\">{category}</div>) }\n                </div>\n                <div className=\"pieceDescBlock notes\">\n                    { piece.notes }\n                </div>\n                <div className=\"pieceDescBlock effects\">\n                    { game.getCurrentOngoingEffects().filter(e => e.getSquare() === pieceInfoPos).map((e, i) =>\n                        <p>{ e.getToolTip() } { e.getDurationRemaining() } turn{e.getDurationRemaining() === 1 ? \"\" : \"s\"} remaining.</p> ) }\n                </div>\n                <div className=\"pieceDescBlock tags\">\n                    Tags: { piece.categories.map((category, i) =>\n                    <span className=\"tag\">{category}{i !== (piece as GamePiece).categories.length - 1 ? \", \" : \"\"}</span>) }\n                </div>\n            </div>\n        </>\n\n    }\n\n    // HANDLES POSITION OF PIECE INFO POPUP\n    useLayoutEffect(() => {\n        //We're gonna resize the element!\n        let pieceEl = document.getElementById(pieceInfoId);\n        let infoBubble = document.getElementById(\"PieceInfoBubble\");\n        if (infoBubble && pieceEl) {\n            //That means we've just re-rendered the popup!\n            let { x: pieceX, y: pieceY, height: pieceHeight, width: pieceWidth } = pieceEl.getBoundingClientRect();\n            let { height: bubbleHeight, width: bubbleWidth } = infoBubble.getBoundingClientRect();\n\n            let topMin = 10; //min top is 0\n            let topMax = window.window.visualViewport.height - bubbleHeight / 2 //effectively touching the bottom\n            //Align centre with centre of piece - pieceX + pieceHeight/2 = top + bubbleHeight/2\n            let idealTop = pieceY + ( pieceHeight / 2 ) - ( bubbleHeight / 2 );\n            let boundedTop = Math.min( topMax, Math.max( topMin, idealTop ) );\n            infoBubble.style.top = `${boundedTop}px`\n\n\n            let leftSide = pieceX + 20 < window.innerWidth / 2\n\n            let distMin = 0, distMax = window.innerHeight - ( bubbleWidth / 2 );\n            let idealDist = leftSide ? pieceX - bubbleWidth - 10 : window.visualViewport.width - pieceX - pieceWidth - bubbleWidth -10\n            let bounded = Math.min( distMax, Math.max( distMin, idealDist ) );\n\n            if ( leftSide) {\n                infoBubble.style.left = `${bounded}px`;\n                infoBubble.style.right = \"\";\n            }\n            else {\n                infoBubble.style.right = `${bounded}px`\n                infoBubble.style.left = \"\";\n            }\n\n        }\n\n    }, [ pieceInfoId, pieceInfoPos ]);\n\n\n    ///\n    /// CHAOS VALUE\n    ///\n\n    const getChaosValue = () => blackCaptured.reduce((prev, current) => prev + (Piece.getPiece(current)?.materialValue || 0), 0) +\n        whiteCaptured.reduce((prev, current) => prev + (Piece.getPiece(current)?.materialValue || 0), 0)\n\n\n    ///\n    /// DECKS\n    ///\n    const [ deckShown, setDeckShown ] = useState<\"white\"|\"black\">(\"white\");\n    const [ showDeckOverlay, setShowDeckOverlay ] = useState<boolean>(false);\n\n    const getDeckQuantity = ( deck: Deck, cardId: string ) => deck.cards.filter(c => c === cardId).length\n\n    const getDeckOverlay = () => {\n        let deck = deckShown === \"white\" ? game.getWhiteDeck() : game.getBlackDeck();\n        return <div id=\"DeckOverlay\" className={showDeckOverlay ? \"shown\" : \"hidden\"}>\n            <div className=\"close\" onClick={() => setShowDeckOverlay(false)}>x</div>\n            {\n                [...deck.cards].filter((c, i, a) => a.indexOf(c) === i).map( card => ALL_CARDS[card] )\n                    .map(card => <div className=\"deckOverlayCard\">\n                    <div className=\"topRow\">\n                        <p className=\"chaosCost\">{ card.cost }</p>\n                        <p className=\"speed\">{ card.fast ? \"fast\" : \"\" }</p>\n                    </div>\n                    <p className=\"title\">{card.cardName}</p>\n                    <p className=\"desc\">{card.description}</p>\n                    <p className=\"expac\">{card.expac}</p>\n                    <p className=\"quantity\">x{ getDeckQuantity( deck, card.id ) }</p>\n                </div>\n            )\n            }\n        </div>\n    }\n\n    return <>\n        <InfoBar captures={ rotated? whiteCaptured : blackCaptured } evaluation={ -materialEvaluation( board ) * (rotated ? -1 : 1) }/>\n        <div id=\"ChessBoardWrapper\">\n            <div id=\"ChessBoardOuter\">\n\n                <div id=\"ChessBoardSquares\" className=\"board\">\n                    { getSquares() }\n                </div>\n\n                {\n                  targeting[0] !== 0 || cardTargetingIndex !== null ? <div id=\"ChessBoardTargeting\" className=\"board\" onMouseDown={() => target([0, -1], targetingType)}>\n                      { getTargetingSquares() }\n                  </div> : null\n                }\n\n                <div id=\"ChessBoardPieces\" className={`board ${ targeting[0] !== 0 ? `targeting ${ targetingType } ${ targeting[0] > 0 ? \"whitemove\" : \"blackmove\" }` : \"\" } ${ cardTargetingIndex === null ? \"\" : \"card-targeting\" }`}>\n                    { getPieces() }\n                </div>\n\n                <div id=\"ChessBoardMoveCircles\" className=\"board\">\n                    { getMoveCircles() }\n                </div>\n\n                {\n                    promotionFrom !== -1 ? <PiecePromotionUI above={Piece.getRank( promotionTo ) === 7}\n                            positionFrom={promotionFrom}\n                            positionTo={promotionTo}\n                            validPieces={ getValidPromotionPieces( board[promotionFrom] > 0 ? 1 : -1 ) }\n                            promoting={promotionFrom > 0 ? board[promotionFrom] : Piece.None}\n                            callback={onPromotion}\n                            rotated={ rotated }\n                    /> : null\n                }\n\n            </div>\n\n            <div id=\"ChaosValue\" title=\"Chaos Value - the material value of all pieces captured. Must meet a threshold before cards can be played.\">\n                <div className=\"val\" id=\"ChaosValueScore\">\n                    { game.getChaosScore() }\n                </div>\n                <div className=\"sub\">\n                    CHAOS VALUE\n                </div>\n            </div>\n\n            <div id=\"BlackDeck\" title=\"Click to see cards\" className=\"deck\" onClick={() => {\n                setDeckShown(!rotated ? \"black\" : \"white\");\n                setShowDeckOverlay(true);\n            }}>\n                <p>{ !rotated ? \"Black\" : \"White\" } Deck</p>\n                <p>{ (!rotated ? game.getBlackCurrentDeck() : game.getWhiteCurrentDeck()).length } card/s remaining</p>\n            </div>\n            <div id=\"WhiteDeck\" title=\"Click to see cards\" className=\"deck\" onClick={() => {\n                setDeckShown(!rotated ? \"white\" : \"black\");\n                setShowDeckOverlay(true);\n            }}>\n                <p>{ !rotated ? \"White\" : \"Black\" } Deck</p>\n                <p>{ (!rotated ? game.getWhiteCurrentDeck() : game.getBlackCurrentDeck()).length} card/s remaining </p>\n            </div>\n\n            <div id=\"HandNotice\">\n                <p className=\"hand\">Opponent has { !rotated ? game.getBlackHand().length : game.getWhiteHand().length } card/s in hand</p>\n            </div>\n\n            {\n                getDeckOverlay()\n            }\n\n        </div>\n        <InfoBar captures={ rotated? blackCaptured : whiteCaptured } evaluation={ materialEvaluation( board ) * (rotated ? -1 : 1) }/>\n\n        { pieceInfoBubble() }\n\n        <div className=\"allowRotationCheckbox\">\n            <input type=\"checkbox\" checked={ allowRotation } onChange={e => setAllowRotation( e.target.checked )} />\n            <label>Allow rotation?</label>\n        </div>\n    </>\n\n}","module.exports = __webpack_public_path__ + \"static/js/opponent-webworker.6656869b.chunk.worker.js\"","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useContext, useEffect, useLayoutEffect, useState} from \"react\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport { FIDEARMY, CRUSADERSARMY } from \"../../Presets/Armies\";\nimport \"./PlayPage.css\"\nimport {Army} from \"../../Presets/Armies\"\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport { v4 as generateUUID } from \"uuid\";\nimport {GameInfo} from \"../../types\";\nimport {randomFromList} from \"../../helpers/Utils\";\nimport {ARMY_KEY, DECK_KEY, GAME_KEY} from \"../../KEYS\";\nimport Piece from \"../../Classes/Piece\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport {CRUSADERSDECK, Deck, FIDEDECK} from \"../../Presets/Decks\";\nimport ConnectionContext from \"../../Context/ConnectionContext\";\nimport Message, {\n    GameStartRequest_Message,\n    GameStartResponse_Message,\n    ReadyMessage,\n    SetupChoice_Message\n} from \"../../Messages\";\n\nexport default function PlayPage() {\n\n    ///\n    /// THE AVAILABLE ARMIES\n    ///\n    const [ armies, setArmies ] = useState<Army[]>([]);\n    const getArmies = () => {\n        //Loading the army from local storage\n        let armiesJSON = localStorage.getItem( ARMY_KEY );\n        let armies = [] as Army[];\n        armies.push( FIDEARMY, CRUSADERSARMY );\n        if (armiesJSON) {\n            let parsedArmies = JSON.parse(armiesJSON) as unknown as { [key:string]: Army };\n            //Pushing the armies to an array, if any are found!\n            armies.push( ...Object.values(parsedArmies) );\n        }\n        setArmies(armies);\n    }\n\n    ///\n    /// THE AVAILABLE DECKS\n    ///\n    const [ decks, setDecks ] = useState<Deck[]>([]);\n\n    const getDecks = () => {\n        //Loading the army from local storage\n        let decksJSON = localStorage.getItem( DECK_KEY );\n        let decks = [] as Deck[];\n        decks.push( FIDEDECK, CRUSADERSDECK );\n        if (decksJSON) {\n            let parsedDecks = JSON.parse(decksJSON) as unknown as { [key:string]: Deck };\n            //Pushing the armies to an array, if any are found!\n            decks.push( ...Object.values(parsedDecks) );\n        }\n        setDecks(decks);\n    }\n\n    ///\n    /// CURRENTLY EXISTING GAMES\n    ///\n    const [ games, setGames ] = useState<GameInfo[]>([]);\n    const getGames = () => {\n        //Loading games from local storage\n        let gamesJSON = localStorage.getItem( GAME_KEY );\n        let games = [] as GameInfo[];\n        if ( gamesJSON ) {\n            let parsedGames = JSON.parse( gamesJSON ) as unknown as { [key: string]: GameInfo }\n            //Push games into the array, if any are found!\n            games.push( ...Object.values(parsedGames) );\n        }\n        setGames(games);\n    }\n\n    useLayoutEffect(() => {\n        getArmies();\n        getDecks();\n        getGames();\n    }, [] )\n\n    ///\n    /// CHOOSING FOR YOURSELF AND YOUR OPPONENT\n    ///\n    const [ opponent, setOpponent ] = useState<\"COMP\" | \"LOCAL\" | \"ONLINE\">(\"LOCAL\");\n    const [ colour, setColour ] = useState<\"WHITE\" | \"BLACK\" | \"RANDOM\">(\"WHITE\");\n    const [ army, setArmy ] = useState<number>(0);\n    const [ opponentArmy, setOpponentArmy ] = useState<number>(0);\n\n    const [ deck, setDeck ] = useState<number>(0);\n    const [ opponentDeck, setOpponentDeck ] = useState<number>(0);\n\n    ///\n    /// LOADING INTO GAME\n    ///\n    const loadIntoGame = () => {\n        const uuid = generateUUID(); // GENERATE UUID\n        // RANDOM SELECTIONS\n        let _colour = colour === \"RANDOM\" ? randomFromList([-1, 1]) : [\"BLACK\", \"\", \"WHITE\"].indexOf(colour) - 1;\n        let _army = army === -1 ? randomFromList(armies) : armies[army];\n        let _opponentArmy = opponentArmy === -1 ? randomFromList(armies) : armies[opponentArmy];\n        let _deck = deck === -1 ? randomFromList(decks) : decks[deck];\n        let _opponentDeck = opponentDeck === -1 ? randomFromList(decks) : decks[opponentDeck];\n\n        const gameInfo = { // Game Info\n            uuid,\n            opponent,\n            colour: _colour,\n            army: JSON.stringify(_army),\n            opponentArmy: JSON.stringify(_opponentArmy),\n            deck: JSON.stringify(_deck),\n            opponentDeck: JSON.stringify(_opponentDeck)\n        } as GameInfo\n\n        const gamesData = localStorage.getItem(GAME_KEY) || \"{}\"; //Get existing game information\n        const parsedGamesData = JSON.parse(gamesData) as { [uuid:string]: GameInfo };\n        parsedGamesData[uuid] = gameInfo; //Adding the new info\n        localStorage.setItem(GAME_KEY, JSON.stringify(parsedGamesData)); //Set the data\n        window.location.href = `/play/game/${uuid}`; //Redirect to the game playing page\n    }\n\n    const getPointBuyTotal = ( armyPieces : number[] ) => armyPieces.filter( p => p !== 6 ).reduce((prev, next) => (Piece.getPiece(next)?.materialValue || 0) + prev, 0 );\n\n    ///\n    /// WHETHER OR NOT THE EXISTING GAMES ARE GOING TO BE SHOWN\n    ///\n    const [ showExistingGames, setShowExistingGames ] = useState<boolean>(false);\n    const renderExistingGame = ( g: GameInfo ) => {\n\n        let playerArmy = JSON.parse(g.army) as Army;\n        let opponentArmy = JSON.parse(g.opponentArmy) as Army;\n        let opponentType = {\n            [\"ONLINE\"]: \"Online Opponent\",\n            [\"LOCAL\"]: \"Local Opponent\",\n            [\"COMP\"]: \"Computer Opponent\"\n        }[g.opponent]\n\n        return <Link to={`/play/game/${g.uuid}`}>\n            <div title={ `Game ${g.uuid}` } className=\"existingGame\">\n                <p>{g.colour > 0 ? playerArmy.name : opponentArmy.name},</p>\n                <p>{g.colour < 0 ? playerArmy.name : opponentArmy.name}</p>\n                <p>vs { opponentType }</p>\n            </div>\n        </Link>\n    }\n\n    const getExistingGames = () => games.map( renderExistingGame );\n\n    ///\n    /// ONLINE PLAY\n    ///\n\n    const { Conn, Channel, setListener, initChannel} = useContext(ConnectionContext);\n\n    const [ opponentReady, setOpponentReady ] = useState<boolean>(false);\n    const [ ready, setReady ] = useState<boolean>(false);\n\n    // ALLOWS FOR PROGRAMMATIC CHANGES TO ROUTE\n    const history = useHistory()\n\n    const onlineReady = () => {\n        if (!Channel) {\n            console.warn(\"Tried to ready, but not connected!\");\n            return;\n        }\n        setReady(true); //Letting our opponent know we're ready\n        // If our opponent isn't ready, then we tell them we're ready:\n        if (!opponentReady) {\n            let msg = new ReadyMessage();\n            Channel.send(JSON.stringify(msg));\n            return;\n        }\n\n        // If the opponent is ready, then we want to start the game!\n        // We send them a signal with our selected army and decks\n        let data = {\n            army: armies[army],\n            deck: decks[deck]\n        }\n        // This data is sent correctly\n        let msg = new GameStartRequest_Message(data);\n        Channel.send(JSON.stringify(msg));\n    }\n\n    const requestLoadIntoGame = ( msg: GameStartRequest_Message ) => {\n        if (!Channel) {\n            console.warn(\"TRIED TO LOAD INTO GAME, BUT NO DATA CHANNEL!\");\n            return;\n        }\n        const uuid = generateUUID(); // GENERATE UUID\n\n        // Our opponent has just told us the game is starting\n        // GET DECKS AND ARMIES\n\n        //Because it's weird for whatever reason, we have to do this.\n        let _colour = 1;\n        let _army = armies[0];\n        let _deck = decks[0]\n        setColour(colour => {\n            _colour = colour === \"RANDOM\" ? randomFromList([-1, 1]) : [\"BLACK\", \"\", \"WHITE\"].indexOf(colour) - 1;\n            return colour;\n        })\n        setArmy( army => {\n            _army = army === -1 ? randomFromList(armies) : armies[army];\n            return army;\n        } )\n        setDeck( deck => {\n            _deck = deck === -1 ? randomFromList(decks) : decks[deck];\n            return deck;\n        } )\n\n\n        let _opponentArmy = msg.payload.army;\n        let _opponentDeck = msg.payload.deck;\n\n        const gameInfo = { // Game Info\n            uuid,\n            opponent,\n            colour: _colour,\n            army: JSON.stringify(_army),\n            opponentArmy: JSON.stringify(_opponentArmy),\n            deck: JSON.stringify(_deck),\n            opponentDeck: JSON.stringify(_opponentDeck)\n        } as GameInfo\n\n        // Now, we want to send a message to the opponent with this game data//\n        // so they can load into it as well!\n\n        /// TODO: THIS MESSAGE IS WRONG SOMEHOW - PUTS FIDE ARMY AND DECK FOR BOTH PLAYERS\n        /// TODO: SO WHAT'S GOING ON IS ANY CHANGE TO ARMY OR OPPONENT_ARMY AFTER \"ONLINE\" IS SELECTED ISN'T GOING THROUGH. WHY???\n        let newMsg = new GameStartResponse_Message(gameInfo);\n        Channel.send(JSON.stringify(newMsg));\n\n        const gamesData = localStorage.getItem(GAME_KEY) || \"{}\"; //Get existing game information\n        const parsedGamesData = JSON.parse(gamesData) as { [uuid:string]: GameInfo };\n        parsedGamesData[uuid] = gameInfo; //Adding the new info\n        localStorage.setItem(GAME_KEY, JSON.stringify(parsedGamesData)); //Set the data\n        console.log(\"Loading into game with the following game data \\n\", gameInfo)\n        history.push(`/play/game/${uuid}`); //Redirect to the game playing page\n    }\n\n    const responseLoadIntoGame = ( msg: GameStartResponse_Message ) => {\n        let temp_gameInfo = msg.payload, uuid = generateUUID();\n        let gameInfo = {\n            uuid,\n            opponent: temp_gameInfo.opponent,\n            army: temp_gameInfo.opponentArmy,\n            opponentArmy: temp_gameInfo.army,\n            deck: temp_gameInfo.opponentDeck,\n            opponentDeck: temp_gameInfo.deck,\n            colour: temp_gameInfo.colour === -1 ? 1 : -1\n        } as GameInfo\n        const gamesData = localStorage.getItem(GAME_KEY) || \"{}\"; //Get existing game information\n        const parsedGamesData = JSON.parse(gamesData) as { [uuid:string]: GameInfo };\n        parsedGamesData[uuid] = gameInfo; //Adding the new info\n        localStorage.setItem(GAME_KEY, JSON.stringify(parsedGamesData)); //Set the data\n        console.log(\"Received the following game data\\n\", temp_gameInfo);\n        console.log(\"Loading into game with the following game data\\n\", gameInfo);\n        history.push(`/play/game/${uuid}`); //Redirect to the game playing page\n    }\n\n    // Sets up channel listeners\n    useEffect(() => {\n        if (opponent === \"ONLINE\" && Channel) {\n            console.log(`Adding event listener to channel ${Channel.id}`)\n            Channel.addEventListener('message', messageListener )\n        }\n        else if (opponent === \"ONLINE\") console.log(\"Online, but Channel not currently defined: \\n\", Channel )\n\n    }, [opponent, Channel])\n\n    const messageListener = ( message : MessageEvent ) => {\n        let msg = JSON.parse(message.data);\n        console.log(msg)\n        switch (msg.msgType) {\n            case 'setup_choice':\n                console.log('received a setup choice')\n                let col = msg.payload.data as \"WHITE\" | \"BLACK\" | \"RANDOM\";\n                switch (col) {\n                    case \"WHITE\":\n                        setColour(\"BLACK\"); //We're the opposite of whatever colour the opponent has picked for themselves.\n                        break;\n                    case \"BLACK\":\n                        setColour(\"WHITE\");\n                        break;\n                    default:\n                        setColour(\"RANDOM\");\n                }\n                break;\n            case 'ready':\n                console.log(\"Your opponent has signalled they are ready!\");\n                setOpponentReady(true);\n                break;\n            case 'game_start_request':\n                console.log(\"Your opponent has sent a request to start the game\");\n                requestLoadIntoGame(msg as GameStartRequest_Message)\n                break;\n            case 'game_start_response':\n                console.log(\"Response received from opponent - game ready to start\");\n                responseLoadIntoGame(msg as GameStartResponse_Message)\n                break;\n\n        }\n    }\n\n    //Wrappers - we'll want to inform our opponent of our choice, so they can load the game properly\n    const updateColor = (col: \"WHITE\" | \"BLACK\" | \"RANDOM\") => {\n        setColour(col);\n        if (opponent !== \"ONLINE\" || !Channel) return;\n        //We're online, so we need to send a message!\n        let data = col;\n        let choice = \"colour\" as \"colour\"\n        let msg = new SetupChoice_Message({choice, data});\n        console.log(`Sending a message via channel ${Channel.id}!`)\n        Channel.send(JSON.stringify(msg))\n\n    }\n\n    return <div id=\"PlayPage\" className=\"paddedTop\">\n\n        <NavBar/>\n    \n        <h1>Setup your game!</h1>\n\n        <p onClick={() => setShowExistingGames( prev => !prev )} className=\"toggleExistingGames\">\n            { showExistingGames ? \"Hide\" : \"Show\" } current games\n        </p>\n        <div className=\"existingGames\">\n        {\n            showExistingGames ? getExistingGames() : null\n        }\n        </div>\n        <div className=\"playPageInner\">\n            <h3>Who do you want to face?</h3>\n            <SelectionItem item=\"LOCAL OPPONENT\" selected={opponent===\"LOCAL\"} onPress={()=>setOpponent(\"LOCAL\")} disabled={ready}/>\n            <SelectionItem item=\"COMPUTER OPPONENT\" selected={opponent===\"COMP\"} onPress={()=>setOpponent(\"COMP\")} disabled={ready}/>\n            <SelectionItem item=\"ONLINE\" selected={opponent===\"ONLINE\"} onPress={()=>setOpponent(\"ONLINE\")}\n                           disabled={Conn.connectionState !== 'connected' || ready} toolTip={ONLINE_PLAY_TIP}\n            />\n\n            <h3>Which colour do you want to play as?</h3>\n            <SelectionItem item=\"WHITE\" selected={colour===\"WHITE\"} onPress={updateColor} disabled={ready}/>\n            <SelectionItem item=\"BLACK\" selected={colour===\"BLACK\"} onPress={updateColor} disabled={ready}/>\n            <SelectionItem item=\"RANDOM\" selected={colour===\"RANDOM\"} onPress={updateColor} disabled={ready}/>\n\n            <h3>Which army do you want to use?</h3>\n            {\n                armies.map(\n                    ( a, i ) => <SelectionItem item={a.name.toUpperCase()} selected={army===i} onPress={() => setArmy(i)}\n                                               disabled={getPointBuyTotal(a.pieces) > 31 || ready} toolTip={ARMY_TIP} />\n                )\n            }\n            <SelectionItem item=\"RANDOM\" selected={army===-1} onPress={()=>setArmy(-1)} disabled={ready}/>\n            {\n                 opponent === \"ONLINE\" ? null :\n                     <>\n                        <h3>Which army do you want your opponent to use?</h3>\n                            {\n                                armies.map(\n                                ( a, i ) => <SelectionItem item={a.name.toUpperCase()} selected={opponentArmy===i} onPress={()=>setOpponentArmy(i)}\n                                disabled={getPointBuyTotal(a.pieces) > 31} toolTip={ARMY_TIP} />\n                                )\n                            }\n                        <SelectionItem item=\"RANDOM\" selected={opponentArmy===-1} onPress={()=>setOpponentArmy(-1)}/>\n                     </>\n            }\n            \n            <h3>Which deck do you want to use?</h3>\n            {\n                decks.map(\n                    ( d, i ) => <SelectionItem item={d.name.toUpperCase()} selected={deck===i} onPress={()=>setDeck(i)}\n                                               disabled={ d.cards.length !== 15 || ready} toolTip={DECK_TIP} />\n                )\n            }\n            <SelectionItem item=\"RANDOM\" selected={deck===-1} onPress={()=>setDeck(-1)} disabled={ready}/>\n\n            {\n                opponent === \"ONLINE\" ? null : <>\n                    <h3>Which deck do you want your opponent to use?</h3>\n                    {\n                        decks.map(\n                        ( d, i ) => <SelectionItem item={d.name.toUpperCase()} selected={opponentDeck===i} onPress={()=>setOpponentDeck(i)}\n                        disabled={d.cards.length !== 15} toolTip={DECK_TIP} />\n                        )\n                    }\n                    <SelectionItem item=\"RANDOM\" selected={opponentDeck===-1} onPress={()=>setOpponentDeck(-1)}/>\n                </>\n            }\n\n            <div className=\"centred\">\n                {\n                    opponent !== \"ONLINE\" ?\n                    <NiceButton onClick={() => loadIntoGame()} text=\"START GAME\" buttonStyle=\"medium\"/>\n                        :\n                    <NiceButton onClick={() => onlineReady()} text={!ready ? \"I'm Ready!\" : !opponentReady ? \"Waiting for opponent\" : \"Getting into game...\"} buttonStyle=\"medium\" disabled={ready}/>\n                }\n            </div>\n\n        </div>\n        \n    </div>\n\n}\n\nconst ARMY_TIP = \"Army too strong - edit it to play with it.\";\nconst DECK_TIP = \"Your deck has the incorrect number of cards - edit it to play with it.\"\nconst ONLINE_PLAY_TIP = 'You must be connected to another player to play online.';\n\ninterface SelectionItemProps<T> {\n    selected: boolean,\n    item: T\n    onPress: ( item : T ) => void,\n    itemToString?: ( item : T ) => String,\n    disabled?: boolean,\n    toolTip?: string\n}\n\nexport function SelectionItem<T>({ selected, item, onPress, itemToString = item => item as unknown as string, toolTip, disabled = false }: SelectionItemProps<T>) {\n\n    return <div title={disabled ? toolTip : \"\"} className={`selectionItem ${ selected ? \"selected\" : \"\" } ${ disabled ? \"disabled\" : \"\" }`}\n        onClick={ disabled ? () => {} : () => onPress(item) }\n    >\n        { itemToString(item) }\n    </div>\n\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, useRouteMatch, Link } from 'react-router-dom';\nimport App from \"../App\";\nimport PlayPage from \"../views/PlayPage/PlayPage\";\n\nexport default function PlayRouter() {\n\n    const { url } = useRouteMatch()\n\n    return <Switch>\n\n        <Route path={`${url}`} exact>\n            <PlayPage/>\n        </Route>\n\n        <Route path={`${url}/game/:uuid`}>\n            <App/>\n        </Route>\n\n    </Switch>\n\n}","import React from \"react\";\nimport \"./ArmiesPage.css\"\nimport {Army, FIDEARMY} from \"../../Presets/Armies\";\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport Piece from \"../../Classes/Piece\";\nimport NavBar from \"../../components/NavBar/NavBar\"\nimport { ARMY_KEY } from \"../../KEYS\";\n\nexport default function ArmiesPage() {\n\n    const getArmies = () => {\n\n        //Reading armies from local storage.\n        let armies = [] as Army[];\n\n        let armiesJSON = localStorage.getItem(ARMY_KEY);\n        if (armiesJSON) {\n            let parsedArmies = JSON.parse(armiesJSON);\n            Object.keys(parsedArmies).map(key => armies.push(parsedArmies[key]));\n        }\n\n        return armies;\n    }\n\n    const createNewArmy = () => {\n\n        let armiesJSON = localStorage.getItem(ARMY_KEY);\n        let name : string = \"\";\n\n        if (armiesJSON) {\n            // Get the armies object from localStorage\n            let armies = JSON.parse(armiesJSON);\n            //Ask for a name for the army - defaults to \"My Army\"\n            name = prompt(\"Enter a name for your army\", \"My Army\") || \"My Army\"\n            //If an army of that name already exists, ask again!\n            while ( armies[name] ) {\n                name = prompt(\"That name has already been chosen\") || \"My Army\"\n            }\n            //Save to local storage with new army\n            let newArmies = Object.assign({\n                [ name ]: new Army( FIDEARMY.pieces, name )\n            }, armies)\n            localStorage.setItem(ARMY_KEY, JSON.stringify(newArmies) );\n        }\n\n        else {\n            name = prompt(\"Enter a name for your army\", \"My Army\") || \"My Army\"\n            let armies = {\n                [ name ]: new Army( FIDEARMY.pieces, name )\n            }\n            //Save this new item to local storage\n            localStorage.setItem(ARMY_KEY, JSON.stringify(armies));\n        }\n\n        //Then, we want to redirect to the army builer page for this army.\n\n        window.location.href = `/armies/${ name }`;\n\n    }\n\n    const deleteArmy = ( armyName : string ) => {\n\n        let armiesJSON = localStorage.getItem(ARMY_KEY);\n        if (armiesJSON) {\n\n            let armies = JSON.parse(armiesJSON);\n\n            if (armies[armyName]) delete armies[armyName];\n\n            localStorage.setItem(ARMY_KEY, JSON.stringify(armies));\n\n            window.location.reload();\n\n        }\n\n    }\n\n    return <div id=\"ArmiesPage\" className=\"paddedTop\">\n\n        <NavBar/>\n\n        <h1 className=\"pageHeading\">\n            Your Armies\n        </h1>\n        <p className=\"pageSubtitle\">Where you can view, edit, create and delete armies.</p>\n        <p className=\"pageSubtitle\">Click on an army to edit it, hover over an army to delete it.</p>\n\n        <div className=\"armiesButtonRow\">\n            <NiceButton onClick={ () => createNewArmy() } text=\"NEW ARMY\" buttonStyle=\"small\"/>\n        </div>\n\n        <div className=\"armiesListing\">\n            {\n             getArmies().map(\n                 army => <ArmyPreview army={army} deleteArmy={deleteArmy} />\n             )\n            }\n        </div>\n\n    </div>\n\n}\n\ninterface ArmyPreviewProps {\n    army: Army,\n    deleteArmy: ( armyName : string ) => void\n}\n\nexport function ArmyPreview( { army, deleteArmy }: ArmyPreviewProps) {\n\n    return <div className=\"armyPreview\"\n                onClick={ () => window.location.href = `/armies/${ army.name }` }\n    >\n        <div className=\"delete\" onClick={ e => {\n            e.stopPropagation();\n            deleteArmy( army.name );\n        } }>\n            ✖\n        </div>\n\n        <h3 className=\"ArmyName\">\n            { army.name }\n        </h3>\n        <div className=\"pieces\">\n            { army.pieces.map(\n                piece => <p>{ Piece.getPiece(piece)?.longName || \"name error\" }</p>\n            ) }\n        </div>\n    </div>\n\n}","import React, {useState, useLayoutEffect, useRef} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./ArmiesBuilderPage.css\"\nimport { Army } from \"../../Presets/Armies\";\nimport Piece from \"../../Classes/Piece\"\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport { ARMY_KEY } from \"../../KEYS\";\n\nexport default function ArmiesBuilderPage() {\n\n    let { armyID } = useParams<{ armyID: string }>();\n\n    let [ armyName, setArmyName ] = useState(\"\");\n\n    let [ armyPieces, setArmyPieces ] = useState([1, 1, 1, 1, 1, 1, 1, 1])\n\n    let [ changesMade, setChangesMade ] = useState(false);\n\n    useLayoutEffect(() => {\n        //Run this when the page first loads - retrieve data about the army\n        let armiesJSON = localStorage.getItem( ARMY_KEY );\n        if ( !armiesJSON ) {\n            // If you don't have any armies, then you shouldn't be here!\n            alert(\"No army detected. Redirecting to army menu.\")\n            window.location.href = \"./armies\";\n        }\n        else {\n            let armies = JSON.parse(armiesJSON);\n            setArmyName( armies[armyID].name );\n            setArmyPieces( armies[armyID].pieces );\n        }\n    }, [])\n\n    let [ piecePreview, setPiecePreview ] = useState(0);\n\n    const getChessBoard = () => {\n        let chessSquares = [];\n        for (let i = 0; i <= 7; i++) {\n            chessSquares.push(\n                <div style={{ left: `${ ( i ) * 12.5 }%` }} className={`lowerBoardSquare ${ i % 2 === 0 ? \"dark\" : \"light\" }`}/>\n            )\n        }\n\n        return chessSquares\n    }\n\n    const getChessPieces = () => armyPieces.map(\n        ( piece, i ) => <div className=\"lowerBoardPiece\"\n                style={{ left: `${ ( i ) * 12.5 }%` }}\n                 onDrop={ e => onDrop( e, i ) }\n                 onDragOver={ e => {\n                     e.preventDefault();\n                     e.dataTransfer.dropEffect = \"move\";\n                 } }\n        >\n            {piece === Piece.None ? null : <img src={Piece.getImage(piece)}\n                  draggable\n                  onDragStart={e => pieceDragStart(e, piece, i)}\n                  onDragEnd={e => pieceDragEnd(e, i)}\n            />}\n        </div>\n    )\n\n    const pieceDragStart = ( e : React.DragEvent, piece : number, fromIndex?:number ) => {\n        if ( e.dataTransfer ) {\n            let text = `${piece}`;\n            if (fromIndex !== undefined) text += `-${fromIndex}`\n            e.dataTransfer.setData(\"text\", text);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n    }\n\n    const pieceDragEnd = ( e : React.DragEvent, i : number ) => {\n\n        //IF WE DRAGGED IT TO OUTSIDE THE CHESSBOARD\n        let board  = document.getElementById(\"ArmyChessBoard\");\n        if (board && Math.abs(armyPieces[i]) !== Piece.King) {\n            let { top, height, left, width } = board.getBoundingClientRect();\n            let { clientX, clientY } = e;\n            if ( clientY < top || clientY > top + height || clientX < left || clientX > left + width ) {\n                //REMOVE THE PIECE\n\n                let newPieces = [...armyPieces].map((p, index) => index === i ? Piece.None : p);\n\n                setArmyPieces( newPieces )\n                setChangesMade(true);\n\n                if (pointBuyRef.current) {\n                    pointBuyRef.current.className = \"\";\n                    if (newPieces.filter( p => p !== 6 ).reduce((prev, next) => (Piece.getPiece(next)?.materialValue || 0) + prev, 0 ) > 31) {\n                        setTimeout(() => {\n                            if (pointBuyRef.current) pointBuyRef.current.className = \"invalid\";\n\n                        }, 0)\n                    }\n                }\n            }\n        }\n    }\n\n    let pointBuyRef = useRef<HTMLElement>(null);\n    const getPointBuyTotal = () => armyPieces.filter( p => p !== 6 ).reduce((prev, next) => (Piece.getPiece(next)?.materialValue || 0) + prev, 0 );\n\n    const onDrop = ( e : React.DragEvent, i : number ) => {\n        let droppedInfo = e.dataTransfer.getData(\"text\").split(\"-\");\n        console.log(droppedInfo);\n        let piece : number = Number(droppedInfo[0]);\n        let indexFrom = Number(droppedInfo[1] || -1)\n        //We dragged this piece to the target location\n        if ( i !== 4 && Math.abs(piece) !== Piece.King && Piece.getPiece(piece) ) { //We can't replace the king!\n\n            //piece is the piece we are dragging\n            //If the dropped index !== -1, then we want to swap the pieces.\n            let replacementPiece = armyPieces[i] || Piece.None;\n            console.log(replacementPiece)\n\n            let newPieces = [...armyPieces].map((p, index) => {\n                if (index === i) {\n                    //REPLACING PIECE\n                    return piece;\n                }\n                else if (index === indexFrom) {\n                    return replacementPiece;\n                }\n                else return p;\n            })\n            setArmyPieces( newPieces )\n            setChangesMade(true);\n\n            if (pointBuyRef.current) {\n                pointBuyRef.current.className = \"\";\n                if (newPieces.filter( p => p !== 6 ).reduce((prev, next) => (Piece.getPiece(next)?.materialValue || 0) + prev, 0 ) > 31) {\n                    setTimeout(() => {\n                            if (pointBuyRef.current) pointBuyRef.current.className = \"invalid\";\n\n                        }, 0)\n                }\n            }\n        }\n    }\n\n    const getPieceLibrary = () => Piece.PIECES.filter( p => Piece.getPiece(p) && Piece.getPiece(p)?.categories.indexOf(\"Token\") === -1 ).map(\n        ( piece, i ) => <div className=\"libraryPiece\" onMouseOver={ () => setPiecePreview(piece) }>\n            <img src={ Piece.getImage(piece) }\n             draggable={ piece !== Piece.King }\n             onDragStart={ e => pieceDragStart( e, piece ) }/>\n        </div>\n    )\n\n    const saveChanges = () => {\n\n        if (getPointBuyTotal() > 31) {\n            let sure = window.confirm(\"Your army is over the point buy limit. You will not be able to play with this army. Are you sure you want to save?\");\n            if (!sure) return;\n        }\n\n        let armiesJSON = localStorage.getItem(ARMY_KEY);\n\n        if (armiesJSON) {\n            let armies = JSON.parse(armiesJSON);\n            let newName = prompt(\"Choose your army's name\", armyName) || armyName;\n\n            if ( newName !== armyName ) delete armies[armyName]; //Get rid of the old key\n            armies[newName] = new Army( armyPieces, newName );\n\n            localStorage.setItem(ARMY_KEY, JSON.stringify(armies));\n\n            window.location.href = `/armies`;\n        }\n    }\n\n    return <div id=\"ArmiesBuilderPage\" className=\"paddedTop\">\n\n        <NavBar/>\n        <h1>{ armyID }</h1>\n\n        <div className=\"armiesManager\">\n\n            <div className=\"pieceInfoPreview\">\n\n                <div className={`pieceInfoPreviewBox ${ piecePreview === 0 ? \"noPreview\" : \"preview\" }`}>\n                    {\n                        piecePreview === 0 ? <>\n                            <p className=\"faded\">Hover over a piece to look at it.</p>\n                            <p className=\"faded\">Drag pieces to change your army.</p>\n                        </>\n\n                        : <>\n                            <h1 className=\"PieceInfo\">{ Piece.getPiece(piecePreview)?.longName }</h1>\n                            <div className=\"imgContainer\">\n                                <img src={ Piece.getImage(piecePreview) } />\n                            </div>\n                            {\n                                piecePreview === Piece.Pawn ?\n                                    <p className=\"faded\">You cannot change your front row of pawns.</p> : <><br/><br/></>\n                            }\n                            {\n                                piecePreview === Piece.King ?\n                                    <p className=\"faded\">This piece cannot be moved, swapped or altered.</p> : <><br/><br/></>\n                            }\n                            <p className=\"info\">\n                                <b>Notation:</b> { Piece.getPiece(piecePreview)?.shortName } <br/>\n                                <b>Value:</b> { piecePreview === Piece.King ? \"Infinity\" : Piece.getPiece(piecePreview)?.materialValue } <br/>\n                                <br/>\n                                { Piece.getPiece(piecePreview)?.movesDescription } <br/><br/>\n                                { Piece.getPiece(piecePreview)?.specialMoves.map((s, i, x) =>\n                                    <>{s}{ i+1 === x.length ? <> <br/><br/> </> : null }</>) }\n                                { Piece.getPiece(piecePreview)?.notes ? <>{Piece.getPiece(piecePreview)?.notes}<br/><br/></> : null }\n\n                            </p>\n                            <p className=\"faded\">\n                                Tags:\n                                { Piece.getPiece(piecePreview)?.categories.map((c, i, x) => <> {c}{ i + 1 === x.length ? \"\" : \",\" }</> ) }\n                            </p>\n                        </>\n                    }\n                </div>\n\n            </div>\n\n            <div className=\"piecesList\">\n                <div className=\"pieceLibrary\">\n\n                    { getPieceLibrary() }\n\n                </div>\n            </div>\n\n            <div className=\"lowerBoard\">\n\n\n                <div className=\"chessBoardPadding\">\n\n                    <div className=\"pointBuyCounter\">\n                        <p>Point Buy: <strong ref={pointBuyRef}>{ getPointBuyTotal() }/31 </strong> </p>\n                    </div>\n\n                    <div className=\"chessBoard\" id=\"ArmyChessBoard\" style={{width: \"100%\"}}>\n\n                        { getChessBoard() }\n                        { getChessPieces() }\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n        {\n            changesMade ?\n                <div className=\"saveChanges\">\n                    <NiceButton\n                        onClick={ saveChanges }\n                        text=\"Save Changes\"\n                    />\n                </div> : null\n        }\n\n    </div>\n\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, useRouteMatch } from 'react-router-dom';\nimport ArmiesPage from \"../views/ArmiesPage/ArmiesPage\";\nimport ArmiesBuilderPage from \"../views/ArmiesBuilderPage/ArmiesBuilderPage\";\n\nexport default function ArmiesRouter() {\n\n    const { url } = useRouteMatch()\n\n    return <Switch>\n\n        <Route path={`${url}`} exact>\n            <ArmiesPage/>\n        </Route>\n\n        <Route path={`${url}/:armyID`}>\n            <ArmiesBuilderPage/>\n        </Route>\n\n    </Switch>\n\n}","import React, {useRef} from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Homepage.css\";\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport {Buffer} from \"buffer\";\n\nexport default function Homepage() {\n\n    const popup = useRef<HTMLDivElement>(null);\n\n    const showInformation = () => {\n        if (popup.current) {\n            popup.current.className = \"shown\"\n        }\n    }\n    const hideInformation = () => {\n        if (popup.current) {\n            popup.current.className = \"hidden\"\n        }\n    }\n\n    return <div id=\"HomepageMain\">\n        <h1 className=\"MainTitle\">Epic Fantasy Chess</h1>\n\n        <div className=\"buttonsRow\">\n\n            <NiceButton onClick=\"/play\" text=\"PLAY\" buttonStyle=\"medium\"/>\n            \n            <NiceButton onClick=\"/armies\" text=\"ARMIES\" buttonStyle=\"medium\"/>\n\n            <NiceButton onClick=\"/decks\" text=\"DECKS\" buttonStyle=\"medium\"/>\n\n        </div>\n\n        <div className=\"infoRow\">\n            <p onMouseDown={ showInformation }>How to play</p>\n        </div>\n\n        <div ref={popup} className=\"hidden\" id=\"HowToPlayPopup\">\n            <div id=\"PopupBackground\"/>\n            <div id=\"HowToPlayPopupBubble\">\n                <h1>Welcome to Epic Fantasy Chess!</h1>\n                <p>Chess, but with a twist - or several!</p>\n                <div className=\"left section\">\n                    <h2>Choose your pieces!</h2>\n                    <p>You can build armies from regular chess pieces, plus some fairy ones!</p>\n                    <p>Try out different armies to see what works for your style.</p>\n                    <p>If you see a piece in game and don't know what it does, <b>right-click</b> to find out more!</p>\n                    <div id=\"ScatteredPieces\">\n                        <img src=\"./Assets/Misc/scattered-pieces.svg\"/>\n                    </div>\n                </div>\n                <div className=\"right section\">\n                    <h2>Play Cards!</h2>\n                    <p>Instead of making a move, you can instead <b>Play Cards!</b> Cards can affect the board, move pieces, or even summon new ones!</p>\n                    <p>Cards can be played once their <b>Chaos Score</b> has been reached - after that many points worth of pieces have been captured!</p>\n                    <p>Be careful, however - they <b>can't be played while in check!</b></p>\n                    <p>Some cards are <b>fast</b>. This means you can play them without ending your turn - so you can play another, or make a regular move!</p>\n                    <div id=\"ScatteredCards\">\n                        <img src=\"./Assets/Misc/scattered-cards.svg\"/>\n                    </div>\n                </div>\n                <div className=\"left section\">\n                    <h2>Pre-made or Customised!</h2>\n                    <p>There are a few <b>pre-made</b> decks and armies for you to try out, or you can make your own with any combination you wish!</p>\n                    <p>The <b>FIDE</b> army uses regular pieces, and their deck is <b>balanced</b> with cards to <b>move, promote</b> or even <b>demote</b> pieces!</p>\n                    <p>The <b>Colourbound Crusaders</b> use strong pieces stuck on a single colour - with cards to <b>maneuver</b> the board and <b>limit</b> your opponent's choices!</p>\n                </div>\n                <div className=\"thin section\">\n                    <NiceButton buttonStyle=\"medium\" onClick={ hideInformation } text=\"Cool!\"/>\n                </div>\n\n            </div>\n\n\n        </div>\n\n    </div>\n\n}","import React from \"react\";\nimport \"./DecksPage.css\"\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport NavBar from \"../../components/NavBar/NavBar\"\nimport { DECK_KEY } from \"../../KEYS\";\nimport {Deck, FIDEDECK} from \"../../Presets/Decks\";\nimport ALL_CARDS from \"../../Cards/Cards\";\n\nexport default function DecksPage() {\n\n    const getDecks = () => {\n\n        //Reading decks from local storage.\n        let decks = [] as Deck[];\n\n        let decksJSON = localStorage.getItem(DECK_KEY);\n        if (decksJSON) {\n            let parsedDecks = JSON.parse(decksJSON);\n            Object.keys(parsedDecks).map(key => decks.push(parsedDecks[key]));\n        }\n\n        return decks;\n    }\n\n    const createNewDeck = () => {\n\n        let deckJSON = localStorage.getItem(DECK_KEY);\n        let name : string = \"\";\n\n        if (deckJSON) {\n            // Get the decks object from localStorage\n            let decks = JSON.parse(deckJSON);\n            //Ask for a name for the deck - defaults to \"My Deck\"\n            name = prompt(\"Enter a name for your deck\", \"My Deck\") || \"My Deck\"\n            //If a deck of that name already exists, ask again!\n            while ( decks[name] ) {\n                name = prompt(\"That name has already been chosen\") || \"My Deck\"\n            }\n            //Save to local storage with new army\n            let newDecks = Object.assign({\n                [ name ]: new Deck( [], name )\n            }, decks)\n            localStorage.setItem(DECK_KEY, JSON.stringify(newDecks) );\n        }\n\n        else {\n            name = prompt(\"Enter a name for your deck\", \"My Deck\") || \"My Deck\"\n            let decks = {\n                [ name ]: new Deck( [], name )\n            }\n            //Save this new item to local storage\n            localStorage.setItem(DECK_KEY, JSON.stringify(decks));\n        }\n\n        //Then, we want to redirect to the army builer page for this army.\n\n        window.location.href = `/decks/${ name }`;\n\n    }\n\n    const deleteDeck = ( deckName : string ) => {\n\n        let deckJSON = localStorage.getItem(DECK_KEY);\n        if (deckJSON) {\n\n            let decks = JSON.parse(deckJSON);\n\n            if (decks[deckName]) delete decks[deckName];\n\n            localStorage.setItem(DECK_KEY, JSON.stringify(decks));\n\n            window.location.reload();\n\n        }\n\n    }\n\n    return <div id=\"DecksPage\" className=\"paddedTop\">\n\n        <NavBar/>\n\n        <h1 className=\"pageHeading\">\n            Your Decks\n        </h1>\n        <p className=\"pageSubtitle\">Where you can view, edit, create and delete decks.</p>\n        <p className=\"pageSubtitle\">Click on a deck to edit it, hover over a deck to delete it.</p>\n\n        <div className=\"decksButtonRow\">\n            <NiceButton onClick={ () => createNewDeck() } text=\"NEW DECK\" buttonStyle=\"small\"/>\n        </div>\n\n        <div className=\"decksListing\">\n            {\n             getDecks().map(\n                 deck => <DeckPreview deck={deck} deleteDeck={deleteDeck} />\n             )\n            }\n        </div>\n\n    </div>\n\n}\n\ninterface DeckPreviewProps {\n    deck: Deck,\n    deleteDeck: ( deckName : string ) => void\n}\n\nexport function DeckPreview({ deck, deleteDeck }: DeckPreviewProps) {\n\n    const getDeckQuantity = ( cardId: string ) => deck.cards.filter(c => c === cardId).length\n\n    return <div className=\"deckPreview\"\n                onClick={ () => window.location.href = `/decks/${ deck.name }` }\n    >\n        <div className=\"delete\" onClick={ e => {\n            e.stopPropagation();\n            deleteDeck( deck.name );\n        } }>\n            ✖\n        </div>\n\n        <h3 className=\"DeckName\">\n            { deck.name }\n        </h3>\n        <div className=\"cards\">\n            { deck.cards.filter((c, i, a) => a.indexOf(c) === i).filter((c, i) => i <= 3).map(\n                cardId => <p>{ ALL_CARDS[ cardId ].cardName || \"name error\" } x{ getDeckQuantity(cardId) }</p>\n            ) }\n            {\n                deck.cards.filter((c, i, a) => a.indexOf(c) === i).length > 4 ? <p><i>Click to view more</i></p> : null\n            }\n        </div>\n    </div>\n\n}","import React, {useState, useLayoutEffect, useRef} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./DecksBuilderPage.css\"\nimport { Army } from \"../../Presets/Armies\";\nimport Piece from \"../../Classes/Piece\"\nimport NiceButton from \"../../components/NiceButton/NiceButton\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport {ARMY_KEY, DECK_KEY} from \"../../KEYS\";\nimport {Deck, FIDEDECK} from \"../../Presets/Decks\";\nimport ALL_CARDS from \"../../Cards/Cards\";\n\nexport default function DecksBuilderPage() {\n\n    let { deckId } = useParams<{ deckId: string }>();\n\n    let [ deckName, setDeckName ] = useState(\"\");\n\n    let [ deckCards, setDeckCards ] = useState([] as string[])\n\n    let [ changesMade, setChangesMade ] = useState(false);\n\n    useLayoutEffect(() => {\n        //Run this when the page first loads - retrieve data about the army\n        let decksJSON = localStorage.getItem( DECK_KEY );\n        if ( !decksJSON ) {\n            // If you don't have any armies, then you shouldn't be here!\n            alert(\"No deck detected. Redirecting to army menu.\")\n            window.location.href = \"./decks\";\n        }\n        else {\n            let decks = JSON.parse(decksJSON);\n            console.log(decks, deckId);\n            setDeckName( decks[deckId].name );\n            setDeckCards( decks[deckId].cards );\n        }\n    }, [])\n\n    let [ cardDragging, setCardDragging ] = useState<\"lib\"|\"list\"|null>(null);\n\n    const onDragStart = ( e : React.DragEvent, card: string, origin: \"lib\" | \"list\" ) => {\n        setCardDragging(origin);\n        if (e.dataTransfer) {\n            e.dataTransfer.setData(\"text/plain\", card);\n            e.dataTransfer.effectAllowed = \"copyMove\";\n        }\n    }\n\n    const onDragEnd = () => {\n        setCardDragging(null);\n    }\n\n    const onDrop = ( e: React.DragEvent ) => {\n        if (e.dataTransfer) {\n            const cardId = e.dataTransfer.getData(\"text/plain\");\n            if (cardId) {\n                //We've got the card ID\n                //Now, we were either removing the card, or adding the card\n                if ( cardDragging === \"lib\" ) {\n                    // Dragging from library into deck, adding\n                    setDeckCards(prev => {\n                        let newCards = [...prev];\n                        newCards.push(cardId);\n                        return newCards.sort(( a, b ) => ALL_CARDS[a].cost - ALL_CARDS[b].cost);\n                    })\n                }\n                else {\n                    //Dragging from deck to library, removing card\n                    setDeckCards(prev => {\n                        let index = prev.indexOf(cardId);\n                        return [ ...prev.slice(0, index), ...prev.slice(index + 1, prev.length) ]\n                    })\n                }\n                setCardDragging(null);\n                if (!changesMade) setChangesMade(true);\n            }\n        }\n    }\n\n    const getCardLibrary = () => Object.values(ALL_CARDS).map(\n        ( card, i ) => <div className={`libraryCard ${getDeckQuantity(card.id) >= 2 ? \"disabled\" : \"\"}`} draggable={getDeckQuantity(card.id) < 2} onDragStart={e => onDragStart(e, card.id, \"lib\")} onDragEnd={onDragEnd}>\n            <div>\n                <div className=\"cardChaosScore\">\n                    <div className=\"score\">{ card.cost }</div>\n                    <div className=\"speed\">{ card.fast ? \"Fast\" : \"\" }</div>\n                </div>\n                <div className=\"cardTitle\">\n                    { card.cardName }\n                </div>\n                <div className=\"cardDescription\">\n                    { card.description }\n                </div>\n                <div className=\"cardExpac\">\n                    {card.expac}\n                </div>\n            </div>\n            {\n                getDeckQuantity(card.id) >= 2 ? <>\n                    <div className=\"limitReached limitBackground\"/>\n                    <div className=\"limitReached limitText\">\n                    Maximum number of copies reached\n                </div></>: null\n            }\n        </div>\n    )\n\n    const getCardListing = () => [...deckCards].filter((c, i, a) => a.indexOf(c) === i).map(\n        ( card, i ) => <div className=\"listedCard\" draggable onDragStart={e => onDragStart(e, card, \"list\")} onDragEnd={onDragEnd} >\n            <span className=\"chaosValue\">({ ALL_CARDS[card].cost})</span>\n            <span className=\"cardName\">{ ALL_CARDS[card].cardName }</span>\n            <span className=\"cardQuantity\">x{ getDeckQuantity(card) }</span>\n        </div>\n    )\n\n    const getDeckQuantity = ( cardId: string ) => deckCards.filter(c => c === cardId).length\n\n    const saveChanges = () => {\n        let cont = true;\n        if ( deckCards.length !== 15 ) {\n            cont = window.confirm(\"Your deck has an improper number of cards - you won't be able to play with it. Are you sure you want to continue?\")\n        }\n\n        let decksJSON = localStorage.getItem(DECK_KEY);\n\n        if (decksJSON && cont) {\n            let decks = JSON.parse(decksJSON);\n            let newName = prompt(\"Choose your deck's name\", deckName) || deckName;\n\n            if ( newName !== deckName ) delete decks[deckName]; //Get rid of the old key\n            decks[newName] = new Deck( deckCards, newName );\n\n            localStorage.setItem(DECK_KEY, JSON.stringify(decks));\n\n            window.location.href = `/decks`;\n        }\n    }\n\n    return <div id=\"DecksBuilderPage\" className=\"paddedTop\">\n\n        <NavBar/>\n        <h1>{ deckId }</h1>\n\n        <div className=\"decksManager\">\n\n            <div className=\"cardListPreview\">\n\n                <div className={`cardListBox`}>\n                    <h2 className=\"cardListingTitle\">Decklist</h2>\n                    {   getCardListing()    }\n                    <div className=\"counter\">{deckCards.length}/15</div>\n                    {\n                        cardDragging !== \"lib\" ? null :\n                            <div className=\"libDragReceiverOuter\"\n                                onDrop={onDrop}\n                                onDragOver={ e => {\n                                     e.preventDefault();\n                                     e.dataTransfer.dropEffect = \"copy\";\n                                } }>\n                            <div className=\"dragHereNotice\">\n                                Drag here to add a card to\n                                your deck\n                            </div>\n                        </div>\n                    }\n\n                </div>\n\n            </div>\n\n            <div className=\"cardsList\">\n                <div className=\"cardLibrary\">\n\n                    { getCardLibrary() }\n\n                    {\n                        cardDragging !== \"list\" ? null :\n                            <div className=\"listDragReceiver\"\n                                 onDrop={onDrop}\n                                 onDragOver={ e => {\n                                     e.preventDefault();\n                                     e.dataTransfer.dropEffect = \"copy\";\n                                 } }>\n                                <div className=\"dragHereNotice\">\n                                    Drag here to remove a card from your deck\n                                </div>\n                        </div>\n                    }\n\n                </div>\n            </div>\n\n        </div>\n\n        {\n            changesMade ?\n                <div className=\"saveChanges\">\n                    <NiceButton\n                        onClick={ saveChanges }\n                        text=\"Save Changes\"\n                    />\n                </div> : null\n        }\n\n    </div>\n\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, useRouteMatch } from 'react-router-dom';\nimport DecksPage from \"../views/DecksPage/DecksPage\";\nimport DecksBuilderPage from \"../views/DecksBuilderPage/DecksBuilderPage\";\n\nexport default function DecksRouter() {\n\n    const { url } = useRouteMatch()\n\n    return <Switch>\n\n        <Route path={`${url}`} exact>\n            <DecksPage/>\n        </Route>\n\n        <Route path={`${url}/:deckId`}>\n            <DecksBuilderPage/>\n        </Route>\n\n    </Switch>\n\n}","import React, {useLayoutEffect, useRef, useState} from 'react';\nimport {Route, Switch, useLocation} from 'react-router-dom';\nimport PlayRouter from \"./Routers/PlayRouter\";\nimport ArmiesRouter from \"./Routers/ArmiesRouter\";\nimport Homepage from \"./views/Homepage/Homepage\";\nimport DecksRouter from \"./Routers/DecksRouter\";\nimport ConnectionContext, {RTC_CONFIG} from './Context/ConnectionContext';\n\nexport default function MainRouter() {\n\n    let location = useLocation()\n\n    useLayoutEffect(() => {\n        if ( location.pathname.startsWith(\"/play/game/\") && location.pathname.length > 11 ) {\n            document.body.style.overflow = \"hidden\";\n        }\n        else {\n            document.body.style.overflow = \"auto\";\n        }\n    }, [location]);\n\n    const Conn = useRef(new RTCPeerConnection(RTC_CONFIG));\n    Conn.current.onconnectionstatechange = () => setConnectionState(Conn.current.connectionState)\n    //const Channel = useRef<RTCDataChannel|null>(/*Conn.current.createDataChannel('original data channel')*/null);\n\n    const [ Channel, setChannel ] = useState<RTCDataChannel|null>(null);\n\n    // Slightly cheating to make sure the connection state stays up to date\n    const [connectionState, setConnectionState] = useState<string>('Not Connected');\n\n\n    const initChannel = (remoteChannel?: RTCDataChannel) => {\n        if (remoteChannel) { //If we're receiving, set it to the received channel\n            console.log(`Adding remote channel ${remoteChannel.id}`)\n            console.log(\"Current channel: \\n\", Channel)\n            console.log(\"Received channel: \\n\", remoteChannel)\n            //Channel.current = remoteChannel?\n            setChannel(remoteChannel)\n            console.log(\"Added remote channel: \\n \", Channel)\n        }\n        else { //If we're not receiving, we've got to create the channel ourselves\n            let newDataChannel = Conn.current.createDataChannel('data channel')\n            setChannel(newDataChannel);\n            console.log(\"Created channel \" + newDataChannel.id)\n        }\n        let id = Channel?.id;\n        if (Channel) {\n            Channel.onopen = () => {\n                console.log(`Data channel ${Channel?.id} opened!`)\n            }\n            Channel.onclose = () => {\n                console.log(`Data channel ${id} closed!`);\n            }\n            Channel.onmessage = e => {\n                console.log(`MESSAGE RECEIVED on channel ${id} (Currently listening on ${Channel?.id}:`, e)\n            }\n        }\n    }\n\n    const setListener = ( listener: (e:MessageEvent) => void ) => {\n        if (Channel) {\n            Channel.onmessage = listener;\n            console.log(\"Updated event listener\")\n        }\n        else console.log(\"Tried to attach listener but no data channel exists.\")\n    }\n\n\n    return <ConnectionContext.Provider value={{\n        Conn: Conn.current,\n        Channel: Channel,\n        initChannel,\n        setListener\n    }}>\n        <Switch>\n            <Route path=\"/epic-fantasy-chess/\" exact>\n                {/*  The Homepage  */}\n                <Homepage/>\n            </Route>\n            <Route path=\"/epic-fantasy-chess/play\">\n                {/*  The play router  */}\n                <PlayRouter/>\n            </Route>\n            <Route path=\"/epic-fantasy-chess/armies\">\n                {/*  The armies router */}\n                <ArmiesRouter/>\n            </Route>\n            <Route path=\"/epic-fantasy-chess/decks\">\n                {/*  The decks router  */}\n                <DecksRouter/>\n            </Route>\n        </Switch>\n    </ConnectionContext.Provider>\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport MainRouter from \"./MainRouter\";\nimport {BrowserRouter, Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <MainRouter />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}